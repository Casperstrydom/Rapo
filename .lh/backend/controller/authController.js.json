{
    "sourceFile": "backend/controller/authController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1753433328178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753448453724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,118 +1,278 @@\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n+const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Helper function to generate token\r\n+// Improved token generation with better error handling\r\n const generateToken = (userId) => {\r\n-  return jwt.sign({ id: userId }, process.env.JWT_SECRET || \"your_jwt_secret\", {\r\n-    expiresIn: \"30d\",\r\n-  });\r\n+  try {\r\n+    return jwt.sign(\r\n+      { id: userId }, \r\n+      process.env.JWT_SECRET || \"your_jwt_secret\", \r\n+      { \r\n+        expiresIn: \"30d\",\r\n+        algorithm: \"HS256\" \r\n+      }\r\n+    );\r\n+  } catch (error) {\r\n+    console.error(\"Token generation error:\", error);\r\n+    throw new Error(\"Failed to generate authentication token\");\r\n+  }\r\n };\r\n \r\n-const bcrypt = require(\"bcryptjs\");\r\n-\r\n-\r\n exports.registerUser = async (req, res) => {\r\n   const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n \r\n+  // Validate input\r\n   if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n-    return res.status(400).json({ message: \"All fields are required.\" });\r\n+    return res.status(400).json({ \r\n+      success: false,\r\n+      message: \"All fields are required.\",\r\n+      requiredFields: [\"fullNames\", \"familyName\", \"email\", \"password\", \"gfgNumber\"]\r\n+    });\r\n   }\r\n \r\n-  if (gfgNumber.length !== 14) {\r\n-    return res.status(400).json({ message: \"GFG number must be 14 digits.\" });\r\n+  // Validate email format\r\n+  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Please provide a valid email address\"\r\n+    });\r\n   }\r\n \r\n+  // Validate password strength\r\n+  if (password.length < 8) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Password must be at least 8 characters long\"\r\n+    });\r\n+  }\r\n+\r\n+  // Validate GFG number\r\n+  if (gfgNumber.length !== 14 || !/^\\d+$/.test(gfgNumber)) {\r\n+    return res.status(400).json({ \r\n+      success: false,\r\n+      message: \"GFG number must be exactly 14 digits\"\r\n+    });\r\n+  }\r\n+\r\n   try {\r\n-    const existingUser = await User.findOne({ email });\r\n+    // Check for existing user\r\n+    const existingUser = await User.findOne({ email }).lean();\r\n     if (existingUser) {\r\n-      return res.status(409).json({ message: \"Email already registered.\" });\r\n+      return res.status(409).json({ \r\n+        success: false,\r\n+        message: \"Email already registered\",\r\n+        suggestion: \"Try logging in or use a different email\"\r\n+      });\r\n     }\r\n \r\n-    const newUser = new User({ fullNames, familyName, email, password, gfgNumber });\r\n-    await newUser.save();\r\n+    // Create new user\r\n+    const newUser = new User({ \r\n+      fullNames: fullNames.trim(),\r\n+      familyName: familyName.trim(),\r\n+      email: email.toLowerCase().trim(),\r\n+      password,\r\n+      gfgNumber\r\n+    });\r\n \r\n+    // Save user with error handling\r\n+    await newUser.save()\r\n+      .then(() => console.log(\"User saved successfully\"))\r\n+      .catch(saveError => {\r\n+        console.error(\"User save error:\", saveError);\r\n+        throw new Error(\"Failed to save user to database\");\r\n+      });\r\n+\r\n     // Generate token\r\n     const token = generateToken(newUser._id);\r\n \r\n-    res.status(201).json({ \r\n+    // Successful response\r\n+    return res.status(201).json({\r\n+      success: true,\r\n       message: \"User registered successfully!\",\r\n       token,\r\n       user: {\r\n         id: newUser._id,\r\n         fullNames: newUser.fullNames,\r\n         familyName: newUser.familyName,\r\n         email: newUser.email\r\n-      }\r\n+      },\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n+\r\n   } catch (error) {\r\n-    console.error(\"Register error:\", error);\r\n-    res.status(500).json({ message: \"Server error.\" });\r\n+    console.error(\"Registration error:\", {\r\n+      message: error.message,\r\n+      stack: error.stack,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Registration failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n+      systemSuggestion: \"Please try again later or contact support\"\r\n+    });\r\n   }\r\n };\r\n \r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n+  // Basic validation\r\n+  if (!email || !password) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Both email and password are required\"\r\n+    });\r\n+  }\r\n+\r\n   try {\r\n-    const user = await User.findOne({ email });\r\n-    if (!user) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n+    // Find user with case-insensitive email\r\n+    const user = await User.findOne({ \r\n+      email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n+    });\r\n \r\n+    if (!user) {\r\n+      return res.status(401).json({\r\n+        success: false,\r\n+        message: \"Invalid credentials\",\r\n+        suggestion: \"Check your email and password\"\r\n+      });\r\n+    }\r\n+\r\n+    // Compare passwords\r\n     const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({\r\n+        success: false,\r\n+        message: \"Invalid credentials\",\r\n+        suggestion: \"Check your email and password\"\r\n+      });\r\n+    }\r\n \r\n     // Generate token\r\n     const token = generateToken(user._id);\r\n \r\n-    res.status(200).json({ \r\n+    // Successful login\r\n+    return res.status(200).json({\r\n+      success: true,\r\n       message: \"Login successful!\",\r\n       token,\r\n       user: {\r\n         id: user._id,\r\n         fullNames: user.fullNames,\r\n         familyName: user.familyName,\r\n         email: user.email\r\n-      }\r\n+      },\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n+\r\n   } catch (error) {\r\n     console.error(\"Login error:\", error);\r\n-    res.status(500).json({ message: \"Server error.\" });\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Login failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n exports.getUserData = async (req, res) => {\r\n   try {\r\n-    const user = await User.findById(req.user.id).select(\"-password -gfgNumber\");\r\n+    const user = await User.findById(req.user.id)\r\n+      .select(\"-password -gfgNumber -__v\")\r\n+      .lean();\r\n+\r\n     if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: \"User not found\",\r\n+        suggestion: \"Try logging in again\"\r\n+      });\r\n     }\r\n-    res.json(user);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: \"Server error\" });\r\n+\r\n+    return res.status(200).json({\r\n+      success: true,\r\n+      user,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Get user error:\", error);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Failed to fetch user data\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n exports.updateUser = async (req, res) => {\r\n   try {\r\n     const { fullNames, familyName, email } = req.body;\r\n-    \r\n-    // Check if email is being updated to one that already exists\r\n+\r\n+    // Validate input\r\n+    if (!fullNames || !familyName) {\r\n+      return res.status(400).json({\r\n+        success: false,\r\n+        message: \"Full names and family name are required\"\r\n+      });\r\n+    }\r\n+\r\n+    // Check for email change\r\n     if (email && email !== req.user.email) {\r\n-      const existingUser = await User.findOne({ email });\r\n-      if (existingUser) {\r\n-        return res.status(400).json({ message: \"Email already in use\" });\r\n+      const emailExists = await User.findOne({ \r\n+        email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n+      });\r\n+      \r\n+      if (emailExists) {\r\n+        return res.status(400).json({\r\n+          success: false,\r\n+          message: \"Email already in use\",\r\n+          suggestion: \"Use a different email address\"\r\n+        });\r\n       }\r\n     }\r\n \r\n+    // Prepare update data\r\n+    const updateData = {\r\n+      fullNames: fullNames.trim(),\r\n+      familyName: familyName.trim(),\r\n+      ...(email && { email: email.toLowerCase().trim() })\r\n+    };\r\n+\r\n+    // Update user\r\n     const updatedUser = await User.findByIdAndUpdate(\r\n       req.user.id,\r\n-      { fullNames, familyName, email },\r\n-      { new: true }\r\n-    ).select(\"-password -gfgNumber\");\r\n+      updateData,\r\n+      { \r\n+        new: true,\r\n+        runValidators: true \r\n+      }\r\n+    ).select(\"-password -gfgNumber -__v\");\r\n \r\n-    res.json(updatedUser);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: \"Server error\" });\r\n+    if (!updatedUser) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: \"User not found\"\r\n+      });\r\n+    }\r\n+\r\n+    return res.status(200).json({\r\n+      success: true,\r\n+      message: \"Profile updated successfully\",\r\n+      user: updatedUser,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Update error:\", error);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Failed to update profile\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n+      systemSuggestion: \"Please try again later\"\r\n+    });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753449279671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,97 @@\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Improved token generation with better error handling\r\n+// Check for JWT_SECRET at startup\r\n+if (!process.env.JWT_SECRET) {\r\n+  console.error(\"FATAL: JWT_SECRET is not defined in environment variables\");\r\n+  process.exit(1);\r\n+}\r\n+\r\n+// Enhanced token generation\r\n const generateToken = (userId) => {\r\n+  if (!process.env.JWT_SECRET) {\r\n+    throw new Error(\"JWT_SECRET is not configured\");\r\n+  }\r\n   try {\r\n     return jwt.sign(\r\n       { id: userId }, \r\n-      process.env.JWT_SECRET || \"your_jwt_secret\", \r\n+      process.env.JWT_SECRET, \r\n       { \r\n         expiresIn: \"30d\",\r\n         algorithm: \"HS256\" \r\n       }\r\n     );\r\n   } catch (error) {\r\n-    console.error(\"Token generation error:\", error);\r\n+    console.error(\"Token generation error:\", {\r\n+      error: error.message,\r\n+      stack: error.stack,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n     throw new Error(\"Failed to generate authentication token\");\r\n   }\r\n };\r\n \r\n exports.registerUser = async (req, res) => {\r\n   const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n \r\n-  // Validate input\r\n-  if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n+  // Enhanced input validation\r\n+  const missingFields = [];\r\n+  if (!fullNames) missingFields.push(\"fullNames\");\r\n+  if (!familyName) missingFields.push(\"familyName\");\r\n+  if (!email) missingFields.push(\"email\");\r\n+  if (!password) missingFields.push(\"password\");\r\n+  if (!gfgNumber) missingFields.push(\"gfgNumber\");\r\n+\r\n+  if (missingFields.length > 0) {\r\n     return res.status(400).json({ \r\n       success: false,\r\n       message: \"All fields are required.\",\r\n-      requiredFields: [\"fullNames\", \"familyName\", \"email\", \"password\", \"gfgNumber\"]\r\n+      missingFields,\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n   }\r\n \r\n   // Validate email format\r\n   if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n     return res.status(400).json({\r\n       success: false,\r\n-      message: \"Please provide a valid email address\"\r\n+      message: \"Please provide a valid email address\",\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n   }\r\n \r\n   // Validate password strength\r\n   if (password.length < 8) {\r\n     return res.status(400).json({\r\n       success: false,\r\n-      message: \"Password must be at least 8 characters long\"\r\n+      message: \"Password must be at least 8 characters long\",\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n   }\r\n \r\n   // Validate GFG number\r\n   if (gfgNumber.length !== 14 || !/^\\d+$/.test(gfgNumber)) {\r\n     return res.status(400).json({ \r\n       success: false,\r\n-      message: \"GFG number must be exactly 14 digits\"\r\n+      message: \"GFG number must be exactly 14 digits\",\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n   }\r\n \r\n   try {\r\n-    // Check for existing user\r\n-    const existingUser = await User.findOne({ email }).lean();\r\n+    // Check for existing user (case-insensitive)\r\n+    const existingUser = await User.findOne({ \r\n+      email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n+    }).lean();\r\n+\r\n     if (existingUser) {\r\n       return res.status(409).json({ \r\n         success: false,\r\n         message: \"Email already registered\",\r\n-        suggestion: \"Try logging in or use a different email\"\r\n+        suggestion: \"Try logging in or use a different email\",\r\n+        timestamp: new Date().toISOString()\r\n       });\r\n     }\r\n \r\n     // Create new user\r\n@@ -74,57 +102,68 @@\n       password,\r\n       gfgNumber\r\n     });\r\n \r\n-    // Save user with error handling\r\n-    await newUser.save()\r\n-      .then(() => console.log(\"User saved successfully\"))\r\n-      .catch(saveError => {\r\n-        console.error(\"User save error:\", saveError);\r\n-        throw new Error(\"Failed to save user to database\");\r\n-      });\r\n+    // Save user with improved error handling\r\n+    await newUser.save();\r\n \r\n     // Generate token\r\n     const token = generateToken(newUser._id);\r\n \r\n-    // Successful response\r\n+    // Successful response with more user data\r\n     return res.status(201).json({\r\n       success: true,\r\n       message: \"User registered successfully!\",\r\n       token,\r\n       user: {\r\n         id: newUser._id,\r\n         fullNames: newUser.fullNames,\r\n         familyName: newUser.familyName,\r\n-        email: newUser.email\r\n+        email: newUser.email,\r\n+        createdAt: newUser.createdAt,\r\n+        status: newUser.status\r\n       },\r\n       timestamp: new Date().toISOString()\r\n     });\r\n \r\n   } catch (error) {\r\n     console.error(\"Registration error:\", {\r\n       message: error.message,\r\n       stack: error.stack,\r\n+      fullError: JSON.stringify(error, Object.getOwnPropertyNames(error)),\r\n       timestamp: new Date().toISOString()\r\n     });\r\n \r\n-    return res.status(500).json({\r\n+    // Enhanced error response\r\n+    const errorResponse = {\r\n       success: false,\r\n       message: \"Registration failed\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n-      systemSuggestion: \"Please try again later or contact support\"\r\n-    });\r\n+      systemSuggestion: \"Please try again later or contact support\",\r\n+      timestamp: new Date().toISOString()\r\n+    };\r\n+\r\n+    if (process.env.NODE_ENV === 'development') {\r\n+      errorResponse.error = {\r\n+        name: error.name,\r\n+        message: error.message,\r\n+        ...(error.code && { code: error.code }),\r\n+        ...(error.errors && { mongoErrors: error.errors })\r\n+      };\r\n+    }\r\n+\r\n+    return res.status(500).json(errorResponse);\r\n   }\r\n };\r\n \r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n-  // Basic validation\r\n+  // Enhanced validation\r\n   if (!email || !password) {\r\n     return res.status(400).json({\r\n       success: false,\r\n-      message: \"Both email and password are required\"\r\n+      message: \"Both email and password are required\",\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n   }\r\n \r\n   try {\r\n@@ -136,9 +175,10 @@\n     if (!user) {\r\n       return res.status(401).json({\r\n         success: false,\r\n         message: \"Invalid credentials\",\r\n-        suggestion: \"Check your email and password\"\r\n+        suggestion: \"Check your email and password\",\r\n+        timestamp: new Date().toISOString()\r\n       });\r\n     }\r\n \r\n     // Compare passwords\r\n@@ -146,35 +186,51 @@\n     if (!isMatch) {\r\n       return res.status(401).json({\r\n         success: false,\r\n         message: \"Invalid credentials\",\r\n-        suggestion: \"Check your email and password\"\r\n+        suggestion: \"Check your email and password\",\r\n+        timestamp: new Date().toISOString()\r\n       });\r\n     }\r\n \r\n+    // Update last login\r\n+    user.lastLogin = new Date();\r\n+    await user.save();\r\n+\r\n     // Generate token\r\n     const token = generateToken(user._id);\r\n \r\n-    // Successful login\r\n+    // Successful login with more user data\r\n     return res.status(200).json({\r\n       success: true,\r\n       message: \"Login successful!\",\r\n       token,\r\n       user: {\r\n         id: user._id,\r\n         fullNames: user.fullNames,\r\n         familyName: user.familyName,\r\n-        email: user.email\r\n+        email: user.email,\r\n+        lastLogin: user.lastLogin,\r\n+        status: user.status\r\n       },\r\n       timestamp: new Date().toISOString()\r\n     });\r\n \r\n   } catch (error) {\r\n-    console.error(\"Login error:\", error);\r\n+    console.error(\"Login error:\", {\r\n+      message: error.message,\r\n+      stack: error.stack,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n     return res.status(500).json({\r\n       success: false,\r\n       message: \"Login failed\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n+      error: process.env.NODE_ENV === 'development' ? {\r\n+        name: error.name,\r\n+        message: error.message\r\n+      } : undefined,\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n   }\r\n };\r\n \r\n@@ -187,9 +243,10 @@\n     if (!user) {\r\n       return res.status(404).json({\r\n         success: false,\r\n         message: \"User not found\",\r\n-        suggestion: \"Try logging in again\"\r\n+        suggestion: \"Try logging in again\",\r\n+        timestamp: new Date().toISOString()\r\n       });\r\n     }\r\n \r\n     return res.status(200).json({\r\n@@ -198,26 +255,36 @@\n       timestamp: new Date().toISOString()\r\n     });\r\n \r\n   } catch (error) {\r\n-    console.error(\"Get user error:\", error);\r\n+    console.error(\"Get user error:\", {\r\n+      message: error.message,\r\n+      stack: error.stack,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n     return res.status(500).json({\r\n       success: false,\r\n       message: \"Failed to fetch user data\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n+      error: process.env.NODE_ENV === 'development' ? {\r\n+        name: error.name,\r\n+        message: error.message\r\n+      } : undefined,\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n   }\r\n };\r\n \r\n exports.updateUser = async (req, res) => {\r\n   try {\r\n     const { fullNames, familyName, email } = req.body;\r\n \r\n-    // Validate input\r\n+    // Enhanced validation\r\n     if (!fullNames || !familyName) {\r\n       return res.status(400).json({\r\n         success: false,\r\n-        message: \"Full names and family name are required\"\r\n+        message: \"Full names and family name are required\",\r\n+        timestamp: new Date().toISOString()\r\n       });\r\n     }\r\n \r\n     // Check for email change\r\n@@ -229,34 +296,38 @@\n       if (emailExists) {\r\n         return res.status(400).json({\r\n           success: false,\r\n           message: \"Email already in use\",\r\n-          suggestion: \"Use a different email address\"\r\n+          suggestion: \"Use a different email address\",\r\n+          timestamp: new Date().toISOString()\r\n         });\r\n       }\r\n     }\r\n \r\n     // Prepare update data\r\n     const updateData = {\r\n       fullNames: fullNames.trim(),\r\n       familyName: familyName.trim(),\r\n-      ...(email && { email: email.toLowerCase().trim() })\r\n+      ...(email && { email: email.toLowerCase().trim() }),\r\n+      updatedAt: new Date()\r\n     };\r\n \r\n-    // Update user\r\n+    // Update user with options\r\n     const updatedUser = await User.findByIdAndUpdate(\r\n       req.user.id,\r\n       updateData,\r\n       { \r\n         new: true,\r\n-        runValidators: true \r\n+        runValidators: true,\r\n+        context: 'query'\r\n       }\r\n     ).select(\"-password -gfgNumber -__v\");\r\n \r\n     if (!updatedUser) {\r\n       return res.status(404).json({\r\n         success: false,\r\n-        message: \"User not found\"\r\n+        message: \"User not found\",\r\n+        timestamp: new Date().toISOString()\r\n       });\r\n     }\r\n \r\n     return res.status(200).json({\r\n@@ -266,13 +337,23 @@\n       timestamp: new Date().toISOString()\r\n     });\r\n \r\n   } catch (error) {\r\n-    console.error(\"Update error:\", error);\r\n+    console.error(\"Update error:\", {\r\n+      message: error.message,\r\n+      stack: error.stack,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n     return res.status(500).json({\r\n       success: false,\r\n       message: \"Failed to update profile\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n-      systemSuggestion: \"Please try again later\"\r\n+      error: process.env.NODE_ENV === 'development' ? {\r\n+        name: error.name,\r\n+        message: error.message,\r\n+        ...(error.errors && { validationErrors: error.errors })\r\n+      } : undefined,\r\n+      systemSuggestion: \"Please try again later\",\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753450023212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,359 +1,115 @@\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n-const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Check for JWT_SECRET at startup\r\n-if (!process.env.JWT_SECRET) {\r\n-  console.error(\"FATAL: JWT_SECRET is not defined in environment variables\");\r\n-  process.exit(1);\r\n-}\r\n-\r\n-// Enhanced token generation\r\n+// Helper function to generate token\r\n const generateToken = (userId) => {\r\n-  if (!process.env.JWT_SECRET) {\r\n-    throw new Error(\"JWT_SECRET is not configured\");\r\n-  }\r\n-  try {\r\n-    return jwt.sign(\r\n-      { id: userId }, \r\n-      process.env.JWT_SECRET, \r\n-      { \r\n-        expiresIn: \"30d\",\r\n-        algorithm: \"HS256\" \r\n-      }\r\n-    );\r\n-  } catch (error) {\r\n-    console.error(\"Token generation error:\", {\r\n-      error: error.message,\r\n-      stack: error.stack,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-    throw new Error(\"Failed to generate authentication token\");\r\n-  }\r\n+  return jwt.sign({ id: userId }, process.env.JWT_SECRET || \"your_jwt_secret\", {\r\n+    expiresIn: \"30d\",\r\n+  });\r\n };\r\n \r\n exports.registerUser = async (req, res) => {\r\n   const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n \r\n-  // Enhanced input validation\r\n-  const missingFields = [];\r\n-  if (!fullNames) missingFields.push(\"fullNames\");\r\n-  if (!familyName) missingFields.push(\"familyName\");\r\n-  if (!email) missingFields.push(\"email\");\r\n-  if (!password) missingFields.push(\"password\");\r\n-  if (!gfgNumber) missingFields.push(\"gfgNumber\");\r\n-\r\n-  if (missingFields.length > 0) {\r\n-    return res.status(400).json({ \r\n-      success: false,\r\n-      message: \"All fields are required.\",\r\n-      missingFields,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n+  if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n+    return res.status(400).json({ message: \"All fields are required.\" });\r\n   }\r\n \r\n-  // Validate email format\r\n-  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Please provide a valid email address\",\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n+  if (gfgNumber.length !== 14) {\r\n+    return res.status(400).json({ message: \"GFG number must be 14 digits.\" });\r\n   }\r\n \r\n-  // Validate password strength\r\n-  if (password.length < 8) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Password must be at least 8 characters long\",\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-  }\r\n-\r\n-  // Validate GFG number\r\n-  if (gfgNumber.length !== 14 || !/^\\d+$/.test(gfgNumber)) {\r\n-    return res.status(400).json({ \r\n-      success: false,\r\n-      message: \"GFG number must be exactly 14 digits\",\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-  }\r\n-\r\n   try {\r\n-    // Check for existing user (case-insensitive)\r\n-    const existingUser = await User.findOne({ \r\n-      email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n-    }).lean();\r\n-\r\n+    const existingUser = await User.findOne({ email });\r\n     if (existingUser) {\r\n-      return res.status(409).json({ \r\n-        success: false,\r\n-        message: \"Email already registered\",\r\n-        suggestion: \"Try logging in or use a different email\",\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n+      return res.status(409).json({ message: \"Email already registered.\" });\r\n     }\r\n \r\n-    // Create new user\r\n-    const newUser = new User({ \r\n-      fullNames: fullNames.trim(),\r\n-      familyName: familyName.trim(),\r\n-      email: email.toLowerCase().trim(),\r\n-      password,\r\n-      gfgNumber\r\n-    });\r\n-\r\n-    // Save user with improved error handling\r\n+    const newUser = new User({ fullNames, familyName, email, password, gfgNumber });\r\n     await newUser.save();\r\n \r\n     // Generate token\r\n     const token = generateToken(newUser._id);\r\n \r\n-    // Successful response with more user data\r\n-    return res.status(201).json({\r\n-      success: true,\r\n+    res.status(201).json({ \r\n       message: \"User registered successfully!\",\r\n       token,\r\n       user: {\r\n         id: newUser._id,\r\n         fullNames: newUser.fullNames,\r\n         familyName: newUser.familyName,\r\n-        email: newUser.email,\r\n-        createdAt: newUser.createdAt,\r\n-        status: newUser.status\r\n-      },\r\n-      timestamp: new Date().toISOString()\r\n+        email: newUser.email\r\n+      }\r\n     });\r\n-\r\n   } catch (error) {\r\n-    console.error(\"Registration error:\", {\r\n-      message: error.message,\r\n-      stack: error.stack,\r\n-      fullError: JSON.stringify(error, Object.getOwnPropertyNames(error)),\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-    // Enhanced error response\r\n-    const errorResponse = {\r\n-      success: false,\r\n-      message: \"Registration failed\",\r\n-      systemSuggestion: \"Please try again later or contact support\",\r\n-      timestamp: new Date().toISOString()\r\n-    };\r\n-\r\n-    if (process.env.NODE_ENV === 'development') {\r\n-      errorResponse.error = {\r\n-        name: error.name,\r\n-        message: error.message,\r\n-        ...(error.code && { code: error.code }),\r\n-        ...(error.errors && { mongoErrors: error.errors })\r\n-      };\r\n-    }\r\n-\r\n-    return res.status(500).json(errorResponse);\r\n+    console.error(\"Register error:\", error);\r\n+    res.status(500).json({ message: \"Server error.\" });\r\n   }\r\n };\r\n \r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n-  // Enhanced validation\r\n-  if (!email || !password) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Both email and password are required\",\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-  }\r\n-\r\n   try {\r\n-    // Find user with case-insensitive email\r\n-    const user = await User.findOne({ \r\n-      email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n-    });\r\n+    const user = await User.findOne({ email });\r\n+    if (!user) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n \r\n-    if (!user) {\r\n-      return res.status(401).json({\r\n-        success: false,\r\n-        message: \"Invalid credentials\",\r\n-        suggestion: \"Check your email and password\",\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-    }\r\n-\r\n-    // Compare passwords\r\n     const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({\r\n-        success: false,\r\n-        message: \"Invalid credentials\",\r\n-        suggestion: \"Check your email and password\",\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-    }\r\n+    if (!isMatch) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n \r\n-    // Update last login\r\n-    user.lastLogin = new Date();\r\n-    await user.save();\r\n-\r\n     // Generate token\r\n     const token = generateToken(user._id);\r\n \r\n-    // Successful login with more user data\r\n-    return res.status(200).json({\r\n-      success: true,\r\n+    res.status(200).json({ \r\n       message: \"Login successful!\",\r\n       token,\r\n       user: {\r\n         id: user._id,\r\n         fullNames: user.fullNames,\r\n         familyName: user.familyName,\r\n-        email: user.email,\r\n-        lastLogin: user.lastLogin,\r\n-        status: user.status\r\n-      },\r\n-      timestamp: new Date().toISOString()\r\n+        email: user.email\r\n+      }\r\n     });\r\n-\r\n   } catch (error) {\r\n-    console.error(\"Login error:\", {\r\n-      message: error.message,\r\n-      stack: error.stack,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Login failed\",\r\n-      error: process.env.NODE_ENV === 'development' ? {\r\n-        name: error.name,\r\n-        message: error.message\r\n-      } : undefined,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n+    console.error(\"Login error:\", error);\r\n+    res.status(500).json({ message: \"Server error.\" });\r\n   }\r\n };\r\n \r\n exports.getUserData = async (req, res) => {\r\n   try {\r\n-    const user = await User.findById(req.user.id)\r\n-      .select(\"-password -gfgNumber -__v\")\r\n-      .lean();\r\n-\r\n+    const user = await User.findById(req.user.id).select(\"-password -gfgNumber\");\r\n     if (!user) {\r\n-      return res.status(404).json({\r\n-        success: false,\r\n-        message: \"User not found\",\r\n-        suggestion: \"Try logging in again\",\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n-\r\n-    return res.status(200).json({\r\n-      success: true,\r\n-      user,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Get user error:\", {\r\n-      message: error.message,\r\n-      stack: error.stack,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Failed to fetch user data\",\r\n-      error: process.env.NODE_ENV === 'development' ? {\r\n-        name: error.name,\r\n-        message: error.message\r\n-      } : undefined,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n+    res.json(user);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: \"Server error\" });\r\n   }\r\n };\r\n \r\n exports.updateUser = async (req, res) => {\r\n   try {\r\n     const { fullNames, familyName, email } = req.body;\r\n-\r\n-    // Enhanced validation\r\n-    if (!fullNames || !familyName) {\r\n-      return res.status(400).json({\r\n-        success: false,\r\n-        message: \"Full names and family name are required\",\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-    }\r\n-\r\n-    // Check for email change\r\n+    \r\n+    // Check if email is being updated to one that already exists\r\n     if (email && email !== req.user.email) {\r\n-      const emailExists = await User.findOne({ \r\n-        email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n-      });\r\n-      \r\n-      if (emailExists) {\r\n-        return res.status(400).json({\r\n-          success: false,\r\n-          message: \"Email already in use\",\r\n-          suggestion: \"Use a different email address\",\r\n-          timestamp: new Date().toISOString()\r\n-        });\r\n+      const existingUser = await User.findOne({ email });\r\n+      if (existingUser) {\r\n+        return res.status(400).json({ message: \"Email already in use\" });\r\n       }\r\n     }\r\n \r\n-    // Prepare update data\r\n-    const updateData = {\r\n-      fullNames: fullNames.trim(),\r\n-      familyName: familyName.trim(),\r\n-      ...(email && { email: email.toLowerCase().trim() }),\r\n-      updatedAt: new Date()\r\n-    };\r\n-\r\n-    // Update user with options\r\n     const updatedUser = await User.findByIdAndUpdate(\r\n       req.user.id,\r\n-      updateData,\r\n-      { \r\n-        new: true,\r\n-        runValidators: true,\r\n-        context: 'query'\r\n-      }\r\n-    ).select(\"-password -gfgNumber -__v\");\r\n+      { fullNames, familyName, email },\r\n+      { new: true }\r\n+    ).select(\"-password -gfgNumber\");\r\n \r\n-    if (!updatedUser) {\r\n-      return res.status(404).json({\r\n-        success: false,\r\n-        message: \"User not found\",\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-    }\r\n-\r\n-    return res.status(200).json({\r\n-      success: true,\r\n-      message: \"Profile updated successfully\",\r\n-      user: updatedUser,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Update error:\", {\r\n-      message: error.message,\r\n-      stack: error.stack,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Failed to update profile\",\r\n-      error: process.env.NODE_ENV === 'development' ? {\r\n-        name: error.name,\r\n-        message: error.message,\r\n-        ...(error.errors && { validationErrors: error.errors })\r\n-      } : undefined,\r\n-      systemSuggestion: \"Please try again later\",\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n+    res.json(updatedUser);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: \"Server error\" });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753453136268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,115 +1,278 @@\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n+const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Helper function to generate token\r\n+// Improved token generation with better error handling\r\n const generateToken = (userId) => {\r\n-  return jwt.sign({ id: userId }, process.env.JWT_SECRET || \"your_jwt_secret\", {\r\n-    expiresIn: \"30d\",\r\n-  });\r\n+  try {\r\n+    return jwt.sign(\r\n+      { id: userId }, \r\n+      process.env.JWT_SECRET || \"your_jwt_secret\", \r\n+      { \r\n+        expiresIn: \"30d\",\r\n+        algorithm: \"HS256\" \r\n+      }\r\n+    );\r\n+  } catch (error) {\r\n+    console.error(\"Token generation error:\", error);\r\n+    throw new Error(\"Failed to generate authentication token\");\r\n+  }\r\n };\r\n \r\n exports.registerUser = async (req, res) => {\r\n   const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n \r\n+  // Validate input\r\n   if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n-    return res.status(400).json({ message: \"All fields are required.\" });\r\n+    return res.status(400).json({ \r\n+      success: false,\r\n+      message: \"All fields are required.\",\r\n+      requiredFields: [\"fullNames\", \"familyName\", \"email\", \"password\", \"gfgNumber\"]\r\n+    });\r\n   }\r\n \r\n-  if (gfgNumber.length !== 14) {\r\n-    return res.status(400).json({ message: \"GFG number must be 14 digits.\" });\r\n+  // Validate email format\r\n+  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Please provide a valid email address\"\r\n+    });\r\n   }\r\n \r\n+  // Validate password strength\r\n+  if (password.length < 8) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Password must be at least 8 characters long\"\r\n+    });\r\n+  }\r\n+\r\n+  // Validate GFG number\r\n+  if (gfgNumber.length !== 14 || !/^\\d+$/.test(gfgNumber)) {\r\n+    return res.status(400).json({ \r\n+      success: false,\r\n+      message: \"GFG number must be exactly 14 digits\"\r\n+    });\r\n+  }\r\n+\r\n   try {\r\n-    const existingUser = await User.findOne({ email });\r\n+    // Check for existing user\r\n+    const existingUser = await User.findOne({ email }).lean();\r\n     if (existingUser) {\r\n-      return res.status(409).json({ message: \"Email already registered.\" });\r\n+      return res.status(409).json({ \r\n+        success: false,\r\n+        message: \"Email already registered\",\r\n+        suggestion: \"Try logging in or use a different email\"\r\n+      });\r\n     }\r\n \r\n-    const newUser = new User({ fullNames, familyName, email, password, gfgNumber });\r\n-    await newUser.save();\r\n+    // Create new user\r\n+    const newUser = new User({ \r\n+      fullNames: fullNames.trim(),\r\n+      familyName: familyName.trim(),\r\n+      email: email.toLowerCase().trim(),\r\n+      password,\r\n+      gfgNumber\r\n+    });\r\n \r\n+    // Save user with error handling\r\n+    await newUser.save()\r\n+      .then(() => console.log(\"User saved successfully\"))\r\n+      .catch(saveError => {\r\n+        console.error(\"User save error:\", saveError);\r\n+        throw new Error(\"Failed to save user to database\");\r\n+      });\r\n+\r\n     // Generate token\r\n     const token = generateToken(newUser._id);\r\n \r\n-    res.status(201).json({ \r\n+    // Successful response\r\n+    return res.status(201).json({\r\n+      success: true,\r\n       message: \"User registered successfully!\",\r\n       token,\r\n       user: {\r\n         id: newUser._id,\r\n         fullNames: newUser.fullNames,\r\n         familyName: newUser.familyName,\r\n         email: newUser.email\r\n-      }\r\n+      },\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n+\r\n   } catch (error) {\r\n-    console.error(\"Register error:\", error);\r\n-    res.status(500).json({ message: \"Server error.\" });\r\n+    console.error(\"Registration error:\", {\r\n+      message: error.message,\r\n+      stack: error.stack,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Registration failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n+      systemSuggestion: \"Please try again later or contact support\"\r\n+    });\r\n   }\r\n };\r\n \r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n+  // Basic validation\r\n+  if (!email || !password) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Both email and password are required\"\r\n+    });\r\n+  }\r\n+\r\n   try {\r\n-    const user = await User.findOne({ email });\r\n-    if (!user) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n+    // Find user with case-insensitive email\r\n+    const user = await User.findOne({ \r\n+      email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n+    });\r\n \r\n+    if (!user) {\r\n+      return res.status(401).json({\r\n+        success: false,\r\n+        message: \"Invalid credentials\",\r\n+        suggestion: \"Check your email and password\"\r\n+      });\r\n+    }\r\n+\r\n+    // Compare passwords\r\n     const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({\r\n+        success: false,\r\n+        message: \"Invalid credentials\",\r\n+        suggestion: \"Check your email and password\"\r\n+      });\r\n+    }\r\n \r\n     // Generate token\r\n     const token = generateToken(user._id);\r\n \r\n-    res.status(200).json({ \r\n+    // Successful login\r\n+    return res.status(200).json({\r\n+      success: true,\r\n       message: \"Login successful!\",\r\n       token,\r\n       user: {\r\n         id: user._id,\r\n         fullNames: user.fullNames,\r\n         familyName: user.familyName,\r\n         email: user.email\r\n-      }\r\n+      },\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n+\r\n   } catch (error) {\r\n     console.error(\"Login error:\", error);\r\n-    res.status(500).json({ message: \"Server error.\" });\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Login failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n exports.getUserData = async (req, res) => {\r\n   try {\r\n-    const user = await User.findById(req.user.id).select(\"-password -gfgNumber\");\r\n+    const user = await User.findById(req.user.id)\r\n+      .select(\"-password -gfgNumber -__v\")\r\n+      .lean();\r\n+\r\n     if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: \"User not found\",\r\n+        suggestion: \"Try logging in again\"\r\n+      });\r\n     }\r\n-    res.json(user);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: \"Server error\" });\r\n+\r\n+    return res.status(200).json({\r\n+      success: true,\r\n+      user,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Get user error:\", error);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Failed to fetch user data\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n exports.updateUser = async (req, res) => {\r\n   try {\r\n     const { fullNames, familyName, email } = req.body;\r\n-    \r\n-    // Check if email is being updated to one that already exists\r\n+\r\n+    // Validate input\r\n+    if (!fullNames || !familyName) {\r\n+      return res.status(400).json({\r\n+        success: false,\r\n+        message: \"Full names and family name are required\"\r\n+      });\r\n+    }\r\n+\r\n+    // Check for email change\r\n     if (email && email !== req.user.email) {\r\n-      const existingUser = await User.findOne({ email });\r\n-      if (existingUser) {\r\n-        return res.status(400).json({ message: \"Email already in use\" });\r\n+      const emailExists = await User.findOne({ \r\n+        email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n+      });\r\n+      \r\n+      if (emailExists) {\r\n+        return res.status(400).json({\r\n+          success: false,\r\n+          message: \"Email already in use\",\r\n+          suggestion: \"Use a different email address\"\r\n+        });\r\n       }\r\n     }\r\n \r\n+    // Prepare update data\r\n+    const updateData = {\r\n+      fullNames: fullNames.trim(),\r\n+      familyName: familyName.trim(),\r\n+      ...(email && { email: email.toLowerCase().trim() })\r\n+    };\r\n+\r\n+    // Update user\r\n     const updatedUser = await User.findByIdAndUpdate(\r\n       req.user.id,\r\n-      { fullNames, familyName, email },\r\n-      { new: true }\r\n-    ).select(\"-password -gfgNumber\");\r\n+      updateData,\r\n+      { \r\n+        new: true,\r\n+        runValidators: true \r\n+      }\r\n+    ).select(\"-password -gfgNumber -__v\");\r\n \r\n-    res.json(updatedUser);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: \"Server error\" });\r\n+    if (!updatedUser) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: \"User not found\"\r\n+      });\r\n+    }\r\n+\r\n+    return res.status(200).json({\r\n+      success: true,\r\n+      message: \"Profile updated successfully\",\r\n+      user: updatedUser,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Update error:\", error);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Failed to update profile\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n+      systemSuggestion: \"Please try again later\"\r\n+    });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753453251144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,278 +1,118 @@\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n-const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Improved token generation with better error handling\r\n+// Helper function to generate token\r\n const generateToken = (userId) => {\r\n-  try {\r\n-    return jwt.sign(\r\n-      { id: userId }, \r\n-      process.env.JWT_SECRET || \"your_jwt_secret\", \r\n-      { \r\n-        expiresIn: \"30d\",\r\n-        algorithm: \"HS256\" \r\n-      }\r\n-    );\r\n-  } catch (error) {\r\n-    console.error(\"Token generation error:\", error);\r\n-    throw new Error(\"Failed to generate authentication token\");\r\n-  }\r\n+  return jwt.sign({ id: userId }, process.env.JWT_SECRET || \"your_jwt_secret\", {\r\n+    expiresIn: \"30d\",\r\n+  });\r\n };\r\n \r\n+const bcrypt = require(\"bcryptjs\");\r\n+\r\n+\r\n exports.registerUser = async (req, res) => {\r\n   const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n \r\n-  // Validate input\r\n   if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n-    return res.status(400).json({ \r\n-      success: false,\r\n-      message: \"All fields are required.\",\r\n-      requiredFields: [\"fullNames\", \"familyName\", \"email\", \"password\", \"gfgNumber\"]\r\n-    });\r\n+    return res.status(400).json({ message: \"All fields are required.\" });\r\n   }\r\n \r\n-  // Validate email format\r\n-  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Please provide a valid email address\"\r\n-    });\r\n+  if (gfgNumber.length !== 14) {\r\n+    return res.status(400).json({ message: \"GFG number must be 14 digits.\" });\r\n   }\r\n \r\n-  // Validate password strength\r\n-  if (password.length < 8) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Password must be at least 8 characters long\"\r\n-    });\r\n-  }\r\n-\r\n-  // Validate GFG number\r\n-  if (gfgNumber.length !== 14 || !/^\\d+$/.test(gfgNumber)) {\r\n-    return res.status(400).json({ \r\n-      success: false,\r\n-      message: \"GFG number must be exactly 14 digits\"\r\n-    });\r\n-  }\r\n-\r\n   try {\r\n-    // Check for existing user\r\n-    const existingUser = await User.findOne({ email }).lean();\r\n+    const existingUser = await User.findOne({ email });\r\n     if (existingUser) {\r\n-      return res.status(409).json({ \r\n-        success: false,\r\n-        message: \"Email already registered\",\r\n-        suggestion: \"Try logging in or use a different email\"\r\n-      });\r\n+      return res.status(409).json({ message: \"Email already registered.\" });\r\n     }\r\n \r\n-    // Create new user\r\n-    const newUser = new User({ \r\n-      fullNames: fullNames.trim(),\r\n-      familyName: familyName.trim(),\r\n-      email: email.toLowerCase().trim(),\r\n-      password,\r\n-      gfgNumber\r\n-    });\r\n+    const newUser = new User({ fullNames, familyName, email, password, gfgNumber });\r\n+    await newUser.save();\r\n \r\n-    // Save user with error handling\r\n-    await newUser.save()\r\n-      .then(() => console.log(\"User saved successfully\"))\r\n-      .catch(saveError => {\r\n-        console.error(\"User save error:\", saveError);\r\n-        throw new Error(\"Failed to save user to database\");\r\n-      });\r\n-\r\n     // Generate token\r\n     const token = generateToken(newUser._id);\r\n \r\n-    // Successful response\r\n-    return res.status(201).json({\r\n-      success: true,\r\n+    res.status(201).json({ \r\n       message: \"User registered successfully!\",\r\n       token,\r\n       user: {\r\n         id: newUser._id,\r\n         fullNames: newUser.fullNames,\r\n         familyName: newUser.familyName,\r\n         email: newUser.email\r\n-      },\r\n-      timestamp: new Date().toISOString()\r\n+      }\r\n     });\r\n-\r\n   } catch (error) {\r\n-    console.error(\"Registration error:\", {\r\n-      message: error.message,\r\n-      stack: error.stack,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Registration failed\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n-      systemSuggestion: \"Please try again later or contact support\"\r\n-    });\r\n+    console.error(\"Register error:\", error);\r\n+    res.status(500).json({ message: \"Server error.\" });\r\n   }\r\n };\r\n \r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n-  // Basic validation\r\n-  if (!email || !password) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Both email and password are required\"\r\n-    });\r\n-  }\r\n-\r\n   try {\r\n-    // Find user with case-insensitive email\r\n-    const user = await User.findOne({ \r\n-      email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n-    });\r\n+    const user = await User.findOne({ email });\r\n+    if (!user) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n \r\n-    if (!user) {\r\n-      return res.status(401).json({\r\n-        success: false,\r\n-        message: \"Invalid credentials\",\r\n-        suggestion: \"Check your email and password\"\r\n-      });\r\n-    }\r\n-\r\n-    // Compare passwords\r\n     const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({\r\n-        success: false,\r\n-        message: \"Invalid credentials\",\r\n-        suggestion: \"Check your email and password\"\r\n-      });\r\n-    }\r\n+    if (!isMatch) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n \r\n     // Generate token\r\n     const token = generateToken(user._id);\r\n \r\n-    // Successful login\r\n-    return res.status(200).json({\r\n-      success: true,\r\n+    res.status(200).json({ \r\n       message: \"Login successful!\",\r\n       token,\r\n       user: {\r\n         id: user._id,\r\n         fullNames: user.fullNames,\r\n         familyName: user.familyName,\r\n         email: user.email\r\n-      },\r\n-      timestamp: new Date().toISOString()\r\n+      }\r\n     });\r\n-\r\n   } catch (error) {\r\n     console.error(\"Login error:\", error);\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Login failed\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n-    });\r\n+    res.status(500).json({ message: \"Server error.\" });\r\n   }\r\n };\r\n \r\n exports.getUserData = async (req, res) => {\r\n   try {\r\n-    const user = await User.findById(req.user.id)\r\n-      .select(\"-password -gfgNumber -__v\")\r\n-      .lean();\r\n-\r\n+    const user = await User.findById(req.user.id).select(\"-password -gfgNumber\");\r\n     if (!user) {\r\n-      return res.status(404).json({\r\n-        success: false,\r\n-        message: \"User not found\",\r\n-        suggestion: \"Try logging in again\"\r\n-      });\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n-\r\n-    return res.status(200).json({\r\n-      success: true,\r\n-      user,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Get user error:\", error);\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Failed to fetch user data\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n-    });\r\n+    res.json(user);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: \"Server error\" });\r\n   }\r\n };\r\n \r\n exports.updateUser = async (req, res) => {\r\n   try {\r\n     const { fullNames, familyName, email } = req.body;\r\n-\r\n-    // Validate input\r\n-    if (!fullNames || !familyName) {\r\n-      return res.status(400).json({\r\n-        success: false,\r\n-        message: \"Full names and family name are required\"\r\n-      });\r\n-    }\r\n-\r\n-    // Check for email change\r\n+    \r\n+    // Check if email is being updated to one that already exists\r\n     if (email && email !== req.user.email) {\r\n-      const emailExists = await User.findOne({ \r\n-        email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n-      });\r\n-      \r\n-      if (emailExists) {\r\n-        return res.status(400).json({\r\n-          success: false,\r\n-          message: \"Email already in use\",\r\n-          suggestion: \"Use a different email address\"\r\n-        });\r\n+      const existingUser = await User.findOne({ email });\r\n+      if (existingUser) {\r\n+        return res.status(400).json({ message: \"Email already in use\" });\r\n       }\r\n     }\r\n \r\n-    // Prepare update data\r\n-    const updateData = {\r\n-      fullNames: fullNames.trim(),\r\n-      familyName: familyName.trim(),\r\n-      ...(email && { email: email.toLowerCase().trim() })\r\n-    };\r\n-\r\n-    // Update user\r\n     const updatedUser = await User.findByIdAndUpdate(\r\n       req.user.id,\r\n-      updateData,\r\n-      { \r\n-        new: true,\r\n-        runValidators: true \r\n-      }\r\n-    ).select(\"-password -gfgNumber -__v\");\r\n+      { fullNames, familyName, email },\r\n+      { new: true }\r\n+    ).select(\"-password -gfgNumber\");\r\n \r\n-    if (!updatedUser) {\r\n-      return res.status(404).json({\r\n-        success: false,\r\n-        message: \"User not found\"\r\n-      });\r\n-    }\r\n-\r\n-    return res.status(200).json({\r\n-      success: true,\r\n-      message: \"Profile updated successfully\",\r\n-      user: updatedUser,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Update error:\", error);\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Failed to update profile\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n-      systemSuggestion: \"Please try again later\"\r\n-    });\r\n+    res.json(updatedUser);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: \"Server error\" });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753453256285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,118 +1,278 @@\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n+const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Helper function to generate token\r\n+// Improved token generation with better error handling\r\n const generateToken = (userId) => {\r\n-  return jwt.sign({ id: userId }, process.env.JWT_SECRET || \"your_jwt_secret\", {\r\n-    expiresIn: \"30d\",\r\n-  });\r\n+  try {\r\n+    return jwt.sign(\r\n+      { id: userId }, \r\n+      process.env.JWT_SECRET || \"your_jwt_secret\", \r\n+      { \r\n+        expiresIn: \"30d\",\r\n+        algorithm: \"HS256\" \r\n+      }\r\n+    );\r\n+  } catch (error) {\r\n+    console.error(\"Token generation error:\", error);\r\n+    throw new Error(\"Failed to generate authentication token\");\r\n+  }\r\n };\r\n \r\n-const bcrypt = require(\"bcryptjs\");\r\n-\r\n-\r\n exports.registerUser = async (req, res) => {\r\n   const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n \r\n+  // Validate input\r\n   if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n-    return res.status(400).json({ message: \"All fields are required.\" });\r\n+    return res.status(400).json({ \r\n+      success: false,\r\n+      message: \"All fields are required.\",\r\n+      requiredFields: [\"fullNames\", \"familyName\", \"email\", \"password\", \"gfgNumber\"]\r\n+    });\r\n   }\r\n \r\n-  if (gfgNumber.length !== 14) {\r\n-    return res.status(400).json({ message: \"GFG number must be 14 digits.\" });\r\n+  // Validate email format\r\n+  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Please provide a valid email address\"\r\n+    });\r\n   }\r\n \r\n+  // Validate password strength\r\n+  if (password.length < 8) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Password must be at least 8 characters long\"\r\n+    });\r\n+  }\r\n+\r\n+  // Validate GFG number\r\n+  if (gfgNumber.length !== 14 || !/^\\d+$/.test(gfgNumber)) {\r\n+    return res.status(400).json({ \r\n+      success: false,\r\n+      message: \"GFG number must be exactly 14 digits\"\r\n+    });\r\n+  }\r\n+\r\n   try {\r\n-    const existingUser = await User.findOne({ email });\r\n+    // Check for existing user\r\n+    const existingUser = await User.findOne({ email }).lean();\r\n     if (existingUser) {\r\n-      return res.status(409).json({ message: \"Email already registered.\" });\r\n+      return res.status(409).json({ \r\n+        success: false,\r\n+        message: \"Email already registered\",\r\n+        suggestion: \"Try logging in or use a different email\"\r\n+      });\r\n     }\r\n \r\n-    const newUser = new User({ fullNames, familyName, email, password, gfgNumber });\r\n-    await newUser.save();\r\n+    // Create new user\r\n+    const newUser = new User({ \r\n+      fullNames: fullNames.trim(),\r\n+      familyName: familyName.trim(),\r\n+      email: email.toLowerCase().trim(),\r\n+      password,\r\n+      gfgNumber\r\n+    });\r\n \r\n+    // Save user with error handling\r\n+    await newUser.save()\r\n+      .then(() => console.log(\"User saved successfully\"))\r\n+      .catch(saveError => {\r\n+        console.error(\"User save error:\", saveError);\r\n+        throw new Error(\"Failed to save user to database\");\r\n+      });\r\n+\r\n     // Generate token\r\n     const token = generateToken(newUser._id);\r\n \r\n-    res.status(201).json({ \r\n+    // Successful response\r\n+    return res.status(201).json({\r\n+      success: true,\r\n       message: \"User registered successfully!\",\r\n       token,\r\n       user: {\r\n         id: newUser._id,\r\n         fullNames: newUser.fullNames,\r\n         familyName: newUser.familyName,\r\n         email: newUser.email\r\n-      }\r\n+      },\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n+\r\n   } catch (error) {\r\n-    console.error(\"Register error:\", error);\r\n-    res.status(500).json({ message: \"Server error.\" });\r\n+    console.error(\"Registration error:\", {\r\n+      message: error.message,\r\n+      stack: error.stack,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Registration failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n+      systemSuggestion: \"Please try again later or contact support\"\r\n+    });\r\n   }\r\n };\r\n \r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n+  // Basic validation\r\n+  if (!email || !password) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Both email and password are required\"\r\n+    });\r\n+  }\r\n+\r\n   try {\r\n-    const user = await User.findOne({ email });\r\n-    if (!user) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n+    // Find user with case-insensitive email\r\n+    const user = await User.findOne({ \r\n+      email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n+    });\r\n \r\n+    if (!user) {\r\n+      return res.status(401).json({\r\n+        success: false,\r\n+        message: \"Invalid credentials\",\r\n+        suggestion: \"Check your email and password\"\r\n+      });\r\n+    }\r\n+\r\n+    // Compare passwords\r\n     const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({\r\n+        success: false,\r\n+        message: \"Invalid credentials\",\r\n+        suggestion: \"Check your email and password\"\r\n+      });\r\n+    }\r\n \r\n     // Generate token\r\n     const token = generateToken(user._id);\r\n \r\n-    res.status(200).json({ \r\n+    // Successful login\r\n+    return res.status(200).json({\r\n+      success: true,\r\n       message: \"Login successful!\",\r\n       token,\r\n       user: {\r\n         id: user._id,\r\n         fullNames: user.fullNames,\r\n         familyName: user.familyName,\r\n         email: user.email\r\n-      }\r\n+      },\r\n+      timestamp: new Date().toISOString()\r\n     });\r\n+\r\n   } catch (error) {\r\n     console.error(\"Login error:\", error);\r\n-    res.status(500).json({ message: \"Server error.\" });\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Login failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n exports.getUserData = async (req, res) => {\r\n   try {\r\n-    const user = await User.findById(req.user.id).select(\"-password -gfgNumber\");\r\n+    const user = await User.findById(req.user.id)\r\n+      .select(\"-password -gfgNumber -__v\")\r\n+      .lean();\r\n+\r\n     if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: \"User not found\",\r\n+        suggestion: \"Try logging in again\"\r\n+      });\r\n     }\r\n-    res.json(user);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: \"Server error\" });\r\n+\r\n+    return res.status(200).json({\r\n+      success: true,\r\n+      user,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Get user error:\", error);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Failed to fetch user data\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n exports.updateUser = async (req, res) => {\r\n   try {\r\n     const { fullNames, familyName, email } = req.body;\r\n-    \r\n-    // Check if email is being updated to one that already exists\r\n+\r\n+    // Validate input\r\n+    if (!fullNames || !familyName) {\r\n+      return res.status(400).json({\r\n+        success: false,\r\n+        message: \"Full names and family name are required\"\r\n+      });\r\n+    }\r\n+\r\n+    // Check for email change\r\n     if (email && email !== req.user.email) {\r\n-      const existingUser = await User.findOne({ email });\r\n-      if (existingUser) {\r\n-        return res.status(400).json({ message: \"Email already in use\" });\r\n+      const emailExists = await User.findOne({ \r\n+        email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n+      });\r\n+      \r\n+      if (emailExists) {\r\n+        return res.status(400).json({\r\n+          success: false,\r\n+          message: \"Email already in use\",\r\n+          suggestion: \"Use a different email address\"\r\n+        });\r\n       }\r\n     }\r\n \r\n+    // Prepare update data\r\n+    const updateData = {\r\n+      fullNames: fullNames.trim(),\r\n+      familyName: familyName.trim(),\r\n+      ...(email && { email: email.toLowerCase().trim() })\r\n+    };\r\n+\r\n+    // Update user\r\n     const updatedUser = await User.findByIdAndUpdate(\r\n       req.user.id,\r\n-      { fullNames, familyName, email },\r\n-      { new: true }\r\n-    ).select(\"-password -gfgNumber\");\r\n+      updateData,\r\n+      { \r\n+        new: true,\r\n+        runValidators: true \r\n+      }\r\n+    ).select(\"-password -gfgNumber -__v\");\r\n \r\n-    res.json(updatedUser);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: \"Server error\" });\r\n+    if (!updatedUser) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: \"User not found\"\r\n+      });\r\n+    }\r\n+\r\n+    return res.status(200).json({\r\n+      success: true,\r\n+      message: \"Profile updated successfully\",\r\n+      user: updatedUser,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Update error:\", error);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      message: \"Failed to update profile\",\r\n+      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n+      systemSuggestion: \"Please try again later\"\r\n+    });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753453993877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,278 +1,115 @@\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n-const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Improved token generation with better error handling\r\n+// Helper function to generate token\r\n const generateToken = (userId) => {\r\n-  try {\r\n-    return jwt.sign(\r\n-      { id: userId }, \r\n-      process.env.JWT_SECRET || \"your_jwt_secret\", \r\n-      { \r\n-        expiresIn: \"30d\",\r\n-        algorithm: \"HS256\" \r\n-      }\r\n-    );\r\n-  } catch (error) {\r\n-    console.error(\"Token generation error:\", error);\r\n-    throw new Error(\"Failed to generate authentication token\");\r\n-  }\r\n+  return jwt.sign({ id: userId }, process.env.JWT_SECRET || \"your_jwt_secret\", {\r\n+    expiresIn: \"30d\",\r\n+  });\r\n };\r\n \r\n exports.registerUser = async (req, res) => {\r\n   const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n \r\n-  // Validate input\r\n   if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n-    return res.status(400).json({ \r\n-      success: false,\r\n-      message: \"All fields are required.\",\r\n-      requiredFields: [\"fullNames\", \"familyName\", \"email\", \"password\", \"gfgNumber\"]\r\n-    });\r\n+    return res.status(400).json({ message: \"All fields are required.\" });\r\n   }\r\n \r\n-  // Validate email format\r\n-  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Please provide a valid email address\"\r\n-    });\r\n+  if (gfgNumber.length !== 14) {\r\n+    return res.status(400).json({ message: \"GFG number must be 14 digits.\" });\r\n   }\r\n \r\n-  // Validate password strength\r\n-  if (password.length < 8) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Password must be at least 8 characters long\"\r\n-    });\r\n-  }\r\n-\r\n-  // Validate GFG number\r\n-  if (gfgNumber.length !== 14 || !/^\\d+$/.test(gfgNumber)) {\r\n-    return res.status(400).json({ \r\n-      success: false,\r\n-      message: \"GFG number must be exactly 14 digits\"\r\n-    });\r\n-  }\r\n-\r\n   try {\r\n-    // Check for existing user\r\n-    const existingUser = await User.findOne({ email }).lean();\r\n+    const existingUser = await User.findOne({ email });\r\n     if (existingUser) {\r\n-      return res.status(409).json({ \r\n-        success: false,\r\n-        message: \"Email already registered\",\r\n-        suggestion: \"Try logging in or use a different email\"\r\n-      });\r\n+      return res.status(409).json({ message: \"Email already registered.\" });\r\n     }\r\n \r\n-    // Create new user\r\n-    const newUser = new User({ \r\n-      fullNames: fullNames.trim(),\r\n-      familyName: familyName.trim(),\r\n-      email: email.toLowerCase().trim(),\r\n-      password,\r\n-      gfgNumber\r\n-    });\r\n+    const newUser = new User({ fullNames, familyName, email, password, gfgNumber });\r\n+    await newUser.save();\r\n \r\n-    // Save user with error handling\r\n-    await newUser.save()\r\n-      .then(() => console.log(\"User saved successfully\"))\r\n-      .catch(saveError => {\r\n-        console.error(\"User save error:\", saveError);\r\n-        throw new Error(\"Failed to save user to database\");\r\n-      });\r\n-\r\n     // Generate token\r\n     const token = generateToken(newUser._id);\r\n \r\n-    // Successful response\r\n-    return res.status(201).json({\r\n-      success: true,\r\n+    res.status(201).json({ \r\n       message: \"User registered successfully!\",\r\n       token,\r\n       user: {\r\n         id: newUser._id,\r\n         fullNames: newUser.fullNames,\r\n         familyName: newUser.familyName,\r\n         email: newUser.email\r\n-      },\r\n-      timestamp: new Date().toISOString()\r\n+      }\r\n     });\r\n-\r\n   } catch (error) {\r\n-    console.error(\"Registration error:\", {\r\n-      message: error.message,\r\n-      stack: error.stack,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Registration failed\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n-      systemSuggestion: \"Please try again later or contact support\"\r\n-    });\r\n+    console.error(\"Register error:\", error);\r\n+    res.status(500).json({ message: \"Server error.\" });\r\n   }\r\n };\r\n \r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n-  // Basic validation\r\n-  if (!email || !password) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Both email and password are required\"\r\n-    });\r\n-  }\r\n-\r\n   try {\r\n-    // Find user with case-insensitive email\r\n-    const user = await User.findOne({ \r\n-      email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n-    });\r\n+    const user = await User.findOne({ email });\r\n+    if (!user) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n \r\n-    if (!user) {\r\n-      return res.status(401).json({\r\n-        success: false,\r\n-        message: \"Invalid credentials\",\r\n-        suggestion: \"Check your email and password\"\r\n-      });\r\n-    }\r\n-\r\n-    // Compare passwords\r\n     const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({\r\n-        success: false,\r\n-        message: \"Invalid credentials\",\r\n-        suggestion: \"Check your email and password\"\r\n-      });\r\n-    }\r\n+    if (!isMatch) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n \r\n     // Generate token\r\n     const token = generateToken(user._id);\r\n \r\n-    // Successful login\r\n-    return res.status(200).json({\r\n-      success: true,\r\n+    res.status(200).json({ \r\n       message: \"Login successful!\",\r\n       token,\r\n       user: {\r\n         id: user._id,\r\n         fullNames: user.fullNames,\r\n         familyName: user.familyName,\r\n         email: user.email\r\n-      },\r\n-      timestamp: new Date().toISOString()\r\n+      }\r\n     });\r\n-\r\n   } catch (error) {\r\n     console.error(\"Login error:\", error);\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Login failed\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n-    });\r\n+    res.status(500).json({ message: \"Server error.\" });\r\n   }\r\n };\r\n \r\n exports.getUserData = async (req, res) => {\r\n   try {\r\n-    const user = await User.findById(req.user.id)\r\n-      .select(\"-password -gfgNumber -__v\")\r\n-      .lean();\r\n-\r\n+    const user = await User.findById(req.user.id).select(\"-password -gfgNumber\");\r\n     if (!user) {\r\n-      return res.status(404).json({\r\n-        success: false,\r\n-        message: \"User not found\",\r\n-        suggestion: \"Try logging in again\"\r\n-      });\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n-\r\n-    return res.status(200).json({\r\n-      success: true,\r\n-      user,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Get user error:\", error);\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Failed to fetch user data\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n-    });\r\n+    res.json(user);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: \"Server error\" });\r\n   }\r\n };\r\n \r\n exports.updateUser = async (req, res) => {\r\n   try {\r\n     const { fullNames, familyName, email } = req.body;\r\n-\r\n-    // Validate input\r\n-    if (!fullNames || !familyName) {\r\n-      return res.status(400).json({\r\n-        success: false,\r\n-        message: \"Full names and family name are required\"\r\n-      });\r\n-    }\r\n-\r\n-    // Check for email change\r\n+    \r\n+    // Check if email is being updated to one that already exists\r\n     if (email && email !== req.user.email) {\r\n-      const emailExists = await User.findOne({ \r\n-        email: { $regex: new RegExp(`^${email}$`, 'i') }\r\n-      });\r\n-      \r\n-      if (emailExists) {\r\n-        return res.status(400).json({\r\n-          success: false,\r\n-          message: \"Email already in use\",\r\n-          suggestion: \"Use a different email address\"\r\n-        });\r\n+      const existingUser = await User.findOne({ email });\r\n+      if (existingUser) {\r\n+        return res.status(400).json({ message: \"Email already in use\" });\r\n       }\r\n     }\r\n \r\n-    // Prepare update data\r\n-    const updateData = {\r\n-      fullNames: fullNames.trim(),\r\n-      familyName: familyName.trim(),\r\n-      ...(email && { email: email.toLowerCase().trim() })\r\n-    };\r\n-\r\n-    // Update user\r\n     const updatedUser = await User.findByIdAndUpdate(\r\n       req.user.id,\r\n-      updateData,\r\n-      { \r\n-        new: true,\r\n-        runValidators: true \r\n-      }\r\n-    ).select(\"-password -gfgNumber -__v\");\r\n+      { fullNames, familyName, email },\r\n+      { new: true }\r\n+    ).select(\"-password -gfgNumber\");\r\n \r\n-    if (!updatedUser) {\r\n-      return res.status(404).json({\r\n-        success: false,\r\n-        message: \"User not found\"\r\n-      });\r\n-    }\r\n-\r\n-    return res.status(200).json({\r\n-      success: true,\r\n-      message: \"Profile updated successfully\",\r\n-      user: updatedUser,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Update error:\", error);\r\n-    return res.status(500).json({\r\n-      success: false,\r\n-      message: \"Failed to update profile\",\r\n-      error: process.env.NODE_ENV === 'development' ? error.message : undefined,\r\n-      systemSuggestion: \"Please try again later\"\r\n-    });\r\n+    res.json(updatedUser);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: \"Server error\" });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753462521451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n const jwt = require(\"jsonwebtoken\");\r\n+const bcrypt = require(\"bcryptjs\");\r\n const User = require(\"../models/models\");\r\n \r\n // Helper function to generate token\r\n const generateToken = (userId) => {\r\n@@ -7,109 +8,240 @@\n     expiresIn: \"30d\",\r\n   });\r\n };\r\n \r\n+// Email validation helper\r\n+const validateEmail = (email) => {\r\n+  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n+  return re.test(email);\r\n+};\r\n+\r\n+// Password validation helper\r\n+const validatePassword = (password) => {\r\n+  return password.length >= 8;\r\n+};\r\n+\r\n exports.registerUser = async (req, res) => {\r\n   const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n \r\n+  // Validate input fields\r\n   if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n-    return res.status(400).json({ message: \"All fields are required.\" });\r\n+    return res.status(400).json({ \r\n+      success: false,\r\n+      message: \"All fields are required.\" \r\n+    });\r\n   }\r\n \r\n-  if (gfgNumber.length !== 14) {\r\n-    return res.status(400).json({ message: \"GFG number must be 14 digits.\" });\r\n+  if (!validateEmail(email)) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Please provide a valid email address.\"\r\n+    });\r\n   }\r\n \r\n+  if (!validatePassword(password)) {\r\n+    return res.status(400).json({\r\n+      success: false,\r\n+      message: \"Password must be at least 8 characters long.\"\r\n+    });\r\n+  }\r\n+\r\n+  if (gfgNumber.length !== 14 || !/^\\d+$/.test(gfgNumber)) {\r\n+    return res.status(400).json({ \r\n+      success: false,\r\n+      message: \"GFG number must be exactly 14 digits.\" \r\n+    });\r\n+  }\r\n+\r\n   try {\r\n+    // Check for existing user\r\n     const existingUser = await User.findOne({ email });\r\n     if (existingUser) {\r\n-      return res.status(409).json({ message: \"Email already registered.\" });\r\n+      return res.status(409).json({ \r\n+        success: false,\r\n+        message: \"Email already registered.\" \r\n+      });\r\n     }\r\n \r\n-    const newUser = new User({ fullNames, familyName, email, password, gfgNumber });\r\n+    // Create new user\r\n+    const newUser = new User({ \r\n+      fullNames, \r\n+      familyName, \r\n+      email, \r\n+      password, \r\n+      gfgNumber \r\n+    });\r\n+\r\n     await newUser.save();\r\n \r\n     // Generate token\r\n     const token = generateToken(newUser._id);\r\n \r\n     res.status(201).json({ \r\n+      success: true,\r\n       message: \"User registered successfully!\",\r\n       token,\r\n       user: {\r\n         id: newUser._id,\r\n         fullNames: newUser.fullNames,\r\n         familyName: newUser.familyName,\r\n-        email: newUser.email\r\n+        email: newUser.email,\r\n+        createdAt: newUser.createdAt\r\n       }\r\n     });\r\n   } catch (error) {\r\n     console.error(\"Register error:\", error);\r\n-    res.status(500).json({ message: \"Server error.\" });\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      message: \"Server error during registration.\",\r\n+      error: error.message \r\n+    });\r\n   }\r\n };\r\n \r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n+  // Basic validation\r\n+  if (!email || !password) {\r\n+    return res.status(400).json({ \r\n+      success: false,\r\n+      message: \"Email and password are required.\" \r\n+    });\r\n+  }\r\n+\r\n   try {\r\n+    // Find user by email\r\n     const user = await User.findOne({ email });\r\n-    if (!user) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n+    if (!user) {\r\n+      return res.status(401).json({ \r\n+        success: false,\r\n+        message: \"Invalid credentials.\" \r\n+      });\r\n+    }\r\n \r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n+    // Compare passwords\r\n+    const isMatch = await user.comparePassword(password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ \r\n+        success: false,\r\n+        message: \"Invalid credentials.\" \r\n+      });\r\n+    }\r\n \r\n     // Generate token\r\n     const token = generateToken(user._id);\r\n \r\n     res.status(200).json({ \r\n+      success: true,\r\n       message: \"Login successful!\",\r\n       token,\r\n       user: {\r\n         id: user._id,\r\n         fullNames: user.fullNames,\r\n         familyName: user.familyName,\r\n-        email: user.email\r\n+        email: user.email,\r\n+        documentRequirements: user.documentRequirements\r\n       }\r\n     });\r\n   } catch (error) {\r\n     console.error(\"Login error:\", error);\r\n-    res.status(500).json({ message: \"Server error.\" });\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      message: \"Server error during login.\",\r\n+      error: error.message \r\n+    });\r\n   }\r\n };\r\n \r\n exports.getUserData = async (req, res) => {\r\n   try {\r\n-    const user = await User.findById(req.user.id).select(\"-password -gfgNumber\");\r\n+    const user = await User.findById(req.user.id)\r\n+      .select(\"-password -gfgNumber -__v\")\r\n+      .lean();\r\n+\r\n     if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n+      return res.status(404).json({ \r\n+        success: false,\r\n+        message: \"User not found\" \r\n+      });\r\n     }\r\n-    res.json(user);\r\n+\r\n+    // Add additional user data if needed\r\n+    const userData = {\r\n+      ...user,\r\n+      isProfileComplete: Boolean(\r\n+        user.documentRequirements?.politicalDeclaration &&\r\n+        user.documentRequirements?.witnessTestimonies?.length > 0 &&\r\n+        user.documentRequirements?.idDocumentFile\r\n+      )\r\n+    };\r\n+\r\n+    res.status(200).json({\r\n+      success: true,\r\n+      user: userData\r\n+    });\r\n   } catch (err) {\r\n     console.error(err);\r\n-    res.status(500).json({ message: \"Server error\" });\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      message: \"Server error while fetching user data\",\r\n+      error: err.message \r\n+    });\r\n   }\r\n };\r\n \r\n exports.updateUser = async (req, res) => {\r\n   try {\r\n     const { fullNames, familyName, email } = req.body;\r\n     \r\n+    // Validate input\r\n+    if (!fullNames || !familyName || !email) {\r\n+      return res.status(400).json({\r\n+        success: false,\r\n+        message: \"All fields are required.\"\r\n+      });\r\n+    }\r\n+\r\n+    if (!validateEmail(email)) {\r\n+      return res.status(400).json({\r\n+        success: false,\r\n+        message: \"Please provide a valid email address.\"\r\n+      });\r\n+    }\r\n+\r\n     // Check if email is being updated to one that already exists\r\n-    if (email && email !== req.user.email) {\r\n+    if (email !== req.user.email) {\r\n       const existingUser = await User.findOne({ email });\r\n       if (existingUser) {\r\n-        return res.status(400).json({ message: \"Email already in use\" });\r\n+        return res.status(400).json({ \r\n+          success: false,\r\n+          message: \"Email already in use\" \r\n+        });\r\n       }\r\n     }\r\n \r\n     const updatedUser = await User.findByIdAndUpdate(\r\n       req.user.id,\r\n       { fullNames, familyName, email },\r\n-      { new: true }\r\n-    ).select(\"-password -gfgNumber\");\r\n+      { new: true, runValidators: true }\r\n+    ).select(\"-password -gfgNumber -__v\");\r\n \r\n-    res.json(updatedUser);\r\n+    res.status(200).json({\r\n+      success: true,\r\n+      message: \"Profile updated successfully\",\r\n+      user: updatedUser\r\n+    });\r\n   } catch (err) {\r\n     console.error(err);\r\n-    res.status(500).json({ message: \"Server error\" });\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      message: \"Server error while updating profile\",\r\n+      error: err.message \r\n+    });\r\n   }\r\n+};\r\n+\r\n+// Additional helper function to get user by ID\r\n+exports.getUserById = async (userId) => {\r\n+  return await User.findById(userId).select(\"-password -gfgNumber -__v\");\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753462997187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,8 +152,9 @@\n     });\r\n   }\r\n };\r\n \r\n+// In your getUserData function in authController.js\r\n exports.getUserData = async (req, res) => {\r\n   try {\r\n     const user = await User.findById(req.user.id)\r\n       .select(\"-password -gfgNumber -__v\")\r\n@@ -165,21 +166,18 @@\n         message: \"User not found\" \r\n       });\r\n     }\r\n \r\n-    // Add additional user data if needed\r\n-    const userData = {\r\n-      ...user,\r\n-      isProfileComplete: Boolean(\r\n-        user.documentRequirements?.politicalDeclaration &&\r\n-        user.documentRequirements?.witnessTestimonies?.length > 0 &&\r\n-        user.documentRequirements?.idDocumentFile\r\n-      )\r\n-    };\r\n-\r\n     res.status(200).json({\r\n       success: true,\r\n-      user: userData\r\n+      user: {\r\n+        ...user,\r\n+        profileImage: user.profileImage || null,\r\n+        fullNames: user.fullNames,\r\n+        familyName: user.familyName,\r\n+        email: user.email,\r\n+        documentRequirements: user.documentRequirements || {}\r\n+      }\r\n     });\r\n   } catch (err) {\r\n     console.error(err);\r\n     res.status(500).json({ \r\n"
                },
                {
                    "date": 1753472559944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,245 +1,207 @@\n+const User = require(\"../models/User\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-const User = require(\"../models/models\");\r\n+const config = require(\"../config/db\");\r\n+const fs = require(\"fs\");\r\n+const path = require(\"path\");\r\n \r\n-// Helper function to generate token\r\n-const generateToken = (userId) => {\r\n-  return jwt.sign({ id: userId }, process.env.JWT_SECRET || \"your_jwt_secret\", {\r\n+// Generate JWT Token\r\n+const generateToken = (user) => {\r\n+  return jwt.sign({ id: user._id }, config.JWT_SECRET, {\r\n     expiresIn: \"30d\",\r\n   });\r\n };\r\n \r\n-// Email validation helper\r\n-const validateEmail = (email) => {\r\n-  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n-  return re.test(email);\r\n-};\r\n-\r\n-// Password validation helper\r\n-const validatePassword = (password) => {\r\n-  return password.length >= 8;\r\n-};\r\n-\r\n+// @desc    Register a new user\r\n+// @route   POST /api/auth/register\r\n+// @access  Public\r\n exports.registerUser = async (req, res) => {\r\n-  const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n+  const { name, email, password } = req.body;\r\n \r\n-  // Validate input fields\r\n-  if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n-    return res.status(400).json({ \r\n-      success: false,\r\n-      message: \"All fields are required.\" \r\n-    });\r\n-  }\r\n-\r\n-  if (!validateEmail(email)) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Please provide a valid email address.\"\r\n-    });\r\n-  }\r\n-\r\n-  if (!validatePassword(password)) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      message: \"Password must be at least 8 characters long.\"\r\n-    });\r\n-  }\r\n-\r\n-  if (gfgNumber.length !== 14 || !/^\\d+$/.test(gfgNumber)) {\r\n-    return res.status(400).json({ \r\n-      success: false,\r\n-      message: \"GFG number must be exactly 14 digits.\" \r\n-    });\r\n-  }\r\n-\r\n   try {\r\n-    // Check for existing user\r\n-    const existingUser = await User.findOne({ email });\r\n-    if (existingUser) {\r\n-      return res.status(409).json({ \r\n-        success: false,\r\n-        message: \"Email already registered.\" \r\n-      });\r\n+    // Check if user exists\r\n+    let user = await User.findOne({ email });\r\n+    if (user) {\r\n+      return res.status(400).json({ message: \"User already exists\" });\r\n     }\r\n \r\n     // Create new user\r\n-    const newUser = new User({ \r\n-      fullNames, \r\n-      familyName, \r\n-      email, \r\n-      password, \r\n-      gfgNumber \r\n+    user = new User({\r\n+      name,\r\n+      email,\r\n+      password,\r\n     });\r\n \r\n-    await newUser.save();\r\n+    // Hash password\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    user.password = await bcrypt.hash(password, salt);\r\n \r\n+    // Save user\r\n+    await user.save();\r\n+\r\n     // Generate token\r\n-    const token = generateToken(newUser._id);\r\n+    const token = generateToken(user);\r\n \r\n-    res.status(201).json({ \r\n-      success: true,\r\n-      message: \"User registered successfully!\",\r\n+    res.status(201).json({\r\n+      _id: user._id,\r\n+      name: user.name,\r\n+      email: user.email,\r\n       token,\r\n-      user: {\r\n-        id: newUser._id,\r\n-        fullNames: newUser.fullNames,\r\n-        familyName: newUser.familyName,\r\n-        email: newUser.email,\r\n-        createdAt: newUser.createdAt\r\n-      }\r\n     });\r\n-  } catch (error) {\r\n-    console.error(\"Register error:\", error);\r\n-    res.status(500).json({ \r\n-      success: false,\r\n-      message: \"Server error during registration.\",\r\n-      error: error.message \r\n-    });\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n   }\r\n };\r\n \r\n+// @desc    Login user\r\n+// @route   POST /api/auth/login\r\n+// @access  Public\r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n-  // Basic validation\r\n-  if (!email || !password) {\r\n-    return res.status(400).json({ \r\n-      success: false,\r\n-      message: \"Email and password are required.\" \r\n-    });\r\n-  }\r\n-\r\n   try {\r\n-    // Find user by email\r\n+    // Check for user\r\n     const user = await User.findOne({ email });\r\n     if (!user) {\r\n-      return res.status(401).json({ \r\n-        success: false,\r\n-        message: \"Invalid credentials.\" \r\n-      });\r\n+      return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n-    // Compare passwords\r\n-    const isMatch = await user.comparePassword(password);\r\n+    // Check password\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n     if (!isMatch) {\r\n-      return res.status(401).json({ \r\n-        success: false,\r\n-        message: \"Invalid credentials.\" \r\n-      });\r\n+      return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n     // Generate token\r\n-    const token = generateToken(user._id);\r\n+    const token = generateToken(user);\r\n \r\n-    res.status(200).json({ \r\n-      success: true,\r\n-      message: \"Login successful!\",\r\n+    res.json({\r\n+      _id: user._id,\r\n+      name: user.name,\r\n+      email: user.email,\r\n+      profilePic: user.profilePic,\r\n       token,\r\n-      user: {\r\n-        id: user._id,\r\n-        fullNames: user.fullNames,\r\n-        familyName: user.familyName,\r\n-        email: user.email,\r\n-        documentRequirements: user.documentRequirements\r\n-      }\r\n     });\r\n-  } catch (error) {\r\n-    console.error(\"Login error:\", error);\r\n-    res.status(500).json({ \r\n-      success: false,\r\n-      message: \"Server error during login.\",\r\n-      error: error.message \r\n-    });\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n   }\r\n };\r\n \r\n-// In your getUserData function in authController.js\r\n+// @desc    Get user data\r\n+// @route   GET /api/auth/me\r\n+// @access  Private\r\n exports.getUserData = async (req, res) => {\r\n   try {\r\n-    const user = await User.findById(req.user.id)\r\n-      .select(\"-password -gfgNumber -__v\")\r\n-      .lean();\r\n+    const user = await User.findById(req.user.id).select(\"-password\");\r\n+    res.json(user);\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n+  }\r\n+};\r\n \r\n+// @desc    Update user data\r\n+// @route   PUT /api/auth/update\r\n+// @access  Private\r\n+exports.updateUser = async (req, res) => {\r\n+  const { name, email } = req.body;\r\n+\r\n+  try {\r\n+    const user = await User.findById(req.user.id);\r\n+\r\n     if (!user) {\r\n-      return res.status(404).json({ \r\n-        success: false,\r\n-        message: \"User not found\" \r\n-      });\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n \r\n-    res.status(200).json({\r\n-      success: true,\r\n-      user: {\r\n-        ...user,\r\n-        profileImage: user.profileImage || null,\r\n-        fullNames: user.fullNames,\r\n-        familyName: user.familyName,\r\n-        email: user.email,\r\n-        documentRequirements: user.documentRequirements || {}\r\n-      }\r\n+    user.name = name || user.name;\r\n+    user.email = email || user.email;\r\n+\r\n+    await user.save();\r\n+\r\n+    res.json({\r\n+      _id: user._id,\r\n+      name: user.name,\r\n+      email: user.email,\r\n+      profilePic: user.profilePic,\r\n     });\r\n   } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ \r\n-      success: false,\r\n-      message: \"Server error while fetching user data\",\r\n-      error: err.message \r\n-    });\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n   }\r\n };\r\n \r\n-exports.updateUser = async (req, res) => {\r\n+// @desc    Change password\r\n+// @route   PUT /api/auth/change-password\r\n+// @access  Private\r\n+exports.changePassword = async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n+\r\n   try {\r\n-    const { fullNames, familyName, email } = req.body;\r\n-    \r\n-    // Validate input\r\n-    if (!fullNames || !familyName || !email) {\r\n-      return res.status(400).json({\r\n-        success: false,\r\n-        message: \"All fields are required.\"\r\n-      });\r\n+    const user = await User.findById(req.user.id);\r\n+\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n \r\n-    if (!validateEmail(email)) {\r\n-      return res.status(400).json({\r\n-        success: false,\r\n-        message: \"Please provide a valid email address.\"\r\n-      });\r\n+    // Check current password\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ message: \"Current password is incorrect\" });\r\n     }\r\n \r\n-    // Check if email is being updated to one that already exists\r\n-    if (email !== req.user.email) {\r\n-      const existingUser = await User.findOne({ email });\r\n-      if (existingUser) {\r\n-        return res.status(400).json({ \r\n-          success: false,\r\n-          message: \"Email already in use\" \r\n-        });\r\n-      }\r\n+    // Hash new password\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    user.password = await bcrypt.hash(newPassword, salt);\r\n+\r\n+    await user.save();\r\n+\r\n+    res.json({ message: \"Password updated successfully\" });\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+// @desc    Upload profile picture\r\n+// @route   POST /api/auth/profile-pic\r\n+// @access  Private\r\n+exports.uploadProfilePic = async (req, res) => {\r\n+  try {\r\n+    const user = await User.findById(req.user.id);\r\n+\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n \r\n-    const updatedUser = await User.findByIdAndUpdate(\r\n-      req.user.id,\r\n-      { fullNames, familyName, email },\r\n-      { new: true, runValidators: true }\r\n-    ).select(\"-password -gfgNumber -__v\");\r\n+    // Delete old profile pic if exists\r\n+    if (user.profilePic && fs.existsSync(user.profilePic)) {\r\n+      fs.unlink(user.profilePic, (err) => {\r\n+        if (err) console.error(`Error deleting old profile pic: ${err}`);\r\n+      });\r\n+    }\r\n \r\n-    res.status(200).json({\r\n-      success: true,\r\n-      message: \"Profile updated successfully\",\r\n-      user: updatedUser\r\n-    });\r\n+    // Update user with new profile pic path\r\n+    user.profilePic = req.file.path;\r\n+    await user.save();\r\n+\r\n+    res.json({ profilePic: user.profilePic });\r\n   } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ \r\n-      success: false,\r\n-      message: \"Server error while updating profile\",\r\n-      error: err.message \r\n-    });\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n   }\r\n };\r\n \r\n-// Additional helper function to get user by ID\r\n-exports.getUserById = async (userId) => {\r\n-  return await User.findById(userId).select(\"-password -gfgNumber -__v\");\r\n+// @desc    Logout user (invalidate token)\r\n+// @route   POST /api/auth/logout\r\n+// @access  Private\r\n+exports.logoutUser = async (req, res) => {\r\n+  try {\r\n+    // In a real application, you might want to implement token blacklisting here\r\n+    res.json({ message: \"Logout successful\" });\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n+  }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753472885290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const User = require(\"../models/User\");\r\n+const User = require(\"../models/models\")\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n const config = require(\"../config/db\");\r\n const fs = require(\"fs\");\r\n"
                },
                {
                    "date": 1753692784908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,10 @@\n const path = require(\"path\");\r\n \r\n // Generate JWT Token\r\n const generateToken = (user) => {\r\n-  return jwt.sign({ id: user._id }, config.JWT_SECRET, {\r\n-    expiresIn: \"30d\",\r\n+  return jwt.sign({ id: user._id }, process.env.JWT_SECRET, {\r\n+    expiresIn: process.env.JWT_EXPIRES_IN || \"24h\", // Use env variable with fallback\r\n   });\r\n };\r\n \r\n // @desc    Register a new user\r\n"
                },
                {
                    "date": 1753700179128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,20 +56,23 @@\n \r\n // @desc    Login user\r\n // @route   POST /api/auth/login\r\n // @access  Public\r\n+// @desc    Login user\r\n+// @route   POST /api/auth/login\r\n+// @access  Public\r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n     // Check for user\r\n-    const user = await User.findOne({ email });\r\n+    const user = await User.findOne({ email }).select('+password');\r\n     if (!user) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n     // Check password\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n+    const isMatch = await user.comparePassword(password);\r\n     if (!isMatch) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n@@ -77,19 +80,26 @@\n     const token = generateToken(user);\r\n \r\n     res.json({\r\n       _id: user._id,\r\n-      name: user.name,\r\n+      fullNames: user.fullNames,\r\n+      familyName: user.familyName,\r\n       email: user.email,\r\n-      profilePic: user.profilePic,\r\n+      profileImage: user.profileImage,\r\n       token,\r\n+      user: { // Add this to match frontend expectation\r\n+        _id: user._id,\r\n+        fullNames: user.fullNames,\r\n+        familyName: user.familyName,\r\n+        email: user.email,\r\n+        profileImage: user.profileImage\r\n+      }\r\n     });\r\n   } catch (err) {\r\n     console.error(err.message);\r\n     res.status(500).json({ message: \"Server Error\" });\r\n   }\r\n };\r\n-\r\n // @desc    Get user data\r\n // @route   GET /api/auth/me\r\n // @access  Private\r\n exports.getUserData = async (req, res) => {\r\n"
                },
                {
                    "date": 1753700197513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+const User = require(\"../models/models\")\r\n+const jwt = require(\"jsonwebtoken\");\r\n+const bcrypt = require(\"bcryptjs\");\r\n+const config = require(\"../config/db\");\r\n+const fs = require(\"fs\");\r\n+const path = require(\"path\");\r\n+\r\n+// Generate JWT Token\r\n+const generateToken = (user) => {\r\n+  return jwt.sign({ id: user._id }, process.env.JWT_SECRET, {\r\n+    expiresIn: process.env.JWT_EXPIRES_IN || \"24h\", // Use env variable with fallback\r\n+  });\r\n+};\r\n+\r\n+// @desc    Register a new user\r\n+// @route   POST /api/auth/register\r\n+// @access  Public\r\n+// @desc    Register a new user\r\n+// @route   POST /api/auth/register\r\n+// @access  Public\r\n+exports.registerUser = async (req, res) => {\r\n+  const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n+\r\n+  try {\r\n+    // Check if user exists\r\n+    let user = await User.findOne({ email });\r\n+    if (user) {\r\n+      return res.status(400).json({ message: \"User already exists\" });\r\n+    }\r\n+\r\n+    // Create new user with all required fields\r\n+    user = new User({\r\n+      fullNames,\r\n+      familyName,\r\n+      email,\r\n+      password,\r\n+      gfgNumber,\r\n+      documentLabel: \"528\" // Default value or get from request\r\n+    });\r\n+\r\n+    // Save user (password will be hashed by pre-save hook)\r\n+    await user.save();\r\n+\r\n+    // Generate token\r\n+    const token = generateToken(user);\r\n+\r\n+    res.status(201).json({\r\n+      _id: user._id,\r\n+      fullNames: user.fullNames,\r\n+      familyName: user.familyName,\r\n+      email: user.email,\r\n+      token,\r\n+      user: { // Match frontend expectation\r\n+        _id: user._id,\r\n+        fullNames: user.fullNames,\r\n+        familyName: user.familyName,\r\n+        email: user.email\r\n+      }\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+// @desc    Login user\r\n+// @route   POST /api/auth/login\r\n+// @access  Public\r\n+// @desc    Login user\r\n+// @route   POST /api/auth/login\r\n+// @access  Public\r\n+exports.loginUser = async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    // Check for user\r\n+    const user = await User.findOne({ email }).select('+password');\r\n+    if (!user) {\r\n+      return res.status(401).json({ message: \"Invalid credentials\" });\r\n+    }\r\n+\r\n+    // Check password\r\n+    const isMatch = await user.comparePassword(password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ message: \"Invalid credentials\" });\r\n+    }\r\n+\r\n+    // Generate token\r\n+    const token = generateToken(user);\r\n+\r\n+    res.json({\r\n+      _id: user._id,\r\n+      fullNames: user.fullNames,\r\n+      familyName: user.familyName,\r\n+      email: user.email,\r\n+      profileImage: user.profileImage,\r\n+      token,\r\n+      user: { // Add this to match frontend expectation\r\n+        _id: user._id,\r\n+        fullNames: user.fullNames,\r\n+        familyName: user.familyName,\r\n+        email: user.email,\r\n+        profileImage: user.profileImage\r\n+      }\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n+  }\r\n+};\r\n+// @desc    Get user data\r\n+// @route   GET /api/auth/me\r\n+// @access  Private\r\n+exports.getUserData = async (req, res) => {\r\n+  try {\r\n+    const user = await User.findById(req.user.id).select(\"-password\");\r\n+    res.json(user);\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+// @desc    Update user data\r\n+// @route   PUT /api/auth/update\r\n+// @access  Private\r\n+exports.updateUser = async (req, res) => {\r\n+  const { name, email } = req.body;\r\n+\r\n+  try {\r\n+    const user = await User.findById(req.user.id);\r\n+\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+\r\n+    user.name = name || user.name;\r\n+    user.email = email || user.email;\r\n+\r\n+    await user.save();\r\n+\r\n+    res.json({\r\n+      _id: user._id,\r\n+      name: user.name,\r\n+      email: user.email,\r\n+      profilePic: user.profilePic,\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+// @desc    Change password\r\n+// @route   PUT /api/auth/change-password\r\n+// @access  Private\r\n+exports.changePassword = async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n+\r\n+  try {\r\n+    const user = await User.findById(req.user.id);\r\n+\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+\r\n+    // Check current password\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ message: \"Current password is incorrect\" });\r\n+    }\r\n+\r\n+    // Hash new password\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    user.password = await bcrypt.hash(newPassword, salt);\r\n+\r\n+    await user.save();\r\n+\r\n+    res.json({ message: \"Password updated successfully\" });\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+// @desc    Upload profile picture\r\n+// @route   POST /api/auth/profile-pic\r\n+// @access  Private\r\n+exports.uploadProfilePic = async (req, res) => {\r\n+  try {\r\n+    const user = await User.findById(req.user.id);\r\n+\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+\r\n+    // Delete old profile pic if exists\r\n+    if (user.profilePic && fs.existsSync(user.profilePic)) {\r\n+      fs.unlink(user.profilePic, (err) => {\r\n+        if (err) console.error(`Error deleting old profile pic: ${err}`);\r\n+      });\r\n+    }\r\n+\r\n+    // Update user with new profile pic path\r\n+    user.profilePic = req.file.path;\r\n+    await user.save();\r\n+\r\n+    res.json({ profilePic: user.profilePic });\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+// @desc    Logout user (invalidate token)\r\n+// @route   POST /api/auth/logout\r\n+// @access  Private\r\n+exports.logoutUser = async (req, res) => {\r\n+  try {\r\n+    // In a real application, you might want to implement token blacklisting here\r\n+    res.json({ message: \"Logout successful\" });\r\n+  } catch (err) {\r\n+    console.error(err.message);\r\n+    res.status(500).json({ message: \"Server Error\" });\r\n+  }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753700830236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,235 +14,9 @@\n \r\n // @desc    Register a new user\r\n // @route   POST /api/auth/register\r\n // @access  Public\r\n-// @desc    Register a new user\r\n-// @route   POST /api/auth/register\r\n-// @access  Public\r\n exports.registerUser = async (req, res) => {\r\n-  const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n-\r\n-  try {\r\n-    // Check if user exists\r\n-    let user = await User.findOne({ email });\r\n-    if (user) {\r\n-      return res.status(400).json({ message: \"User already exists\" });\r\n-    }\r\n-\r\n-    // Create new user with all required fields\r\n-    user = new User({\r\n-      fullNames,\r\n-      familyName,\r\n-      email,\r\n-      password,\r\n-      gfgNumber,\r\n-      documentLabel: \"528\" // Default value or get from request\r\n-    });\r\n-\r\n-    // Save user (password will be hashed by pre-save hook)\r\n-    await user.save();\r\n-\r\n-    // Generate token\r\n-    const token = generateToken(user);\r\n-\r\n-    res.status(201).json({\r\n-      _id: user._id,\r\n-      fullNames: user.fullNames,\r\n-      familyName: user.familyName,\r\n-      email: user.email,\r\n-      token,\r\n-      user: { // Match frontend expectation\r\n-        _id: user._id,\r\n-        fullNames: user.fullNames,\r\n-        familyName: user.familyName,\r\n-        email: user.email\r\n-      }\r\n-    });\r\n-  } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-// @desc    Login user\r\n-// @route   POST /api/auth/login\r\n-// @access  Public\r\n-// @desc    Login user\r\n-// @route   POST /api/auth/login\r\n-// @access  Public\r\n-exports.loginUser = async (req, res) => {\r\n-  const { email, password } = req.body;\r\n-\r\n-  try {\r\n-    // Check for user\r\n-    const user = await User.findOne({ email }).select('+password');\r\n-    if (!user) {\r\n-      return res.status(401).json({ message: \"Invalid credentials\" });\r\n-    }\r\n-\r\n-    // Check password\r\n-    const isMatch = await user.comparePassword(password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ message: \"Invalid credentials\" });\r\n-    }\r\n-\r\n-    // Generate token\r\n-    const token = generateToken(user);\r\n-\r\n-    res.json({\r\n-      _id: user._id,\r\n-      fullNames: user.fullNames,\r\n-      familyName: user.familyName,\r\n-      email: user.email,\r\n-      profileImage: user.profileImage,\r\n-      token,\r\n-      user: { // Add this to match frontend expectation\r\n-        _id: user._id,\r\n-        fullNames: user.fullNames,\r\n-        familyName: user.familyName,\r\n-        email: user.email,\r\n-        profileImage: user.profileImage\r\n-      }\r\n-    });\r\n-  } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n-  }\r\n-};\r\n-// @desc    Get user data\r\n-// @route   GET /api/auth/me\r\n-// @access  Private\r\n-exports.getUserData = async (req, res) => {\r\n-  try {\r\n-    const user = await User.findById(req.user.id).select(\"-password\");\r\n-    res.json(user);\r\n-  } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-// @desc    Update user data\r\n-// @route   PUT /api/auth/update\r\n-// @access  Private\r\n-exports.updateUser = async (req, res) => {\r\n-  const { name, email } = req.body;\r\n-\r\n-  try {\r\n-    const user = await User.findById(req.user.id);\r\n-\r\n-    if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n-    }\r\n-\r\n-    user.name = name || user.name;\r\n-    user.email = email || user.email;\r\n-\r\n-    await user.save();\r\n-\r\n-    res.json({\r\n-      _id: user._id,\r\n-      name: user.name,\r\n-      email: user.email,\r\n-      profilePic: user.profilePic,\r\n-    });\r\n-  } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-// @desc    Change password\r\n-// @route   PUT /api/auth/change-password\r\n-// @access  Private\r\n-exports.changePassword = async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n-\r\n-  try {\r\n-    const user = await User.findById(req.user.id);\r\n-\r\n-    if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n-    }\r\n-\r\n-    // Check current password\r\n-    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ message: \"Current password is incorrect\" });\r\n-    }\r\n-\r\n-    // Hash new password\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    user.password = await bcrypt.hash(newPassword, salt);\r\n-\r\n-    await user.save();\r\n-\r\n-    res.json({ message: \"Password updated successfully\" });\r\n-  } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-// @desc    Upload profile picture\r\n-// @route   POST /api/auth/profile-pic\r\n-// @access  Private\r\n-exports.uploadProfilePic = async (req, res) => {\r\n-  try {\r\n-    const user = await User.findById(req.user.id);\r\n-\r\n-    if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n-    }\r\n-\r\n-    // Delete old profile pic if exists\r\n-    if (user.profilePic && fs.existsSync(user.profilePic)) {\r\n-      fs.unlink(user.profilePic, (err) => {\r\n-        if (err) console.error(`Error deleting old profile pic: ${err}`);\r\n-      });\r\n-    }\r\n-\r\n-    // Update user with new profile pic path\r\n-    user.profilePic = req.file.path;\r\n-    await user.save();\r\n-\r\n-    res.json({ profilePic: user.profilePic });\r\n-  } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-// @desc    Logout user (invalidate token)\r\n-// @route   POST /api/auth/logout\r\n-// @access  Private\r\n-exports.logoutUser = async (req, res) => {\r\n-  try {\r\n-    // In a real application, you might want to implement token blacklisting here\r\n-    res.json({ message: \"Logout successful\" });\r\n-  } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n-  }\r\n-};\n-const User = require(\"../models/models\")\r\n-const jwt = require(\"jsonwebtoken\");\r\n-const bcrypt = require(\"bcryptjs\");\r\n-const config = require(\"../config/db\");\r\n-const fs = require(\"fs\");\r\n-const path = require(\"path\");\r\n-\r\n-// Generate JWT Token\r\n-const generateToken = (user) => {\r\n-  return jwt.sign({ id: user._id }, process.env.JWT_SECRET, {\r\n-    expiresIn: process.env.JWT_EXPIRES_IN || \"24h\", // Use env variable with fallback\r\n-  });\r\n-};\r\n-\r\n-// @desc    Register a new user\r\n-// @route   POST /api/auth/register\r\n-// @access  Public\r\n-exports.registerUser = async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n     // Check if user exists\r\n@@ -282,23 +56,20 @@\n \r\n // @desc    Login user\r\n // @route   POST /api/auth/login\r\n // @access  Public\r\n-// @desc    Login user\r\n-// @route   POST /api/auth/login\r\n-// @access  Public\r\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n     // Check for user\r\n-    const user = await User.findOne({ email }).select('+password');\r\n+    const user = await User.findOne({ email });\r\n     if (!user) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n     // Check password\r\n-    const isMatch = await user.comparePassword(password);\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n     if (!isMatch) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n@@ -306,26 +77,19 @@\n     const token = generateToken(user);\r\n \r\n     res.json({\r\n       _id: user._id,\r\n-      fullNames: user.fullNames,\r\n-      familyName: user.familyName,\r\n+      name: user.name,\r\n       email: user.email,\r\n-      profileImage: user.profileImage,\r\n+      profilePic: user.profilePic,\r\n       token,\r\n-      user: { // Add this to match frontend expectation\r\n-        _id: user._id,\r\n-        fullNames: user.fullNames,\r\n-        familyName: user.familyName,\r\n-        email: user.email,\r\n-        profileImage: user.profileImage\r\n-      }\r\n     });\r\n   } catch (err) {\r\n     console.error(err.message);\r\n     res.status(500).json({ message: \"Server Error\" });\r\n   }\r\n };\r\n+\r\n // @desc    Get user data\r\n // @route   GET /api/auth/me\r\n // @access  Private\r\n exports.getUserData = async (req, res) => {\r\n"
                },
                {
                    "date": 1753708255076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,70 @@\n-const User = require(\"../models/models\")\r\n+const User = require(\"../models/models\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-const config = require(\"../config/db\");\r\n const fs = require(\"fs\");\r\n const path = require(\"path\");\r\n \r\n // Generate JWT Token\r\n const generateToken = (user) => {\r\n   return jwt.sign({ id: user._id }, process.env.JWT_SECRET, {\r\n-    expiresIn: process.env.JWT_EXPIRES_IN || \"24h\", // Use env variable with fallback\r\n+    expiresIn: process.env.JWT_EXPIRES_IN || \"24h\",\r\n   });\r\n };\r\n \r\n // @desc    Register a new user\r\n // @route   POST /api/auth/register\r\n // @access  Public\r\n exports.registerUser = async (req, res) => {\r\n-  const { name, email, password } = req.body;\r\n+  const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n \r\n   try {\r\n+    // Validate required fields\r\n+    if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n+      return res.status(400).json({ \r\n+        message: \"All fields are required\",\r\n+        requiredFields: [\"fullNames\", \"familyName\", \"email\", \"password\", \"gfgNumber\"]\r\n+      });\r\n+    }\r\n+\r\n     // Check if user exists\r\n-    let user = await User.findOne({ email });\r\n-    if (user) {\r\n+    const existingUser = await User.findOne({ email });\r\n+    if (existingUser) {\r\n       return res.status(400).json({ message: \"User already exists\" });\r\n     }\r\n \r\n-    // Create new user\r\n-    user = new User({\r\n-      name,\r\n+    // Validate GFG number format\r\n+    if (!/^\\d{14}$/.test(gfgNumber)) {\r\n+      return res.status(400).json({ message: \"GFG number must be exactly 14 digits\" });\r\n+    }\r\n+\r\n+    // Create new user (password hashing is handled in the pre-save hook)\r\n+    const user = new User({\r\n+      fullNames,\r\n+      familyName,\r\n       email,\r\n       password,\r\n+      gfgNumber\r\n     });\r\n \r\n-    // Hash password\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    user.password = await bcrypt.hash(password, salt);\r\n-\r\n-    // Save user\r\n     await user.save();\r\n \r\n-    // Generate token\r\n+    // Generate token (without sensitive fields)\r\n     const token = generateToken(user);\r\n \r\n     res.status(201).json({\r\n       _id: user._id,\r\n-      name: user.name,\r\n+      fullNames: user.fullNames,\r\n+      familyName: user.familyName,\r\n       email: user.email,\r\n       token,\r\n     });\r\n   } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n+    console.error(\"Registration error:\", err);\r\n+    res.status(500).json({ \r\n+      message: err.message || \"Registration failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n // @desc    Login user\r\n@@ -60,76 +73,107 @@\n exports.loginUser = async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n-    // Check for user\r\n-    const user = await User.findOne({ email });\r\n+    // Validate input\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ message: \"Email and password are required\" });\r\n+    }\r\n+\r\n+    // Check for user (including password which is normally excluded)\r\n+    const user = await User.findOne({ email }).select('+password');\r\n     if (!user) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n     // Check password\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n+    const isMatch = await user.comparePassword(password);\r\n     if (!isMatch) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n     // Generate token\r\n     const token = generateToken(user);\r\n \r\n+    // Return user data (excluding sensitive fields)\r\n     res.json({\r\n       _id: user._id,\r\n-      name: user.name,\r\n+      fullNames: user.fullNames,\r\n+      familyName: user.familyName,\r\n       email: user.email,\r\n-      profilePic: user.profilePic,\r\n+      profileImage: user.profileImage,\r\n       token,\r\n     });\r\n   } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n+    console.error(\"Login error:\", err);\r\n+    res.status(500).json({ \r\n+      message: \"Authentication failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n-// @desc    Get user data\r\n+// @desc    Get current user data\r\n // @route   GET /api/auth/me\r\n // @access  Private\r\n exports.getUserData = async (req, res) => {\r\n   try {\r\n-    const user = await User.findById(req.user.id).select(\"-password\");\r\n+    const user = await User.findById(req.user.id)\r\n+      .select('-password -gfgNumber -__v');\r\n+      \r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+    \r\n     res.json(user);\r\n   } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n+    console.error(\"Get user error:\", err);\r\n+    res.status(500).json({ \r\n+      message: \"Failed to retrieve user data\",\r\n+      error: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n-// @desc    Update user data\r\n+// @desc    Update user profile\r\n // @route   PUT /api/auth/update\r\n // @access  Private\r\n exports.updateUser = async (req, res) => {\r\n-  const { name, email } = req.body;\r\n+  const { fullNames, familyName, email } = req.body;\r\n \r\n   try {\r\n     const user = await User.findById(req.user.id);\r\n-\r\n     if (!user) {\r\n       return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n \r\n-    user.name = name || user.name;\r\n-    user.email = email || user.email;\r\n+    // Update fields if provided\r\n+    if (fullNames) user.fullNames = fullNames;\r\n+    if (familyName) user.familyName = familyName;\r\n+    if (email) {\r\n+      // Check if new email is already taken\r\n+      const existingUser = await User.findOne({ email });\r\n+      if (existingUser && existingUser._id.toString() !== req.user.id) {\r\n+        return res.status(400).json({ message: \"Email already in use\" });\r\n+      }\r\n+      user.email = email;\r\n+    }\r\n \r\n     await user.save();\r\n \r\n     res.json({\r\n       _id: user._id,\r\n-      name: user.name,\r\n+      fullNames: user.fullNames,\r\n+      familyName: user.familyName,\r\n       email: user.email,\r\n-      profilePic: user.profilePic,\r\n+      profileImage: user.profileImage,\r\n     });\r\n   } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n+    console.error(\"Update error:\", err);\r\n+    res.status(500).json({ \r\n+      message: \"Profile update failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n // @desc    Change password\r\n@@ -138,70 +182,86 @@\n exports.changePassword = async (req, res) => {\r\n   const { currentPassword, newPassword } = req.body;\r\n \r\n   try {\r\n-    const user = await User.findById(req.user.id);\r\n+    // Validate input\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ message: \"Both current and new password are required\" });\r\n+    }\r\n \r\n+    // Get user with password\r\n+    const user = await User.findById(req.user.id).select('+password');\r\n     if (!user) {\r\n       return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n \r\n-    // Check current password\r\n-    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    // Verify current password\r\n+    const isMatch = await user.comparePassword(currentPassword);\r\n     if (!isMatch) {\r\n       return res.status(401).json({ message: \"Current password is incorrect\" });\r\n     }\r\n \r\n-    // Hash new password\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    user.password = await bcrypt.hash(newPassword, salt);\r\n-\r\n+    // Update password (hashing is handled in pre-save hook)\r\n+    user.password = newPassword;\r\n     await user.save();\r\n \r\n     res.json({ message: \"Password updated successfully\" });\r\n   } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n+    console.error(\"Password change error:\", err);\r\n+    res.status(500).json({ \r\n+      message: \"Password change failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n // @desc    Upload profile picture\r\n // @route   POST /api/auth/profile-pic\r\n // @access  Private\r\n exports.uploadProfilePic = async (req, res) => {\r\n   try {\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    }\r\n+\r\n     const user = await User.findById(req.user.id);\r\n-\r\n     if (!user) {\r\n+      // Clean up the uploaded file if user not found\r\n+      fs.unlinkSync(req.file.path);\r\n       return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n \r\n     // Delete old profile pic if exists\r\n-    if (user.profilePic && fs.existsSync(user.profilePic)) {\r\n-      fs.unlink(user.profilePic, (err) => {\r\n-        if (err) console.error(`Error deleting old profile pic: ${err}`);\r\n+    if (user.profileImage && fs.existsSync(user.profileImage)) {\r\n+      fs.unlink(user.profileImage, (err) => {\r\n+        if (err) console.error(\"Error deleting old profile image:\", err);\r\n       });\r\n     }\r\n \r\n     // Update user with new profile pic path\r\n-    user.profilePic = req.file.path;\r\n+    user.profileImage = req.file.path;\r\n     await user.save();\r\n \r\n-    res.json({ profilePic: user.profilePic });\r\n+    res.json({ \r\n+      message: \"Profile image updated successfully\",\r\n+      profileImage: user.profileImage \r\n+    });\r\n   } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n+    console.error(\"Profile upload error:\", err);\r\n+    // Clean up the uploaded file on error\r\n+    if (req.file && fs.existsSync(req.file.path)) {\r\n+      fs.unlinkSync(req.file.path);\r\n+    }\r\n+    res.status(500).json({ \r\n+      message: \"Profile image upload failed\",\r\n+      error: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n+    });\r\n   }\r\n };\r\n \r\n-// @desc    Logout user (invalidate token)\r\n+// @desc    Logout user\r\n // @route   POST /api/auth/logout\r\n // @access  Private\r\n exports.logoutUser = async (req, res) => {\r\n-  try {\r\n-    // In a real application, you might want to implement token blacklisting here\r\n-    res.json({ message: \"Logout successful\" });\r\n-  } catch (err) {\r\n-    console.error(err.message);\r\n-    res.status(500).json({ message: \"Server Error\" });\r\n-  }\r\n+  // In a production app, you would implement token invalidation here\r\n+  res.json({ message: \"Logout successful\" });\r\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1753433328178,
            "name": "Commit-0",
            "content": "const jwt = require(\"jsonwebtoken\");\r\nconst User = require(\"../models/models\");\r\n\r\n// Helper function to generate token\r\nconst generateToken = (userId) => {\r\n  return jwt.sign({ id: userId }, process.env.JWT_SECRET || \"your_jwt_secret\", {\r\n    expiresIn: \"30d\",\r\n  });\r\n};\r\n\r\nconst bcrypt = require(\"bcryptjs\");\r\n\r\n\r\nexports.registerUser = async (req, res) => {\r\n  const { fullNames, familyName, email, password, gfgNumber } = req.body;\r\n\r\n  if (!fullNames || !familyName || !email || !password || !gfgNumber) {\r\n    return res.status(400).json({ message: \"All fields are required.\" });\r\n  }\r\n\r\n  if (gfgNumber.length !== 14) {\r\n    return res.status(400).json({ message: \"GFG number must be 14 digits.\" });\r\n  }\r\n\r\n  try {\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(409).json({ message: \"Email already registered.\" });\r\n    }\r\n\r\n    const newUser = new User({ fullNames, familyName, email, password, gfgNumber });\r\n    await newUser.save();\r\n\r\n    // Generate token\r\n    const token = generateToken(newUser._id);\r\n\r\n    res.status(201).json({ \r\n      message: \"User registered successfully!\",\r\n      token,\r\n      user: {\r\n        id: newUser._id,\r\n        fullNames: newUser.fullNames,\r\n        familyName: newUser.familyName,\r\n        email: newUser.email\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Register error:\", error);\r\n    res.status(500).json({ message: \"Server error.\" });\r\n  }\r\n};\r\n\r\nexports.loginUser = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) return res.status(401).json({ message: \"Invalid email or password.\" });\r\n\r\n    // Generate token\r\n    const token = generateToken(user._id);\r\n\r\n    res.status(200).json({ \r\n      message: \"Login successful!\",\r\n      token,\r\n      user: {\r\n        id: user._id,\r\n        fullNames: user.fullNames,\r\n        familyName: user.familyName,\r\n        email: user.email\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error);\r\n    res.status(500).json({ message: \"Server error.\" });\r\n  }\r\n};\r\n\r\nexports.getUserData = async (req, res) => {\r\n  try {\r\n    const user = await User.findById(req.user.id).select(\"-password -gfgNumber\");\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    res.json(user);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n};\r\n\r\nexports.updateUser = async (req, res) => {\r\n  try {\r\n    const { fullNames, familyName, email } = req.body;\r\n    \r\n    // Check if email is being updated to one that already exists\r\n    if (email && email !== req.user.email) {\r\n      const existingUser = await User.findOne({ email });\r\n      if (existingUser) {\r\n        return res.status(400).json({ message: \"Email already in use\" });\r\n      }\r\n    }\r\n\r\n    const updatedUser = await User.findByIdAndUpdate(\r\n      req.user.id,\r\n      { fullNames, familyName, email },\r\n      { new: true }\r\n    ).select(\"-password -gfgNumber\");\r\n\r\n    res.json(updatedUser);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n};"
        }
    ]
}