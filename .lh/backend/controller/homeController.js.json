{
    "sourceFile": "backend/controller/homeController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1753434238442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753434331751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,42 @@\n+const path = require(\"path\");\r\n+const fs = require(\"fs\");\r\n+const multer = require(\"multer\");\r\n+const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models\"); // Adjust path to your User model\r\n-const jwt = require(\"jsonwebtoken\");\r\n \r\n+// Create the upload directory if it doesn't exist\r\n+const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n+if (!fs.existsSync(uploadDir)) {\r\n+  fs.mkdirSync(uploadDir);\r\n+}\r\n+\r\n+// Configure multer storage\r\n+const storage = multer.diskStorage({\r\n+  destination: (req, file, cb) => {\r\n+    cb(null, uploadDir);\r\n+  },\r\n+  filename: (req, file, cb) => {\r\n+    const ext = path.extname(file.originalname);\r\n+    const base = path.basename(file.originalname, ext);\r\n+    cb(null, `${base}-${Date.now()}${ext}`);\r\n+  },\r\n+});\r\n+\r\n+// Accept only specific file types\r\n+const fileFilter = (req, file, cb) => {\r\n+  const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n+  if (allowedTypes.includes(file.mimetype)) {\r\n+    cb(null, true);\r\n+  } else {\r\n+    cb(new Error(\"Invalid file type.\"), false);\r\n+  }\r\n+};\r\n+\r\n+const upload = multer({ storage, fileFilter }).single(\"file\");\r\n+\r\n+// Upload controller\r\n exports.uploadFile = async (req, res) => {\r\n-  // Use multer upload middleware\r\n   upload(req, res, async function (err) {\r\n     if (err instanceof multer.MulterError) {\r\n       return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n     } else if (err) {\r\n@@ -32,29 +65,25 @@\n       if (type === \"profileImage\") {\r\n         user.profileImage = `/uploads/${req.file.filename}`;\r\n       } else {\r\n         // For documents: update documentRequirements field accordingly\r\n-\r\n         if (!user.documentRequirements) user.documentRequirements = {};\r\n \r\n-        // Set based on documentType, example:\r\n         switch (documentType) {\r\n           case \"politicalDeclaration\":\r\n             user.documentRequirements.politicalDeclaration = `/uploads/${req.file.filename}`;\r\n             break;\r\n           case \"witnessTestimonies\":\r\n-            // witnessTestimonies is array of 3 paths; add to array or replace as needed\r\n             if (!user.documentRequirements.witnessTestimonies) {\r\n               user.documentRequirements.witnessTestimonies = [];\r\n             }\r\n-            // For simplicity, replace array with single uploaded file path for now:\r\n+            // Replace existing witness testimonies array for simplicity\r\n             user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n             break;\r\n           case \"idDocument\":\r\n             user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n             break;\r\n           default:\r\n-            // Unknown document type\r\n             return res.status(400).json({ message: \"Invalid document type\" });\r\n         }\r\n       }\r\n \r\n@@ -69,4 +98,46 @@\n       res.status(500).json({ message: \"Server error\" });\r\n     }\r\n   });\r\n };\r\n+\r\n+// Delete document controller\r\n+exports.deleteDocument = async (req, res) => {\r\n+  try {\r\n+    const { documentType } = req.body;\r\n+\r\n+    const authHeader = req.headers.authorization || \"\";\r\n+    const token = authHeader.split(\" \")[1];\r\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\r\n+\r\n+    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+    const userId = decoded.id;\r\n+\r\n+    const user = await User.findById(userId);\r\n+    if (!user) return res.status(404).json({ message: \"User not found\" });\r\n+\r\n+    if (!user.documentRequirements) {\r\n+      return res.status(400).json({ message: \"No documents to delete\" });\r\n+    }\r\n+\r\n+    switch (documentType) {\r\n+      case \"politicalDeclaration\":\r\n+        user.documentRequirements.politicalDeclaration = undefined;\r\n+        break;\r\n+      case \"witnessTestimonies\":\r\n+        user.documentRequirements.witnessTestimonies = [];\r\n+        break;\r\n+      case \"idDocument\":\r\n+        user.documentRequirements.idDocumentFile = undefined;\r\n+        break;\r\n+      default:\r\n+        return res.status(400).json({ message: \"Invalid document type\" });\r\n+    }\r\n+\r\n+    await user.save();\r\n+\r\n+    res.status(200).json({ message: `${documentType} deleted successfully` });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).json({ message: \"Server error\" });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1753434468851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n const multer = require(\"multer\");\r\n const jwt = require(\"jsonwebtoken\");\r\n-const User = require(\"../models\"); // Adjust path to your User model\r\n+const User = require(\"../models/models\")\r\n \r\n // Create the upload directory if it doesn't exist\r\n const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n if (!fs.existsSync(uploadDir)) {\r\n"
                },
                {
                    "date": 1753435011518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n const multer = require(\"multer\");\r\n const jwt = require(\"jsonwebtoken\");\r\n-const User = require(\"../models/models\")\r\n+const User = require(\"../models/models\");\r\n \r\n // Create the upload directory if it doesn't exist\r\n const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n if (!fs.existsSync(uploadDir)) {\r\n@@ -37,11 +37,15 @@\n // Upload controller\r\n exports.uploadFile = async (req, res) => {\r\n   upload(req, res, async function (err) {\r\n     if (err instanceof multer.MulterError) {\r\n-      return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n+      return res\r\n+        .status(400)\r\n+        .json({ message: \"Multer error\", error: err.message });\r\n     } else if (err) {\r\n-      return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n+      return res\r\n+        .status(400)\r\n+        .json({ message: \"Upload error\", error: err.message });\r\n     }\r\n     if (!req.file) {\r\n       return res.status(400).json({ message: \"No file uploaded\" });\r\n     }\r\n@@ -51,8 +55,12 @@\n       const authHeader = req.headers.authorization || \"\";\r\n       const token = authHeader.split(\" \")[1];\r\n       if (!token) return res.status(401).json({ message: \"Unauthorized\" });\r\n \r\n+      console.log(\"Authorization header:\", authHeader);\r\n+      console.log(\"Token:\", token);\r\n+      console.log(\"JWT_SECRET:\", process.env.JWT_SECRET);\r\n+\r\n       const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n       const userId = decoded.id;\r\n \r\n       // Find user in DB\r\n@@ -76,9 +84,11 @@\n             if (!user.documentRequirements.witnessTestimonies) {\r\n               user.documentRequirements.witnessTestimonies = [];\r\n             }\r\n             // Replace existing witness testimonies array for simplicity\r\n-            user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n+            user.documentRequirements.witnessTestimonies = [\r\n+              `/uploads/${req.file.filename}`,\r\n+            ];\r\n             break;\r\n           case \"idDocument\":\r\n             user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n             break;\r\n"
                },
                {
                    "date": 1753435105112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \r\n // Create the upload directory if it doesn't exist\r\n const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n if (!fs.existsSync(uploadDir)) {\r\n-  fs.mkdirSync(uploadDir);\r\n+  fs.mkdirSync(uploadDir, { recursive: true });\r\n }\r\n \r\n // Configure multer storage\r\n const storage = multer.diskStorage({\r\n@@ -27,68 +27,63 @@\n   const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n   if (allowedTypes.includes(file.mimetype)) {\r\n     cb(null, true);\r\n   } else {\r\n-    cb(new Error(\"Invalid file type.\"), false);\r\n+    cb(new multer.MulterError(\"LIMIT_UNEXPECTED_FILE\", \"Invalid file type.\"));\r\n   }\r\n };\r\n \r\n const upload = multer({ storage, fileFilter }).single(\"file\");\r\n \r\n // Upload controller\r\n-exports.uploadFile = async (req, res) => {\r\n+exports.uploadFile = (req, res) => {\r\n   upload(req, res, async function (err) {\r\n-    if (err instanceof multer.MulterError) {\r\n-      return res\r\n-        .status(400)\r\n-        .json({ message: \"Multer error\", error: err.message });\r\n-    } else if (err) {\r\n-      return res\r\n-        .status(400)\r\n-        .json({ message: \"Upload error\", error: err.message });\r\n+    if (err) {\r\n+      if (err instanceof multer.MulterError) {\r\n+        console.error(\"Multer error:\", err);\r\n+        return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n+      }\r\n+      console.error(\"Upload error:\", err);\r\n+      return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n     }\r\n+\r\n     if (!req.file) {\r\n       return res.status(400).json({ message: \"No file uploaded\" });\r\n     }\r\n \r\n     try {\r\n-      // Authenticate user from token in Authorization header\r\n       const authHeader = req.headers.authorization || \"\";\r\n       const token = authHeader.split(\" \")[1];\r\n-      if (!token) return res.status(401).json({ message: \"Unauthorized\" });\r\n \r\n+      if (!token) {\r\n+        return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n+      }\r\n+\r\n       console.log(\"Authorization header:\", authHeader);\r\n       console.log(\"Token:\", token);\r\n-      console.log(\"JWT_SECRET:\", process.env.JWT_SECRET);\r\n+      console.log(\"JWT_SECRET:\", process.env.JWT_SECRET ? \"****\" : \"NOT SET\");\r\n \r\n       const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n       const userId = decoded.id;\r\n \r\n-      // Find user in DB\r\n       const user = await User.findById(userId);\r\n-      if (!user) return res.status(404).json({ message: \"User not found\" });\r\n+      if (!user) {\r\n+        return res.status(404).json({ message: \"User not found\" });\r\n+      }\r\n \r\n-      const { label, documentType, type } = req.body; // type for profileImage\r\n+      const { label, documentType, type } = req.body;\r\n \r\n-      // If uploading profile image\r\n       if (type === \"profileImage\") {\r\n         user.profileImage = `/uploads/${req.file.filename}`;\r\n       } else {\r\n-        // For documents: update documentRequirements field accordingly\r\n         if (!user.documentRequirements) user.documentRequirements = {};\r\n \r\n         switch (documentType) {\r\n           case \"politicalDeclaration\":\r\n             user.documentRequirements.politicalDeclaration = `/uploads/${req.file.filename}`;\r\n             break;\r\n           case \"witnessTestimonies\":\r\n-            if (!user.documentRequirements.witnessTestimonies) {\r\n-              user.documentRequirements.witnessTestimonies = [];\r\n-            }\r\n-            // Replace existing witness testimonies array for simplicity\r\n-            user.documentRequirements.witnessTestimonies = [\r\n-              `/uploads/${req.file.filename}`,\r\n-            ];\r\n+            user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n             break;\r\n           case \"idDocument\":\r\n             user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n             break;\r\n@@ -98,15 +93,15 @@\n       }\r\n \r\n       await user.save();\r\n \r\n-      res.status(200).json({\r\n+      return res.status(200).json({\r\n         message: \"File uploaded and user data updated successfully\",\r\n         filePath: `/uploads/${req.file.filename}`,\r\n       });\r\n     } catch (error) {\r\n-      console.error(error);\r\n-      res.status(500).json({ message: \"Server error\" });\r\n+      console.error(\"Server error in uploadFile:\", error);\r\n+      return res.status(500).json({ message: \"Server error\", error: error.message });\r\n     }\r\n   });\r\n };\r\n \r\n@@ -116,15 +111,20 @@\n     const { documentType } = req.body;\r\n \r\n     const authHeader = req.headers.authorization || \"\";\r\n     const token = authHeader.split(\" \")[1];\r\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\r\n \r\n+    if (!token) {\r\n+      return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n+    }\r\n+\r\n     const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n     const userId = decoded.id;\r\n \r\n     const user = await User.findById(userId);\r\n-    if (!user) return res.status(404).json({ message: \"User not found\" });\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n \r\n     if (!user.documentRequirements) {\r\n       return res.status(400).json({ message: \"No documents to delete\" });\r\n     }\r\n@@ -144,10 +144,10 @@\n     }\r\n \r\n     await user.save();\r\n \r\n-    res.status(200).json({ message: `${documentType} deleted successfully` });\r\n+    return res.status(200).json({ message: `${documentType} deleted successfully` });\r\n   } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).json({ message: \"Server error\" });\r\n+    console.error(\"Server error in deleteDocument:\", error);\r\n+    return res.status(500).json({ message: \"Server error\", error: error.message });\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1753435244993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,15 @@\n const multer = require(\"multer\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n \r\n-// Create the upload directory if it doesn't exist\r\n+// Create upload directory if missing (with recursive true for safety)\r\n const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n if (!fs.existsSync(uploadDir)) {\r\n   fs.mkdirSync(uploadDir, { recursive: true });\r\n }\r\n \r\n-// Configure multer storage\r\n+// Multer storage config\r\n const storage = multer.diskStorage({\r\n   destination: (req, file, cb) => {\r\n     cb(null, uploadDir);\r\n   },\r\n@@ -21,9 +21,9 @@\n     cb(null, `${base}-${Date.now()}${ext}`);\r\n   },\r\n });\r\n \r\n-// Accept only specific file types\r\n+// Accept only jpeg, png, pdf\r\n const fileFilter = (req, file, cb) => {\r\n   const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n   if (allowedTypes.includes(file.mimetype)) {\r\n     cb(null, true);\r\n@@ -33,9 +33,9 @@\n };\r\n \r\n const upload = multer({ storage, fileFilter }).single(\"file\");\r\n \r\n-// Upload controller\r\n+// Upload file controller\r\n exports.uploadFile = (req, res) => {\r\n   upload(req, res, async function (err) {\r\n     if (err) {\r\n       if (err instanceof multer.MulterError) {\r\n@@ -57,8 +57,9 @@\n       if (!token) {\r\n         return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n       }\r\n \r\n+      // Do not log actual JWT_SECRET, just indicate if set or not\r\n       console.log(\"Authorization header:\", authHeader);\r\n       console.log(\"Token:\", token);\r\n       console.log(\"JWT_SECRET:\", process.env.JWT_SECRET ? \"****\" : \"NOT SET\");\r\n \r\n"
                },
                {
                    "date": 1753436111147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,10 @@\n       const user = await User.findById(userId);\r\n       if (!user) {\r\n         return res.status(404).json({ message: \"User not found\" });\r\n       }\r\n-\r\n+       console.log(\"User before save:\", user);\r\n+       \r\n       const { label, documentType, type } = req.body;\r\n \r\n       if (type === \"profileImage\") {\r\n         user.profileImage = `/uploads/${req.file.filename}`;\r\n"
                },
                {
                    "date": 1753442270661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+const path = require(\"path\");\r\n+const fs = require(\"fs\");\r\n+const multer = require(\"multer\");\r\n+const jwt = require(\"jsonwebtoken\");\r\n+const User = require(\"../models/models\");\r\n+\r\n+const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n+if (!fs.existsSync(uploadDir)) {\r\n+  fs.mkdirSync(uploadDir, { recursive: true });\r\n+}\r\n+\r\n+const storage = multer.diskStorage({\r\n+  destination: (req, file, cb) => {\r\n+    cb(null, uploadDir);\r\n+  },\r\n+  filename: (req, file, cb) => {\r\n+    const ext = path.extname(file.originalname);\r\n+    const base = path.basename(file.originalname, ext);\r\n+    cb(null, `${base}-${Date.now()}${ext}`);\r\n+  },\r\n+});\r\n+\r\n+const fileFilter = (req, file, cb) => {\r\n+  const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n+  if (allowedTypes.includes(file.mimetype)) {\r\n+    cb(null, true);\r\n+  } else {\r\n+    cb(new multer.MulterError(\"LIMIT_UNEXPECTED_FILE\", \"Invalid file type.\"));\r\n+  }\r\n+};\r\n+\r\n+const upload = multer({ storage, fileFilter }).single(\"file\");\r\n+\r\n+exports.uploadFile = (req, res) => {\r\n+  upload(req, res, async (err) => {\r\n+    if (err) {\r\n+      if (err instanceof multer.MulterError) {\r\n+        return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n+      }\r\n+      return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n+    }\r\n+\r\n+    if (!req.file) {\r\n+      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    }\r\n+\r\n+    try {\r\n+      const authHeader = req.headers.authorization || \"\";\r\n+      const token = authHeader.split(\" \")[1];\r\n+      if (!token) return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n+\r\n+      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+      const userId = decoded.id;\r\n+\r\n+      const user = await User.findById(userId);\r\n+      if (!user) return res.status(404).json({ message: \"User not found\" });\r\n+\r\n+      const { label, documentType, type } = req.body;\r\n+\r\n+      if (type === \"profileImage\") {\r\n+        user.profileImage = `/uploads/${req.file.filename}`;\r\n+      } else {\r\n+        if (!user.documentRequirements) user.documentRequirements = {};\r\n+\r\n+        switch (documentType) {\r\n+          case \"politicalDeclaration\":\r\n+            user.documentRequirements.politicalDeclaration = `/uploads/${req.file.filename}`;\r\n+            break;\r\n+          case \"witnessTestimonies\":\r\n+            user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n+            break;\r\n+          case \"idDocument\":\r\n+            user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n+            break;\r\n+          default:\r\n+            return res.status(400).json({ message: \"Invalid document type\" });\r\n+        }\r\n+      }\r\n+\r\n+      await user.save();\r\n+\r\n+      res.status(200).json({\r\n+        message: \"File uploaded and user data updated successfully\",\r\n+        filePath: `/uploads/${req.file.filename}`,\r\n+      });\r\n+    } catch (error) {\r\n+      console.error(\"Server error in uploadFile:\", error);\r\n+      res.status(500).json({ message: \"Server error\", error: error.message });\r\n+    }\r\n+  });\r\n+};\r\n+\r\n+exports.deleteDocument = async (req, res) => {\r\n+  try {\r\n+    const { documentType } = req.body;\r\n+\r\n+    const authHeader = req.headers.authorization || \"\";\r\n+    const token = authHeader.split(\" \")[1];\r\n+    if (!token) return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n+\r\n+    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+    const userId = decoded.id;\r\n+\r\n+    const user = await User.findById(userId);\r\n+    if (!user) return res.status(404).json({ message: \"User not found\" });\r\n+\r\n+    if (!user.documentRequirements) return res.status(400).json({ message: \"No documents to delete\" });\r\n+\r\n+    switch (documentType) {\r\n+      case \"politicalDeclaration\":\r\n+        user.documentRequirements.politicalDeclaration = undefined;\r\n+        break;\r\n+      case \"witnessTestimonies\":\r\n+        user.documentRequirements.witnessTestimonies = [];\r\n+        break;\r\n+      case \"idDocument\":\r\n+        user.documentRequirements.idDocumentFile = undefined;\r\n+        break;\r\n+      default:\r\n+        return res.status(400).json({ message: \"Invalid document type\" });\r\n+    }\r\n+\r\n+    await user.save();\r\n+\r\n+    res.status(200).json({ message: `${documentType} deleted successfully` });\r\n+  } catch (error) {\r\n+    console.error(\"Server error in deleteDocument:\", error);\r\n+    res.status(500).json({ message: \"Server error\", error: error.message });\r\n+  }\r\n+};\r\n+\r\n+// List users with all docs completed (public view)\r\n+exports.publicView = async (req, res) => {\r\n+  try {\r\n+    // Find users with all three required documents uploaded (non-null/non-empty)\r\n+    const users = await User.find({\r\n+      $and: [\r\n+        { \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null } },\r\n+        { \"documentRequirements.witnessTestimonies.0\": { $exists: true } },\r\n+        { \"documentRequirements.idDocumentFile\": { $exists: true, $ne: null } },\r\n+      ],\r\n+    }).select(\"fullNames familyName\");\r\n+\r\n+    res.json(users);\r\n+  } catch (error) {\r\n+    console.error(\"Error in publicView:\", error);\r\n+    res.status(500).json({ message: \"Server error\", error: error.message });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1753442396222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n+const multer = require(\"multer\");\r\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n-const multer = require(\"multer\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n \r\n const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n@@ -19,25 +19,14 @@\n     cb(null, `${base}-${Date.now()}${ext}`);\r\n   },\r\n });\r\n \r\n-const fileFilter = (req, file, cb) => {\r\n-  const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n-  if (allowedTypes.includes(file.mimetype)) {\r\n-    cb(null, true);\r\n-  } else {\r\n-    cb(new multer.MulterError(\"LIMIT_UNEXPECTED_FILE\", \"Invalid file type.\"));\r\n-  }\r\n-};\r\n+// Remove fileFilter to allow any file type\r\n+const upload = multer({ storage }).single(\"file\");\r\n \r\n-const upload = multer({ storage, fileFilter }).single(\"file\");\r\n-\r\n exports.uploadFile = (req, res) => {\r\n   upload(req, res, async (err) => {\r\n     if (err) {\r\n-      if (err instanceof multer.MulterError) {\r\n-        return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n-      }\r\n       return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n     }\r\n \r\n     if (!req.file) {\r\n@@ -66,8 +55,9 @@\n           case \"politicalDeclaration\":\r\n             user.documentRequirements.politicalDeclaration = `/uploads/${req.file.filename}`;\r\n             break;\r\n           case \"witnessTestimonies\":\r\n+            // Store array; push new or replace?\r\n             user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n             break;\r\n           case \"idDocument\":\r\n             user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n@@ -88,217 +78,4 @@\n       res.status(500).json({ message: \"Server error\", error: error.message });\r\n     }\r\n   });\r\n };\r\n-\r\n-exports.deleteDocument = async (req, res) => {\r\n-  try {\r\n-    const { documentType } = req.body;\r\n-\r\n-    const authHeader = req.headers.authorization || \"\";\r\n-    const token = authHeader.split(\" \")[1];\r\n-    if (!token) return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n-\r\n-    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-    const userId = decoded.id;\r\n-\r\n-    const user = await User.findById(userId);\r\n-    if (!user) return res.status(404).json({ message: \"User not found\" });\r\n-\r\n-    if (!user.documentRequirements) return res.status(400).json({ message: \"No documents to delete\" });\r\n-\r\n-    switch (documentType) {\r\n-      case \"politicalDeclaration\":\r\n-        user.documentRequirements.politicalDeclaration = undefined;\r\n-        break;\r\n-      case \"witnessTestimonies\":\r\n-        user.documentRequirements.witnessTestimonies = [];\r\n-        break;\r\n-      case \"idDocument\":\r\n-        user.documentRequirements.idDocumentFile = undefined;\r\n-        break;\r\n-      default:\r\n-        return res.status(400).json({ message: \"Invalid document type\" });\r\n-    }\r\n-\r\n-    await user.save();\r\n-\r\n-    res.status(200).json({ message: `${documentType} deleted successfully` });\r\n-  } catch (error) {\r\n-    console.error(\"Server error in deleteDocument:\", error);\r\n-    res.status(500).json({ message: \"Server error\", error: error.message });\r\n-  }\r\n-};\r\n-\r\n-// List users with all docs completed (public view)\r\n-exports.publicView = async (req, res) => {\r\n-  try {\r\n-    // Find users with all three required documents uploaded (non-null/non-empty)\r\n-    const users = await User.find({\r\n-      $and: [\r\n-        { \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null } },\r\n-        { \"documentRequirements.witnessTestimonies.0\": { $exists: true } },\r\n-        { \"documentRequirements.idDocumentFile\": { $exists: true, $ne: null } },\r\n-      ],\r\n-    }).select(\"fullNames familyName\");\r\n-\r\n-    res.json(users);\r\n-  } catch (error) {\r\n-    console.error(\"Error in publicView:\", error);\r\n-    res.status(500).json({ message: \"Server error\", error: error.message });\r\n-  }\r\n-};\r\n-const path = require(\"path\");\r\n-const fs = require(\"fs\");\r\n-const multer = require(\"multer\");\r\n-const jwt = require(\"jsonwebtoken\");\r\n-const User = require(\"../models/models\");\r\n-\r\n-// Create upload directory if missing (with recursive true for safety)\r\n-const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n-if (!fs.existsSync(uploadDir)) {\r\n-  fs.mkdirSync(uploadDir, { recursive: true });\r\n-}\r\n-\r\n-// Multer storage config\r\n-const storage = multer.diskStorage({\r\n-  destination: (req, file, cb) => {\r\n-    cb(null, uploadDir);\r\n-  },\r\n-  filename: (req, file, cb) => {\r\n-    const ext = path.extname(file.originalname);\r\n-    const base = path.basename(file.originalname, ext);\r\n-    cb(null, `${base}-${Date.now()}${ext}`);\r\n-  },\r\n-});\r\n-\r\n-// Accept only jpeg, png, pdf\r\n-const fileFilter = (req, file, cb) => {\r\n-  const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n-  if (allowedTypes.includes(file.mimetype)) {\r\n-    cb(null, true);\r\n-  } else {\r\n-    cb(new multer.MulterError(\"LIMIT_UNEXPECTED_FILE\", \"Invalid file type.\"));\r\n-  }\r\n-};\r\n-\r\n-const upload = multer({ storage, fileFilter }).single(\"file\");\r\n-\r\n-// Upload file controller\r\n-exports.uploadFile = (req, res) => {\r\n-  upload(req, res, async function (err) {\r\n-    if (err) {\r\n-      if (err instanceof multer.MulterError) {\r\n-        console.error(\"Multer error:\", err);\r\n-        return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n-      }\r\n-      console.error(\"Upload error:\", err);\r\n-      return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n-    }\r\n-\r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"No file uploaded\" });\r\n-    }\r\n-\r\n-    try {\r\n-      const authHeader = req.headers.authorization || \"\";\r\n-      const token = authHeader.split(\" \")[1];\r\n-\r\n-      if (!token) {\r\n-        return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n-      }\r\n-\r\n-      // Do not log actual JWT_SECRET, just indicate if set or not\r\n-      console.log(\"Authorization header:\", authHeader);\r\n-      console.log(\"Token:\", token);\r\n-      console.log(\"JWT_SECRET:\", process.env.JWT_SECRET ? \"****\" : \"NOT SET\");\r\n-\r\n-      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-      const userId = decoded.id;\r\n-\r\n-      const user = await User.findById(userId);\r\n-      if (!user) {\r\n-        return res.status(404).json({ message: \"User not found\" });\r\n-      }\r\n-       console.log(\"User before save:\", user);\r\n-       \r\n-      const { label, documentType, type } = req.body;\r\n-\r\n-      if (type === \"profileImage\") {\r\n-        user.profileImage = `/uploads/${req.file.filename}`;\r\n-      } else {\r\n-        if (!user.documentRequirements) user.documentRequirements = {};\r\n-\r\n-        switch (documentType) {\r\n-          case \"politicalDeclaration\":\r\n-            user.documentRequirements.politicalDeclaration = `/uploads/${req.file.filename}`;\r\n-            break;\r\n-          case \"witnessTestimonies\":\r\n-            user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n-            break;\r\n-          case \"idDocument\":\r\n-            user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n-            break;\r\n-          default:\r\n-            return res.status(400).json({ message: \"Invalid document type\" });\r\n-        }\r\n-      }\r\n-\r\n-      await user.save();\r\n-\r\n-      return res.status(200).json({\r\n-        message: \"File uploaded and user data updated successfully\",\r\n-        filePath: `/uploads/${req.file.filename}`,\r\n-      });\r\n-    } catch (error) {\r\n-      console.error(\"Server error in uploadFile:\", error);\r\n-      return res.status(500).json({ message: \"Server error\", error: error.message });\r\n-    }\r\n-  });\r\n-};\r\n-\r\n-// Delete document controller\r\n-exports.deleteDocument = async (req, res) => {\r\n-  try {\r\n-    const { documentType } = req.body;\r\n-\r\n-    const authHeader = req.headers.authorization || \"\";\r\n-    const token = authHeader.split(\" \")[1];\r\n-\r\n-    if (!token) {\r\n-      return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n-    }\r\n-\r\n-    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-    const userId = decoded.id;\r\n-\r\n-    const user = await User.findById(userId);\r\n-    if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n-    }\r\n-\r\n-    if (!user.documentRequirements) {\r\n-      return res.status(400).json({ message: \"No documents to delete\" });\r\n-    }\r\n-\r\n-    switch (documentType) {\r\n-      case \"politicalDeclaration\":\r\n-        user.documentRequirements.politicalDeclaration = undefined;\r\n-        break;\r\n-      case \"witnessTestimonies\":\r\n-        user.documentRequirements.witnessTestimonies = [];\r\n-        break;\r\n-      case \"idDocument\":\r\n-        user.documentRequirements.idDocumentFile = undefined;\r\n-        break;\r\n-      default:\r\n-        return res.status(400).json({ message: \"Invalid document type\" });\r\n-    }\r\n-\r\n-    await user.save();\r\n-\r\n-    return res.status(200).json({ message: `${documentType} deleted successfully` });\r\n-  } catch (error) {\r\n-    console.error(\"Server error in deleteDocument:\", error);\r\n-    return res.status(500).json({ message: \"Server error\", error: error.message });\r\n-  }\r\n-};\r\n"
                },
                {
                    "date": 1753442452767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-const multer = require(\"multer\");\r\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n+const multer = require(\"multer\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n \r\n const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n@@ -19,14 +19,17 @@\n     cb(null, `${base}-${Date.now()}${ext}`);\r\n   },\r\n });\r\n \r\n-// Remove fileFilter to allow any file type\r\n+// No fileFilter to allow any file type\r\n const upload = multer({ storage }).single(\"file\");\r\n \r\n exports.uploadFile = (req, res) => {\r\n   upload(req, res, async (err) => {\r\n     if (err) {\r\n+      if (err instanceof multer.MulterError) {\r\n+        return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n+      }\r\n       return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n     }\r\n \r\n     if (!req.file) {\r\n@@ -55,9 +58,8 @@\n           case \"politicalDeclaration\":\r\n             user.documentRequirements.politicalDeclaration = `/uploads/${req.file.filename}`;\r\n             break;\r\n           case \"witnessTestimonies\":\r\n-            // Store array; push new or replace?\r\n             user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n             break;\r\n           case \"idDocument\":\r\n             user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n@@ -78,4 +80,61 @@\n       res.status(500).json({ message: \"Server error\", error: error.message });\r\n     }\r\n   });\r\n };\r\n+\r\n+exports.deleteDocument = async (req, res) => {\r\n+  try {\r\n+    const { documentType } = req.body;\r\n+\r\n+    const authHeader = req.headers.authorization || \"\";\r\n+    const token = authHeader.split(\" \")[1];\r\n+    if (!token) return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n+\r\n+    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+    const userId = decoded.id;\r\n+\r\n+    const user = await User.findById(userId);\r\n+    if (!user) return res.status(404).json({ message: \"User not found\" });\r\n+\r\n+    if (!user.documentRequirements) return res.status(400).json({ message: \"No documents to delete\" });\r\n+\r\n+    switch (documentType) {\r\n+      case \"politicalDeclaration\":\r\n+        user.documentRequirements.politicalDeclaration = undefined;\r\n+        break;\r\n+      case \"witnessTestimonies\":\r\n+        user.documentRequirements.witnessTestimonies = [];\r\n+        break;\r\n+      case \"idDocument\":\r\n+        user.documentRequirements.idDocumentFile = undefined;\r\n+        break;\r\n+      default:\r\n+        return res.status(400).json({ message: \"Invalid document type\" });\r\n+    }\r\n+\r\n+    await user.save();\r\n+\r\n+    res.status(200).json({ message: `${documentType} deleted successfully` });\r\n+  } catch (error) {\r\n+    console.error(\"Server error in deleteDocument:\", error);\r\n+    res.status(500).json({ message: \"Server error\", error: error.message });\r\n+  }\r\n+};\r\n+\r\n+// List users with all required documents completed (public view)\r\n+exports.publicView = async (req, res) => {\r\n+  try {\r\n+    const users = await User.find({\r\n+      $and: [\r\n+        { \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null } },\r\n+        { \"documentRequirements.witnessTestimonies.0\": { $exists: true } },\r\n+        { \"documentRequirements.idDocumentFile\": { $exists: true, $ne: null } },\r\n+      ],\r\n+    }).select(\"fullNames familyName\");\r\n+\r\n+    res.json(users);\r\n+  } catch (error) {\r\n+    console.error(\"Error in publicView:\", error);\r\n+    res.status(500).json({ message: \"Server error\", error: error.message });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1753451876148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,62 +22,53 @@\n \r\n // No fileFilter to allow any file type\r\n const upload = multer({ storage }).single(\"file\");\r\n \r\n+// Modify the uploadFile function to handle multiple files\r\n exports.uploadFile = (req, res) => {\r\n   upload(req, res, async (err) => {\r\n     if (err) {\r\n-      if (err instanceof multer.MulterError) {\r\n-        return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n-      }\r\n       return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n     }\r\n \r\n     if (!req.file) {\r\n       return res.status(400).json({ message: \"No file uploaded\" });\r\n     }\r\n \r\n     try {\r\n-      const authHeader = req.headers.authorization || \"\";\r\n-      const token = authHeader.split(\" \")[1];\r\n-      if (!token) return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n+      const token = req.headers.authorization?.split(\" \")[1];\r\n+      if (!token) return res.status(401).json({ message: \"Unauthorized\" });\r\n \r\n       const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n       const userId = decoded.id;\r\n \r\n       const user = await User.findById(userId);\r\n       if (!user) return res.status(404).json({ message: \"User not found\" });\r\n \r\n-      const { label, documentType, type } = req.body;\r\n+      const { documentType } = req.body;\r\n \r\n-      if (type === \"profileImage\") {\r\n-        user.profileImage = `/uploads/${req.file.filename}`;\r\n-      } else {\r\n-        if (!user.documentRequirements) user.documentRequirements = {};\r\n+      // Initialize documentRequirements if it doesn't exist\r\n+      if (!user.documentRequirements) {\r\n+        user.documentRequirements = {};\r\n+      }\r\n \r\n-        switch (documentType) {\r\n-          case \"politicalDeclaration\":\r\n-            user.documentRequirements.politicalDeclaration = `/uploads/${req.file.filename}`;\r\n-            break;\r\n-          case \"witnessTestimonies\":\r\n-            user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n-            break;\r\n-          case \"idDocument\":\r\n-            user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n-            break;\r\n-          default:\r\n-            return res.status(400).json({ message: \"Invalid document type\" });\r\n-        }\r\n+      // Initialize the array for the document type if it doesn't exist\r\n+      if (!user.documentRequirements[documentType]) {\r\n+        user.documentRequirements[documentType] = [];\r\n       }\r\n \r\n+      // Add the new file to the appropriate array\r\n+      user.documentRequirements[documentType].push(`/uploads/${req.file.filename}`);\r\n+\r\n       await user.save();\r\n \r\n       res.status(200).json({\r\n-        message: \"File uploaded and user data updated successfully\",\r\n+        message: \"File uploaded successfully\",\r\n         filePath: `/uploads/${req.file.filename}`,\r\n+        documentType,\r\n       });\r\n     } catch (error) {\r\n-      console.error(\"Server error in uploadFile:\", error);\r\n+      console.error(\"Server error:\", error);\r\n       res.status(500).json({ message: \"Server error\", error: error.message });\r\n     }\r\n   });\r\n };\r\n"
                },
                {
                    "date": 1753453223705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,56 +19,73 @@\n     cb(null, `${base}-${Date.now()}${ext}`);\r\n   },\r\n });\r\n \r\n-// No fileFilter to allow any file type\r\n-const upload = multer({ storage }).single(\"file\");\r\n+const fileFilter = (req, file, cb) => {\r\n+  const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n+  if (allowedTypes.includes(file.mimetype)) {\r\n+    cb(null, true);\r\n+  } else {\r\n+    cb(new multer.MulterError(\"LIMIT_UNEXPECTED_FILE\", \"Invalid file type.\"));\r\n+  }\r\n+};\r\n \r\n-// Modify the uploadFile function to handle multiple files\r\n+const upload = multer({ storage, fileFilter }).single(\"file\");\r\n+\r\n exports.uploadFile = (req, res) => {\r\n   upload(req, res, async (err) => {\r\n     if (err) {\r\n+      if (err instanceof multer.MulterError) {\r\n+        return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n+      }\r\n       return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n     }\r\n \r\n     if (!req.file) {\r\n       return res.status(400).json({ message: \"No file uploaded\" });\r\n     }\r\n \r\n     try {\r\n-      const token = req.headers.authorization?.split(\" \")[1];\r\n-      if (!token) return res.status(401).json({ message: \"Unauthorized\" });\r\n+      const authHeader = req.headers.authorization || \"\";\r\n+      const token = authHeader.split(\" \")[1];\r\n+      if (!token) return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n \r\n       const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n       const userId = decoded.id;\r\n \r\n       const user = await User.findById(userId);\r\n       if (!user) return res.status(404).json({ message: \"User not found\" });\r\n \r\n-      const { documentType } = req.body;\r\n+      const { label, documentType, type } = req.body;\r\n \r\n-      // Initialize documentRequirements if it doesn't exist\r\n-      if (!user.documentRequirements) {\r\n-        user.documentRequirements = {};\r\n-      }\r\n+      if (type === \"profileImage\") {\r\n+        user.profileImage = `/uploads/${req.file.filename}`;\r\n+      } else {\r\n+        if (!user.documentRequirements) user.documentRequirements = {};\r\n \r\n-      // Initialize the array for the document type if it doesn't exist\r\n-      if (!user.documentRequirements[documentType]) {\r\n-        user.documentRequirements[documentType] = [];\r\n+        switch (documentType) {\r\n+          case \"politicalDeclaration\":\r\n+            user.documentRequirements.politicalDeclaration = `/uploads/${req.file.filename}`;\r\n+            break;\r\n+          case \"witnessTestimonies\":\r\n+            user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n+            break;\r\n+          case \"idDocument\":\r\n+            user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n+            break;\r\n+          default:\r\n+            return res.status(400).json({ message: \"Invalid document type\" });\r\n+        }\r\n       }\r\n \r\n-      // Add the new file to the appropriate array\r\n-      user.documentRequirements[documentType].push(`/uploads/${req.file.filename}`);\r\n-\r\n       await user.save();\r\n \r\n       res.status(200).json({\r\n-        message: \"File uploaded successfully\",\r\n+        message: \"File uploaded and user data updated successfully\",\r\n         filePath: `/uploads/${req.file.filename}`,\r\n-        documentType,\r\n       });\r\n     } catch (error) {\r\n-      console.error(\"Server error:\", error);\r\n+      console.error(\"Server error in uploadFile:\", error);\r\n       res.status(500).json({ message: \"Server error\", error: error.message });\r\n     }\r\n   });\r\n };\r\n@@ -111,11 +128,12 @@\n     res.status(500).json({ message: \"Server error\", error: error.message });\r\n   }\r\n };\r\n \r\n-// List users with all required documents completed (public view)\r\n+// List users with all docs completed (public view)\r\n exports.publicView = async (req, res) => {\r\n   try {\r\n+    // Find users with all three required documents uploaded (non-null/non-empty)\r\n     const users = await User.find({\r\n       $and: [\r\n         { \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null } },\r\n         { \"documentRequirements.witnessTestimonies.0\": { $exists: true } },\r\n"
                },
                {
                    "date": 1753453628901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const path = require(\"path\");\r\n+ const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n const multer = require(\"multer\");\r\n const jwt = require(\"jsonwebtoken\");\r\n const User = require(\"../models/models\");\r\n@@ -19,19 +19,11 @@\n     cb(null, `${base}-${Date.now()}${ext}`);\r\n   },\r\n });\r\n \r\n-const fileFilter = (req, file, cb) => {\r\n-  const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n-  if (allowedTypes.includes(file.mimetype)) {\r\n-    cb(null, true);\r\n-  } else {\r\n-    cb(new multer.MulterError(\"LIMIT_UNEXPECTED_FILE\", \"Invalid file type.\"));\r\n-  }\r\n-};\r\n+// No fileFilter to allow any file type\r\n+const upload = multer({ storage }).single(\"file\");\r\n \r\n-const upload = multer({ storage, fileFilter }).single(\"file\");\r\n-\r\n exports.uploadFile = (req, res) => {\r\n   upload(req, res, async (err) => {\r\n     if (err) {\r\n       if (err instanceof multer.MulterError) {\r\n@@ -128,12 +120,11 @@\n     res.status(500).json({ message: \"Server error\", error: error.message });\r\n   }\r\n };\r\n \r\n-// List users with all docs completed (public view)\r\n+// List users with all required documents completed (public view)\r\n exports.publicView = async (req, res) => {\r\n   try {\r\n-    // Find users with all three required documents uploaded (non-null/non-empty)\r\n     const users = await User.find({\r\n       $and: [\r\n         { \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null } },\r\n         { \"documentRequirements.witnessTestimonies.0\": { $exists: true } },\r\n@@ -145,5 +136,5 @@\n   } catch (error) {\r\n     console.error(\"Error in publicView:\", error);\r\n     res.status(500).json({ message: \"Server error\", error: error.message });\r\n   }\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753453986347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,140 +1,56 @@\n- const path = require(\"path\");\r\n+// controllers/homeController.js\r\n+const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n const multer = require(\"multer\");\r\n-const jwt = require(\"jsonwebtoken\");\r\n-const User = require(\"../models/models\");\r\n \r\n+// Create the upload directory if it doesn't exist\r\n const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n if (!fs.existsSync(uploadDir)) {\r\n-  fs.mkdirSync(uploadDir, { recursive: true });\r\n+  fs.mkdirSync(uploadDir);\r\n }\r\n \r\n+// Configure multer storage\r\n const storage = multer.diskStorage({\r\n   destination: (req, file, cb) => {\r\n     cb(null, uploadDir);\r\n   },\r\n   filename: (req, file, cb) => {\r\n+    // Append date to avoid filename conflicts\r\n     const ext = path.extname(file.originalname);\r\n     const base = path.basename(file.originalname, ext);\r\n     cb(null, `${base}-${Date.now()}${ext}`);\r\n   },\r\n });\r\n \r\n-// No fileFilter to allow any file type\r\n-const upload = multer({ storage }).single(\"file\");\r\n+// Accept only specific file types (optional)\r\n+const fileFilter = (req, file, cb) => {\r\n+  // Allow images, PDFs, or any files you choose\r\n+  const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n+  if (allowedTypes.includes(file.mimetype)) {\r\n+    cb(null, true);\r\n+  } else {\r\n+    cb(new Error(\"Invalid file type.\"), false);\r\n+  }\r\n+};\r\n \r\n+const upload = multer({ storage, fileFilter }).single(\"file\");\r\n+\r\n+// 📤 Upload controller\r\n exports.uploadFile = (req, res) => {\r\n-  upload(req, res, async (err) => {\r\n-    if (err) {\r\n-      if (err instanceof multer.MulterError) {\r\n-        return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n-      }\r\n+  upload(req, res, function (err) {\r\n+    if (err instanceof multer.MulterError) {\r\n+      return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n+    } else if (err) {\r\n       return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n     }\r\n \r\n     if (!req.file) {\r\n       return res.status(400).json({ message: \"No file uploaded\" });\r\n     }\r\n \r\n-    try {\r\n-      const authHeader = req.headers.authorization || \"\";\r\n-      const token = authHeader.split(\" \")[1];\r\n-      if (!token) return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n-\r\n-      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-      const userId = decoded.id;\r\n-\r\n-      const user = await User.findById(userId);\r\n-      if (!user) return res.status(404).json({ message: \"User not found\" });\r\n-\r\n-      const { label, documentType, type } = req.body;\r\n-\r\n-      if (type === \"profileImage\") {\r\n-        user.profileImage = `/uploads/${req.file.filename}`;\r\n-      } else {\r\n-        if (!user.documentRequirements) user.documentRequirements = {};\r\n-\r\n-        switch (documentType) {\r\n-          case \"politicalDeclaration\":\r\n-            user.documentRequirements.politicalDeclaration = `/uploads/${req.file.filename}`;\r\n-            break;\r\n-          case \"witnessTestimonies\":\r\n-            user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n-            break;\r\n-          case \"idDocument\":\r\n-            user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n-            break;\r\n-          default:\r\n-            return res.status(400).json({ message: \"Invalid document type\" });\r\n-        }\r\n-      }\r\n-\r\n-      await user.save();\r\n-\r\n-      res.status(200).json({\r\n-        message: \"File uploaded and user data updated successfully\",\r\n-        filePath: `/uploads/${req.file.filename}`,\r\n-      });\r\n-    } catch (error) {\r\n-      console.error(\"Server error in uploadFile:\", error);\r\n-      res.status(500).json({ message: \"Server error\", error: error.message });\r\n-    }\r\n+    res.status(200).json({\r\n+      message: \"File uploaded successfully\",\r\n+      filePath: `/uploads/${req.file.filename}`,\r\n+    });\r\n   });\r\n };\r\n-\r\n-exports.deleteDocument = async (req, res) => {\r\n-  try {\r\n-    const { documentType } = req.body;\r\n-\r\n-    const authHeader = req.headers.authorization || \"\";\r\n-    const token = authHeader.split(\" \")[1];\r\n-    if (!token) return res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n-\r\n-    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-    const userId = decoded.id;\r\n-\r\n-    const user = await User.findById(userId);\r\n-    if (!user) return res.status(404).json({ message: \"User not found\" });\r\n-\r\n-    if (!user.documentRequirements) return res.status(400).json({ message: \"No documents to delete\" });\r\n-\r\n-    switch (documentType) {\r\n-      case \"politicalDeclaration\":\r\n-        user.documentRequirements.politicalDeclaration = undefined;\r\n-        break;\r\n-      case \"witnessTestimonies\":\r\n-        user.documentRequirements.witnessTestimonies = [];\r\n-        break;\r\n-      case \"idDocument\":\r\n-        user.documentRequirements.idDocumentFile = undefined;\r\n-        break;\r\n-      default:\r\n-        return res.status(400).json({ message: \"Invalid document type\" });\r\n-    }\r\n\\ No newline at end of file\n-\r\n-    await user.save();\r\n-\r\n-    res.status(200).json({ message: `${documentType} deleted successfully` });\r\n-  } catch (error) {\r\n-    console.error(\"Server error in deleteDocument:\", error);\r\n-    res.status(500).json({ message: \"Server error\", error: error.message });\r\n-  }\r\n-};\r\n-\r\n-// List users with all required documents completed (public view)\r\n-exports.publicView = async (req, res) => {\r\n-  try {\r\n-    const users = await User.find({\r\n-      $and: [\r\n-        { \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null } },\r\n-        { \"documentRequirements.witnessTestimonies.0\": { $exists: true } },\r\n-        { \"documentRequirements.idDocumentFile\": { $exists: true, $ne: null } },\r\n-      ],\r\n-    }).select(\"fullNames familyName\");\r\n-\r\n-    res.json(users);\r\n-  } catch (error) {\r\n-    console.error(\"Error in publicView:\", error);\r\n-    res.status(500).json({ message: \"Server error\", error: error.message });\r\n-  }\r\n-};\n"
                },
                {
                    "date": 1753459261317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,56 +1,132 @@\n-// controllers/homeController.js\r\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n const multer = require(\"multer\");\r\n+const User = require(\"../models/models\");\r\n \r\n-// Create the upload directory if it doesn't exist\r\n-const uploadDir = path.join(__dirname, \"..\", \"uploads\");\r\n-if (!fs.existsSync(uploadDir)) {\r\n-  fs.mkdirSync(uploadDir);\r\n-}\r\n-\r\n-// Configure multer storage\r\n+// Configure storage for multiple files\r\n const storage = multer.diskStorage({\r\n   destination: (req, file, cb) => {\r\n-    cb(null, uploadDir);\r\n+    const userDir = path.join(uploadDir, req.user.id);\r\n+    if (!fs.existsSync(userDir)) {\r\n+      fs.mkdirSync(userDir, { recursive: true });\r\n+    }\r\n+    cb(null, userDir);\r\n   },\r\n   filename: (req, file, cb) => {\r\n-    // Append date to avoid filename conflicts\r\n     const ext = path.extname(file.originalname);\r\n     const base = path.basename(file.originalname, ext);\r\n     cb(null, `${base}-${Date.now()}${ext}`);\r\n-  },\r\n+  }\r\n });\r\n \r\n-// Accept only specific file types (optional)\r\n-const fileFilter = (req, file, cb) => {\r\n-  // Allow images, PDFs, or any files you choose\r\n-  const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n-  if (allowedTypes.includes(file.mimetype)) {\r\n-    cb(null, true);\r\n-  } else {\r\n-    cb(new Error(\"Invalid file type.\"), false);\r\n+const upload = multer({\r\n+  storage,\r\n+  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB per file\r\n+  fileFilter: (req, file, cb) => {\r\n+    const allowedTypes = [\r\n+      \"image/jpeg\", \"image/png\", \"application/pdf\",\r\n+      \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n+    ];\r\n+    allowedTypes.includes(file.mimetype) ? cb(null, true) : cb(new Error(\"Invalid file type\"));\r\n   }\r\n+}).array(\"files\", 20); // Allow up to 20 files\r\n+\r\n+exports.uploadFile = async (req, res) => {\r\n+  upload(req, res, async (err) => {\r\n+    if (err) {\r\n+      return res.status(400).json({ \r\n+        message: err instanceof multer.MulterError ? \r\n+          \"File upload error\" : \"Invalid file type\",\r\n+        error: err.message \r\n+      });\r\n+    }\r\n+\r\n+    if (!req.files || req.files.length === 0) {\r\n+      return res.status(400).json({ message: \"No files uploaded\" });\r\n+    }\r\n+\r\n+    try {\r\n+      const { label, documentType } = req.body;\r\n+      const filePaths = req.files.map(file => `/uploads/${req.user.id}/${file.filename}`);\r\n+\r\n+      // Update user document requirements\r\n+      const update = {};\r\n+      if (documentType === \"politicalDeclaration\") {\r\n+        update[\"documentRequirements.politicalDeclaration\"] = filePaths[0];\r\n+      } else if (documentType === \"witnessTestimonies\") {\r\n+        update.$push = { \"documentRequirements.witnessTestimonies\": { $each: filePaths } };\r\n+      } else if (documentType === \"idDocument\") {\r\n+        update[\"documentRequirements.idDocumentFile\"] = filePaths[0];\r\n+      }\r\n+\r\n+      await User.findByIdAndUpdate(req.user.id, update);\r\n+\r\n+      res.status(200).json({ \r\n+        message: \"Files uploaded successfully\",\r\n+        filePaths \r\n+      });\r\n+    } catch (error) {\r\n+      console.error(\"Upload error:\", error);\r\n+      res.status(500).json({ message: \"Server error during file processing\" });\r\n+    }\r\n+  });\r\n };\r\n \r\n-const upload = multer({ storage, fileFilter }).single(\"file\");\r\n+exports.deleteDocument = async (req, res) => {\r\n+  try {\r\n+    const { documentType } = req.body;\r\n+    const user = await User.findById(req.user.id);\r\n \r\n-// 📤 Upload controller\r\n-exports.uploadFile = (req, res) => {\r\n-  upload(req, res, function (err) {\r\n-    if (err instanceof multer.MulterError) {\r\n-      return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n-    } else if (err) {\r\n-      return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n \r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"No file uploaded\" });\r\n+    // Remove files from storage\r\n+    const removeFiles = async (paths) => {\r\n+      if (!paths) return;\r\n+      const pathsArray = Array.isArray(paths) ? paths : [paths];\r\n+      for (const filePath of pathsArray) {\r\n+        if (filePath) {\r\n+          const fullPath = path.join(__dirname, \"..\", filePath);\r\n+          if (fs.existsSync(fullPath)) {\r\n+            fs.unlinkSync(fullPath);\r\n+          }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    // Update user data and remove files\r\n+    const update = {};\r\n+    if (documentType === \"politicalDeclaration\") {\r\n+      await removeFiles(user.documentRequirements?.politicalDeclaration);\r\n+      update[\"documentRequirements.politicalDeclaration\"] = null;\r\n+    } else if (documentType === \"witnessTestimonies\") {\r\n+      await removeFiles(user.documentRequirements?.witnessTestimonies);\r\n+      update[\"documentRequirements.witnessTestimonies\"] = [];\r\n+    } else if (documentType === \"idDocument\") {\r\n+      await removeFiles(user.documentRequirements?.idDocumentFile);\r\n+      update[\"documentRequirements.idDocumentFile\"] = null;\r\n     }\r\n \r\n-    res.status(200).json({\r\n-      message: \"File uploaded successfully\",\r\n-      filePath: `/uploads/${req.file.filename}`,\r\n-    });\r\n-  });\r\n+    await User.findByIdAndUpdate(req.user.id, update);\r\n+    res.json({ message: \"Document deleted successfully\" });\r\n+  } catch (error) {\r\n+    console.error(\"Delete error:\", error);\r\n+    res.status(500).json({ message: \"Server error during deletion\" });\r\n+  }\r\n };\r\n+\r\n+exports.getPublicViewUsers = async (req, res) => {\r\n+  try {\r\n+    const users = await User.find({\r\n+      \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null },\r\n+      \"documentRequirements.witnessTestimonies\": { $exists: true, $ne: [] },\r\n+      \"documentRequirements.idDocumentFile\": { $exists: true, $ne: null }\r\n+    }).select(\"fullNames familyName profileImage documentRequirements\");\r\n+\r\n+    res.json(users);\r\n+  } catch (error) {\r\n+    console.error(\"Public view error:\", error);\r\n+    res.status(500).json({ message: \"Server error fetching public records\" });\r\n+  }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753463815530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,73 +2,157 @@\n const fs = require(\"fs\");\r\n const multer = require(\"multer\");\r\n const User = require(\"../models/models\");\r\n \r\n-// Configure storage for multiple files\r\n+// Ensure upload directories exist\r\n+const uploadDir = path.join(__dirname, \"../uploads\");\r\n+const profileImageDir = path.join(uploadDir, \"profile-images\");\r\n+\r\n+// Create directories if they don't exist\r\n+[uploadDir, profileImageDir].forEach(dir => {\r\n+  if (!fs.existsSync(dir)) {\r\n+    fs.mkdirSync(dir, { recursive: true });\r\n+  }\r\n+});\r\n+\r\n+// Configure storage for different file types\r\n const storage = multer.diskStorage({\r\n   destination: (req, file, cb) => {\r\n-    const userDir = path.join(uploadDir, req.user.id);\r\n-    if (!fs.existsSync(userDir)) {\r\n-      fs.mkdirSync(userDir, { recursive: true });\r\n+    if (req.body.type === \"profileImage\") {\r\n+      cb(null, profileImageDir);\r\n+    } else {\r\n+      const userDir = path.join(uploadDir, req.user.id);\r\n+      if (!fs.existsSync(userDir)) {\r\n+        fs.mkdirSync(userDir, { recursive: true });\r\n+      }\r\n+      cb(null, userDir);\r\n     }\r\n-    cb(null, userDir);\r\n   },\r\n   filename: (req, file, cb) => {\r\n     const ext = path.extname(file.originalname);\r\n     const base = path.basename(file.originalname, ext);\r\n-    cb(null, `${base}-${Date.now()}${ext}`);\r\n+    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n+    cb(null, `${base}-${uniqueSuffix}${ext}`);\r\n   }\r\n });\r\n \r\n-const upload = multer({\r\n-  storage,\r\n-  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB per file\r\n-  fileFilter: (req, file, cb) => {\r\n+// File filter for different upload types\r\n+const fileFilter = (req, file, cb) => {\r\n+  if (req.body.type === \"profileImage\") {\r\n+    // Only allow image files for profile pictures\r\n+    if (file.mimetype.startsWith(\"image/\")) {\r\n+      cb(null, true);\r\n+    } else {\r\n+      cb(new Error(\"Only image files are allowed for profile pictures\"), false);\r\n+    }\r\n+  } else {\r\n+    // Allow other file types for documents\r\n     const allowedTypes = [\r\n-      \"image/jpeg\", \"image/png\", \"application/pdf\",\r\n-      \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n+      \"image/jpeg\",\r\n+      \"image/png\",\r\n+      \"application/pdf\",\r\n+      \"application/msword\",\r\n+      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n     ];\r\n-    allowedTypes.includes(file.mimetype) ? cb(null, true) : cb(new Error(\"Invalid file type\"));\r\n+    if (allowedTypes.includes(file.mimetype)) {\r\n+      cb(null, true);\r\n+    } else {\r\n+      cb(new Error(\"Invalid file type\"), false);\r\n+    }\r\n   }\r\n-}).array(\"files\", 20); // Allow up to 20 files\r\n+};\r\n \r\n+const upload = multer({\r\n+  storage,\r\n+  limits: {\r\n+    fileSize: req => req.body.type === \"profileImage\" ? 2 * 1024 * 1024 : 50 * 1024 * 1024 // 2MB for profile, 50MB for docs\r\n+  },\r\n+  fileFilter\r\n+}).fields([\r\n+  { name: \"file\", maxCount: 1 }, // For single file uploads (profile)\r\n+  { name: \"files\", maxCount: 20 } // For multiple file uploads\r\n+]);\r\n+\r\n exports.uploadFile = async (req, res) => {\r\n   upload(req, res, async (err) => {\r\n     if (err) {\r\n-      return res.status(400).json({ \r\n-        message: err instanceof multer.MulterError ? \r\n-          \"File upload error\" : \"Invalid file type\",\r\n-        error: err.message \r\n+      console.error(\"Upload error:\", err);\r\n+      return res.status(400).json({\r\n+        success: false,\r\n+        message: err instanceof multer.MulterError\r\n+          ? err.code === \"LIMIT_FILE_SIZE\"\r\n+            ? \"File too large\"\r\n+            : \"File upload error\"\r\n+          : err.message || \"Invalid file type\",\r\n+        error: err.message\r\n       });\r\n     }\r\n \r\n-    if (!req.files || req.files.length === 0) {\r\n-      return res.status(400).json({ message: \"No files uploaded\" });\r\n-    }\r\n-\r\n     try {\r\n-      const { label, documentType } = req.body;\r\n-      const filePaths = req.files.map(file => `/uploads/${req.user.id}/${file.filename}`);\r\n+      const { type, documentType } = req.body;\r\n \r\n+      // Handle profile image upload\r\n+      if (type === \"profileImage\") {\r\n+        if (!req.files || !req.files.file || req.files.file.length === 0) {\r\n+          return res.status(400).json({\r\n+            success: false,\r\n+            message: \"No file uploaded\"\r\n+          });\r\n+        }\r\n+\r\n+        const file = req.files.file[0];\r\n+        const filePath = `/uploads/profile-images/${file.filename}`;\r\n+\r\n+        // Update user's profile image in database\r\n+        await User.findByIdAndUpdate(req.user.id, {\r\n+          profileImage: filePath\r\n+        });\r\n+\r\n+        return res.status(200).json({\r\n+          success: true,\r\n+          message: \"Profile image uploaded successfully\",\r\n+          filePath\r\n+        });\r\n+      }\r\n+\r\n+      // Handle document uploads\r\n+      if (!req.files || !req.files.files || req.files.files.length === 0) {\r\n+        return res.status(400).json({\r\n+          success: false,\r\n+          message: \"No files uploaded\"\r\n+        });\r\n+      }\r\n+\r\n+      const filePaths = req.files.files.map(\r\n+        file => `/uploads/${req.user.id}/${file.filename}`\r\n+      );\r\n+\r\n       // Update user document requirements\r\n       const update = {};\r\n       if (documentType === \"politicalDeclaration\") {\r\n         update[\"documentRequirements.politicalDeclaration\"] = filePaths[0];\r\n       } else if (documentType === \"witnessTestimonies\") {\r\n-        update.$push = { \"documentRequirements.witnessTestimonies\": { $each: filePaths } };\r\n+        update.$push = {\r\n+          \"documentRequirements.witnessTestimonies\": { $each: filePaths }\r\n+        };\r\n       } else if (documentType === \"idDocument\") {\r\n         update[\"documentRequirements.idDocumentFile\"] = filePaths[0];\r\n       }\r\n \r\n       await User.findByIdAndUpdate(req.user.id, update);\r\n \r\n-      res.status(200).json({ \r\n+      res.status(200).json({\r\n+        success: true,\r\n         message: \"Files uploaded successfully\",\r\n-        filePaths \r\n+        filePaths\r\n       });\r\n     } catch (error) {\r\n-      console.error(\"Upload error:\", error);\r\n-      res.status(500).json({ message: \"Server error during file processing\" });\r\n+      console.error(\"Upload processing error:\", error);\r\n+      res.status(500).json({\r\n+        success: false,\r\n+        message: \"Server error during file processing\",\r\n+        error: error.message\r\n+      });\r\n     }\r\n   });\r\n };\r\n \r\n@@ -77,13 +161,16 @@\n     const { documentType } = req.body;\r\n     const user = await User.findById(req.user.id);\r\n \r\n     if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: \"User not found\"\r\n+      });\r\n     }\r\n \r\n     // Remove files from storage\r\n-    const removeFiles = async (paths) => {\r\n+    const removeFiles = async paths => {\r\n       if (!paths) return;\r\n       const pathsArray = Array.isArray(paths) ? paths : [paths];\r\n       for (const filePath of pathsArray) {\r\n         if (filePath) {\r\n@@ -108,12 +195,19 @@\n       update[\"documentRequirements.idDocumentFile\"] = null;\r\n     }\r\n \r\n     await User.findByIdAndUpdate(req.user.id, update);\r\n-    res.json({ message: \"Document deleted successfully\" });\r\n+    res.json({\r\n+      success: true,\r\n+      message: \"Document deleted successfully\"\r\n+    });\r\n   } catch (error) {\r\n     console.error(\"Delete error:\", error);\r\n-    res.status(500).json({ message: \"Server error during deletion\" });\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      message: \"Server error during deletion\",\r\n+      error: error.message\r\n+    });\r\n   }\r\n };\r\n \r\n exports.getPublicViewUsers = async (req, res) => {\r\n@@ -121,12 +215,26 @@\n     const users = await User.find({\r\n       \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null },\r\n       \"documentRequirements.witnessTestimonies\": { $exists: true, $ne: [] },\r\n       \"documentRequirements.idDocumentFile\": { $exists: true, $ne: null }\r\n-    }).select(\"fullNames familyName profileImage documentRequirements\");\r\n+    })\r\n+      .select(\"fullNames familyName profileImage documentRequirements\")\r\n+      .lean();\r\n \r\n-    res.json(users);\r\n+    res.json({\r\n+      success: true,\r\n+      users: users.map(user => ({\r\n+        ...user,\r\n+        profileImage: user.profileImage\r\n+          ? `${process.env.BASE_URL || \"http://localhost:5000\"}${user.profileImage}`\r\n+          : null\r\n+      }))\r\n+    });\r\n   } catch (error) {\r\n     console.error(\"Public view error:\", error);\r\n-    res.status(500).json({ message: \"Server error fetching public records\" });\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      message: \"Server error fetching public records\",\r\n+      error: error.message\r\n+    });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753470839043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,188 +2,163 @@\n const fs = require(\"fs\");\r\n const multer = require(\"multer\");\r\n const User = require(\"../models/models\");\r\n \r\n-// Ensure upload directories exist\r\n-const uploadDir = path.join(__dirname, \"../uploads\");\r\n-const profileImageDir = path.join(uploadDir, \"profile-images\");\r\n+// Configure upload directories\r\n+const configureDirectories = () => {\r\n+  const uploadDir = path.join(__dirname, \"../uploads\");\r\n+  const profileImageDir = path.join(uploadDir, \"profile-images\");\r\n+  \r\n+  [uploadDir, profileImageDir].forEach(dir => {\r\n+    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\r\n+  });\r\n+  \r\n+  return { uploadDir, profileImageDir };\r\n+};\r\n \r\n-// Create directories if they don't exist\r\n-[uploadDir, profileImageDir].forEach(dir => {\r\n-  if (!fs.existsSync(dir)) {\r\n-    fs.mkdirSync(dir, { recursive: true });\r\n-  }\r\n-});\r\n+const { uploadDir, profileImageDir } = configureDirectories();\r\n \r\n-// Configure storage for different file types\r\n+// Storage configuration\r\n const storage = multer.diskStorage({\r\n   destination: (req, file, cb) => {\r\n     if (req.body.type === \"profileImage\") {\r\n       cb(null, profileImageDir);\r\n     } else {\r\n       const userDir = path.join(uploadDir, req.user.id);\r\n-      if (!fs.existsSync(userDir)) {\r\n-        fs.mkdirSync(userDir, { recursive: true });\r\n-      }\r\n+      if (!fs.existsSync(userDir)) fs.mkdirSync(userDir, { recursive: true });\r\n       cb(null, userDir);\r\n     }\r\n   },\r\n   filename: (req, file, cb) => {\r\n     const ext = path.extname(file.originalname);\r\n-    const base = path.basename(file.originalname, ext);\r\n-    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n-    cb(null, `${base}-${uniqueSuffix}${ext}`);\r\n+    const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1e9)}`;\r\n+    cb(null, `file-${uniqueSuffix}${ext}`);\r\n   }\r\n });\r\n \r\n-// File filter for different upload types\r\n+// File filter\r\n const fileFilter = (req, file, cb) => {\r\n   if (req.body.type === \"profileImage\") {\r\n-    // Only allow image files for profile pictures\r\n-    if (file.mimetype.startsWith(\"image/\")) {\r\n-      cb(null, true);\r\n-    } else {\r\n-      cb(new Error(\"Only image files are allowed for profile pictures\"), false);\r\n-    }\r\n+    file.mimetype.startsWith(\"image/\") \r\n+      ? cb(null, true) \r\n+      : cb(new Error(\"Only images allowed for profile\"), false);\r\n   } else {\r\n-    // Allow other file types for documents\r\n     const allowedTypes = [\r\n-      \"image/jpeg\",\r\n-      \"image/png\",\r\n-      \"application/pdf\",\r\n-      \"application/msword\",\r\n-      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n+      \"image/jpeg\", \"image/png\", \"application/pdf\",\r\n+      \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n     ];\r\n-    if (allowedTypes.includes(file.mimetype)) {\r\n-      cb(null, true);\r\n-    } else {\r\n-      cb(new Error(\"Invalid file type\"), false);\r\n-    }\r\n+    allowedTypes.includes(file.mimetype)\r\n+      ? cb(null, true)\r\n+      : cb(new Error(\"Invalid file type\"), false);\r\n   }\r\n };\r\n \r\n+// Configure multer with 1GB limit\r\n const upload = multer({\r\n   storage,\r\n-  limits: {\r\n-    fileSize: req => req.body.type === \"profileImage\" ? 2 * 1024 * 1024 : 50 * 1024 * 1024 // 2MB for profile, 50MB for docs\r\n-  },\r\n+  limits: { fileSize: 1024 * 1024 * 1024 }, // 1GB\r\n   fileFilter\r\n }).fields([\r\n-  { name: \"file\", maxCount: 1 }, // For single file uploads (profile)\r\n-  { name: \"files\", maxCount: 20 } // For multiple file uploads\r\n+  { name: \"file\", maxCount: 1 },\r\n+  { name: \"files\", maxCount: 20 }\r\n ]);\r\n \r\n+// Handle file upload\r\n exports.uploadFile = async (req, res) => {\r\n   upload(req, res, async (err) => {\r\n     if (err) {\r\n       console.error(\"Upload error:\", err);\r\n       return res.status(400).json({\r\n         success: false,\r\n         message: err instanceof multer.MulterError\r\n-          ? err.code === \"LIMIT_FILE_SIZE\"\r\n-            ? \"File too large\"\r\n-            : \"File upload error\"\r\n-          : err.message || \"Invalid file type\",\r\n-        error: err.message\r\n+          ? err.code === \"LIMIT_FILE_SIZE\" ? \"File too large\" : \"Upload error\"\r\n+          : err.message\r\n       });\r\n     }\r\n \r\n     try {\r\n-      const { type, documentType } = req.body;\r\n+      const { type, documentType, label, isEmptyFolder } = req.body;\r\n \r\n-      // Handle profile image upload\r\n-      if (type === \"profileImage\") {\r\n-        if (!req.files || !req.files.file || req.files.file.length === 0) {\r\n-          return res.status(400).json({\r\n-            success: false,\r\n-            message: \"No file uploaded\"\r\n-          });\r\n-        }\r\n-\r\n-        const file = req.files.file[0];\r\n-        const filePath = `/uploads/profile-images/${file.filename}`;\r\n-\r\n-        // Update user's profile image in database\r\n-        await User.findByIdAndUpdate(req.user.id, {\r\n-          profileImage: filePath\r\n-        });\r\n-\r\n+      // Handle empty folder upload\r\n+      if (isEmptyFolder === \"true\") {\r\n+        const update = {\r\n+          $set: {\r\n+            [`documentRequirements.${documentType}IsEmpty`]: true,\r\n+            [`documentRequirements.${documentType}UploadedAt`]: new Date()\r\n+          }\r\n+        };\r\n+        \r\n+        await User.findByIdAndUpdate(req.user.id, update);\r\n         return res.status(200).json({\r\n           success: true,\r\n-          message: \"Profile image uploaded successfully\",\r\n-          filePath\r\n+          message: \"Empty folder upload recorded\"\r\n         });\r\n       }\r\n \r\n+      // Handle profile image\r\n+      if (type === \"profileImage\") {\r\n+        if (!req.files?.file?.[0]) {\r\n+          return res.status(400).json({ success: false, message: \"No file uploaded\" });\r\n+        }\r\n+\r\n+        const filePath = `/uploads/profile-images/${req.files.file[0].filename}`;\r\n+        await User.findByIdAndUpdate(req.user.id, { profileImage: filePath });\r\n+        return res.json({ success: true, filePath });\r\n+      }\r\n+\r\n       // Handle document uploads\r\n-      if (!req.files || !req.files.files || req.files.files.length === 0) {\r\n-        return res.status(400).json({\r\n-          success: false,\r\n-          message: \"No files uploaded\"\r\n-        });\r\n+      if (!req.files?.files?.length) {\r\n+        return res.status(400).json({ success: false, message: \"No files uploaded\" });\r\n       }\r\n \r\n-      const filePaths = req.files.files.map(\r\n-        file => `/uploads/${req.user.id}/${file.filename}`\r\n+      const filePaths = req.files.files.map(file => \r\n+        `/uploads/${req.user.id}/${file.filename}`\r\n       );\r\n \r\n-      // Update user document requirements\r\n       const update = {};\r\n       if (documentType === \"politicalDeclaration\") {\r\n         update[\"documentRequirements.politicalDeclaration\"] = filePaths[0];\r\n       } else if (documentType === \"witnessTestimonies\") {\r\n-        update.$push = {\r\n-          \"documentRequirements.witnessTestimonies\": { $each: filePaths }\r\n-        };\r\n+        update.$push = { \"documentRequirements.witnessTestimonies\": { $each: filePaths } };\r\n       } else if (documentType === \"idDocument\") {\r\n         update[\"documentRequirements.idDocumentFile\"] = filePaths[0];\r\n       }\r\n \r\n+      update[\"documentRequirements.isEmptyFolder\"] = false;\r\n+      update[\"documentRequirements.uploadedAt\"] = new Date();\r\n+\r\n       await User.findByIdAndUpdate(req.user.id, update);\r\n-\r\n-      res.status(200).json({\r\n-        success: true,\r\n-        message: \"Files uploaded successfully\",\r\n-        filePaths\r\n-      });\r\n+      res.json({ success: true, filePaths });\r\n     } catch (error) {\r\n-      console.error(\"Upload processing error:\", error);\r\n-      res.status(500).json({\r\n-        success: false,\r\n-        message: \"Server error during file processing\",\r\n-        error: error.message\r\n-      });\r\n+      console.error(\"Processing error:\", error);\r\n+      res.status(500).json({ success: false, message: \"Server error\" });\r\n     }\r\n   });\r\n };\r\n \r\n+// Delete document\r\n exports.deleteDocument = async (req, res) => {\r\n   try {\r\n     const { documentType } = req.body;\r\n     const user = await User.findById(req.user.id);\r\n \r\n     if (!user) {\r\n-      return res.status(404).json({\r\n-        success: false,\r\n-        message: \"User not found\"\r\n-      });\r\n+      return res.status(404).json({ success: false, message: \"User not found\" });\r\n     }\r\n \r\n-    // Remove files from storage\r\n-    const removeFiles = async paths => {\r\n+    // Helper to remove files\r\n+    const removeFiles = async (paths) => {\r\n       if (!paths) return;\r\n       const pathsArray = Array.isArray(paths) ? paths : [paths];\r\n       for (const filePath of pathsArray) {\r\n         if (filePath) {\r\n           const fullPath = path.join(__dirname, \"..\", filePath);\r\n-          if (fs.existsSync(fullPath)) {\r\n-            fs.unlinkSync(fullPath);\r\n-          }\r\n+          if (fs.existsSync(fullPath)) fs.unlinkSync(fullPath);\r\n         }\r\n       }\r\n     };\r\n \r\n-    // Update user data and remove files\r\n+    // Update based on document type\r\n     const update = {};\r\n     if (documentType === \"politicalDeclaration\") {\r\n       await removeFiles(user.documentRequirements?.politicalDeclaration);\r\n       update[\"documentRequirements.politicalDeclaration\"] = null;\r\n@@ -194,47 +169,45 @@\n       await removeFiles(user.documentRequirements?.idDocumentFile);\r\n       update[\"documentRequirements.idDocumentFile\"] = null;\r\n     }\r\n \r\n+    update[\"documentRequirements.isEmptyFolder\"] = false;\r\n     await User.findByIdAndUpdate(req.user.id, update);\r\n-    res.json({\r\n-      success: true,\r\n-      message: \"Document deleted successfully\"\r\n-    });\r\n+    res.json({ success: true, message: \"Document deleted\" });\r\n   } catch (error) {\r\n     console.error(\"Delete error:\", error);\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      message: \"Server error during deletion\",\r\n-      error: error.message\r\n-    });\r\n+    res.status(500).json({ success: false, message: \"Server error\" });\r\n   }\r\n };\r\n \r\n+// Get public view users\r\n exports.getPublicViewUsers = async (req, res) => {\r\n   try {\r\n     const users = await User.find({\r\n-      \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null },\r\n-      \"documentRequirements.witnessTestimonies\": { $exists: true, $ne: [] },\r\n-      \"documentRequirements.idDocumentFile\": { $exists: true, $ne: null }\r\n-    })\r\n-      .select(\"fullNames familyName profileImage documentRequirements\")\r\n-      .lean();\r\n+      $or: [\r\n+        { \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null } },\r\n+        { \"documentRequirements.isEmptyFolder\": true }\r\n+      ],\r\n+      $or: [\r\n+        { \"documentRequirements.witnessTestimonies.0\": { $exists: true } },\r\n+        { \"documentRequirements.isEmptyFolder\": true }\r\n+      ],\r\n+      $or: [\r\n+        { \"documentRequirements.idDocumentFile\": { $exists: true, $ne: null } },\r\n+        { \"documentRequirements.isEmptyFolder\": true }\r\n+      ]\r\n+    }).select(\"fullNames familyName profileImage documentRequirements\");\r\n \r\n     res.json({\r\n       success: true,\r\n       users: users.map(user => ({\r\n-        ...user,\r\n-        profileImage: user.profileImage\r\n+        ...user.toObject(),\r\n+        profileImage: user.profileImage \r\n           ? `${process.env.BASE_URL || \"http://localhost:5000\"}${user.profileImage}`\r\n           : null\r\n       }))\r\n     });\r\n   } catch (error) {\r\n     console.error(\"Public view error:\", error);\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      message: \"Server error fetching public records\",\r\n-      error: error.message\r\n-    });\r\n+    res.status(500).json({ success: false, message: \"Server error\" });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753470915034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,163 +2,188 @@\n const fs = require(\"fs\");\r\n const multer = require(\"multer\");\r\n const User = require(\"../models/models\");\r\n \r\n-// Configure upload directories\r\n-const configureDirectories = () => {\r\n-  const uploadDir = path.join(__dirname, \"../uploads\");\r\n-  const profileImageDir = path.join(uploadDir, \"profile-images\");\r\n-  \r\n-  [uploadDir, profileImageDir].forEach(dir => {\r\n-    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\r\n-  });\r\n-  \r\n-  return { uploadDir, profileImageDir };\r\n-};\r\n+// Ensure upload directories exist\r\n+const uploadDir = path.join(__dirname, \"../uploads\");\r\n+const profileImageDir = path.join(uploadDir, \"profile-images\");\r\n \r\n-const { uploadDir, profileImageDir } = configureDirectories();\r\n+// Create directories if they don't exist\r\n+[uploadDir, profileImageDir].forEach(dir => {\r\n+  if (!fs.existsSync(dir)) {\r\n+    fs.mkdirSync(dir, { recursive: true });\r\n+  }\r\n+});\r\n \r\n-// Storage configuration\r\n+// Configure storage for different file types\r\n const storage = multer.diskStorage({\r\n   destination: (req, file, cb) => {\r\n     if (req.body.type === \"profileImage\") {\r\n       cb(null, profileImageDir);\r\n     } else {\r\n       const userDir = path.join(uploadDir, req.user.id);\r\n-      if (!fs.existsSync(userDir)) fs.mkdirSync(userDir, { recursive: true });\r\n+      if (!fs.existsSync(userDir)) {\r\n+        fs.mkdirSync(userDir, { recursive: true });\r\n+      }\r\n       cb(null, userDir);\r\n     }\r\n   },\r\n   filename: (req, file, cb) => {\r\n     const ext = path.extname(file.originalname);\r\n-    const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1e9)}`;\r\n-    cb(null, `file-${uniqueSuffix}${ext}`);\r\n+    const base = path.basename(file.originalname, ext);\r\n+    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n+    cb(null, `${base}-${uniqueSuffix}${ext}`);\r\n   }\r\n });\r\n \r\n-// File filter\r\n+// File filter for different upload types\r\n const fileFilter = (req, file, cb) => {\r\n   if (req.body.type === \"profileImage\") {\r\n-    file.mimetype.startsWith(\"image/\") \r\n-      ? cb(null, true) \r\n-      : cb(new Error(\"Only images allowed for profile\"), false);\r\n+    // Only allow image files for profile pictures\r\n+    if (file.mimetype.startsWith(\"image/\")) {\r\n+      cb(null, true);\r\n+    } else {\r\n+      cb(new Error(\"Only image files are allowed for profile pictures\"), false);\r\n+    }\r\n   } else {\r\n+    // Allow other file types for documents\r\n     const allowedTypes = [\r\n-      \"image/jpeg\", \"image/png\", \"application/pdf\",\r\n-      \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n+      \"image/jpeg\",\r\n+      \"image/png\",\r\n+      \"application/pdf\",\r\n+      \"application/msword\",\r\n+      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n     ];\r\n-    allowedTypes.includes(file.mimetype)\r\n-      ? cb(null, true)\r\n-      : cb(new Error(\"Invalid file type\"), false);\r\n+    if (allowedTypes.includes(file.mimetype)) {\r\n+      cb(null, true);\r\n+    } else {\r\n+      cb(new Error(\"Invalid file type\"), false);\r\n+    }\r\n   }\r\n };\r\n \r\n-// Configure multer with 1GB limit\r\n const upload = multer({\r\n   storage,\r\n-  limits: { fileSize: 1024 * 1024 * 1024 }, // 1GB\r\n+  limits: {\r\n+    fileSize: req => req.body.type === \"profileImage\" ? 2 * 1024 * 1024 : 50 * 1024 * 1024 // 2MB for profile, 50MB for docs\r\n+  },\r\n   fileFilter\r\n }).fields([\r\n-  { name: \"file\", maxCount: 1 },\r\n-  { name: \"files\", maxCount: 20 }\r\n+  { name: \"file\", maxCount: 1 }, // For single file uploads (profile)\r\n+  { name: \"files\", maxCount: 20 } // For multiple file uploads\r\n ]);\r\n \r\n-// Handle file upload\r\n exports.uploadFile = async (req, res) => {\r\n   upload(req, res, async (err) => {\r\n     if (err) {\r\n       console.error(\"Upload error:\", err);\r\n       return res.status(400).json({\r\n         success: false,\r\n         message: err instanceof multer.MulterError\r\n-          ? err.code === \"LIMIT_FILE_SIZE\" ? \"File too large\" : \"Upload error\"\r\n-          : err.message\r\n+          ? err.code === \"LIMIT_FILE_SIZE\"\r\n+            ? \"File too large\"\r\n+            : \"File upload error\"\r\n+          : err.message || \"Invalid file type\",\r\n+        error: err.message\r\n       });\r\n     }\r\n \r\n     try {\r\n-      const { type, documentType, label, isEmptyFolder } = req.body;\r\n+      const { type, documentType } = req.body;\r\n \r\n-      // Handle empty folder upload\r\n-      if (isEmptyFolder === \"true\") {\r\n-        const update = {\r\n-          $set: {\r\n-            [`documentRequirements.${documentType}IsEmpty`]: true,\r\n-            [`documentRequirements.${documentType}UploadedAt`]: new Date()\r\n-          }\r\n-        };\r\n-        \r\n-        await User.findByIdAndUpdate(req.user.id, update);\r\n+      // Handle profile image upload\r\n+      if (type === \"profileImage\") {\r\n+        if (!req.files || !req.files.file || req.files.file.length === 0) {\r\n+          return res.status(400).json({\r\n+            success: false,\r\n+            message: \"No file uploaded\"\r\n+          });\r\n+        }\r\n+\r\n+        const file = req.files.file[0];\r\n+        const filePath = `/uploads/profile-images/${file.filename}`;\r\n+\r\n+        // Update user's profile image in database\r\n+        await User.findByIdAndUpdate(req.user.id, {\r\n+          profileImage: filePath\r\n+        });\r\n+\r\n         return res.status(200).json({\r\n           success: true,\r\n-          message: \"Empty folder upload recorded\"\r\n+          message: \"Profile image uploaded successfully\",\r\n+          filePath\r\n         });\r\n       }\r\n \r\n-      // Handle profile image\r\n-      if (type === \"profileImage\") {\r\n-        if (!req.files?.file?.[0]) {\r\n-          return res.status(400).json({ success: false, message: \"No file uploaded\" });\r\n-        }\r\n-\r\n-        const filePath = `/uploads/profile-images/${req.files.file[0].filename}`;\r\n-        await User.findByIdAndUpdate(req.user.id, { profileImage: filePath });\r\n-        return res.json({ success: true, filePath });\r\n-      }\r\n-\r\n       // Handle document uploads\r\n-      if (!req.files?.files?.length) {\r\n-        return res.status(400).json({ success: false, message: \"No files uploaded\" });\r\n+      if (!req.files || !req.files.files || req.files.files.length === 0) {\r\n+        return res.status(400).json({\r\n+          success: false,\r\n+          message: \"No files uploaded\"\r\n+        });\r\n       }\r\n \r\n-      const filePaths = req.files.files.map(file => \r\n-        `/uploads/${req.user.id}/${file.filename}`\r\n+      const filePaths = req.files.files.map(\r\n+        file => `/uploads/${req.user.id}/${file.filename}`\r\n       );\r\n \r\n+      // Update user document requirements\r\n       const update = {};\r\n       if (documentType === \"politicalDeclaration\") {\r\n         update[\"documentRequirements.politicalDeclaration\"] = filePaths[0];\r\n       } else if (documentType === \"witnessTestimonies\") {\r\n-        update.$push = { \"documentRequirements.witnessTestimonies\": { $each: filePaths } };\r\n+        update.$push = {\r\n+          \"documentRequirements.witnessTestimonies\": { $each: filePaths }\r\n+        };\r\n       } else if (documentType === \"idDocument\") {\r\n         update[\"documentRequirements.idDocumentFile\"] = filePaths[0];\r\n       }\r\n \r\n-      update[\"documentRequirements.isEmptyFolder\"] = false;\r\n-      update[\"documentRequirements.uploadedAt\"] = new Date();\r\n+      await User.findByIdAndUpdate(req.user.id, update);\r\n \r\n-      await User.findByIdAndUpdate(req.user.id, update);\r\n-      res.json({ success: true, filePaths });\r\n+      res.status(200).json({\r\n+        success: true,\r\n+        message: \"Files uploaded successfully\",\r\n+        filePaths\r\n+      });\r\n     } catch (error) {\r\n-      console.error(\"Processing error:\", error);\r\n-      res.status(500).json({ success: false, message: \"Server error\" });\r\n+      console.error(\"Upload processing error:\", error);\r\n+      res.status(500).json({\r\n+        success: false,\r\n+        message: \"Server error during file processing\",\r\n+        error: error.message\r\n+      });\r\n     }\r\n   });\r\n };\r\n \r\n-// Delete document\r\n exports.deleteDocument = async (req, res) => {\r\n   try {\r\n     const { documentType } = req.body;\r\n     const user = await User.findById(req.user.id);\r\n \r\n     if (!user) {\r\n-      return res.status(404).json({ success: false, message: \"User not found\" });\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: \"User not found\"\r\n+      });\r\n     }\r\n \r\n-    // Helper to remove files\r\n-    const removeFiles = async (paths) => {\r\n+    // Remove files from storage\r\n+    const removeFiles = async paths => {\r\n       if (!paths) return;\r\n       const pathsArray = Array.isArray(paths) ? paths : [paths];\r\n       for (const filePath of pathsArray) {\r\n         if (filePath) {\r\n           const fullPath = path.join(__dirname, \"..\", filePath);\r\n-          if (fs.existsSync(fullPath)) fs.unlinkSync(fullPath);\r\n+          if (fs.existsSync(fullPath)) {\r\n+            fs.unlinkSync(fullPath);\r\n+          }\r\n         }\r\n       }\r\n     };\r\n \r\n-    // Update based on document type\r\n+    // Update user data and remove files\r\n     const update = {};\r\n     if (documentType === \"politicalDeclaration\") {\r\n       await removeFiles(user.documentRequirements?.politicalDeclaration);\r\n       update[\"documentRequirements.politicalDeclaration\"] = null;\r\n@@ -169,45 +194,47 @@\n       await removeFiles(user.documentRequirements?.idDocumentFile);\r\n       update[\"documentRequirements.idDocumentFile\"] = null;\r\n     }\r\n \r\n-    update[\"documentRequirements.isEmptyFolder\"] = false;\r\n     await User.findByIdAndUpdate(req.user.id, update);\r\n-    res.json({ success: true, message: \"Document deleted\" });\r\n+    res.json({\r\n+      success: true,\r\n+      message: \"Document deleted successfully\"\r\n+    });\r\n   } catch (error) {\r\n     console.error(\"Delete error:\", error);\r\n-    res.status(500).json({ success: false, message: \"Server error\" });\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      message: \"Server error during deletion\",\r\n+      error: error.message\r\n+    });\r\n   }\r\n };\r\n \r\n-// Get public view users\r\n exports.getPublicViewUsers = async (req, res) => {\r\n   try {\r\n     const users = await User.find({\r\n-      $or: [\r\n-        { \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null } },\r\n-        { \"documentRequirements.isEmptyFolder\": true }\r\n-      ],\r\n-      $or: [\r\n-        { \"documentRequirements.witnessTestimonies.0\": { $exists: true } },\r\n-        { \"documentRequirements.isEmptyFolder\": true }\r\n-      ],\r\n-      $or: [\r\n-        { \"documentRequirements.idDocumentFile\": { $exists: true, $ne: null } },\r\n-        { \"documentRequirements.isEmptyFolder\": true }\r\n-      ]\r\n-    }).select(\"fullNames familyName profileImage documentRequirements\");\r\n+      \"documentRequirements.politicalDeclaration\": { $exists: true, $ne: null },\r\n+      \"documentRequirements.witnessTestimonies\": { $exists: true, $ne: [] },\r\n+      \"documentRequirements.idDocumentFile\": { $exists: true, $ne: null }\r\n+    })\r\n+      .select(\"fullNames familyName profileImage documentRequirements\")\r\n+      .lean();\r\n \r\n     res.json({\r\n       success: true,\r\n       users: users.map(user => ({\r\n-        ...user.toObject(),\r\n-        profileImage: user.profileImage \r\n+        ...user,\r\n+        profileImage: user.profileImage\r\n           ? `${process.env.BASE_URL || \"http://localhost:5000\"}${user.profileImage}`\r\n           : null\r\n       }))\r\n     });\r\n   } catch (error) {\r\n     console.error(\"Public view error:\", error);\r\n-    res.status(500).json({ success: false, message: \"Server error\" });\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      message: \"Server error fetching public records\",\r\n+      error: error.message\r\n+    });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753690876722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,11 @@\n       cb(null, userDir);\r\n     }\r\n   },\r\n   filename: (req, file, cb) => {\r\n-    const ext = path.extname(file.originalname);\r\n-    const base = path.basename(file.originalname, ext);\r\n-    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n-    cb(null, `${base}-${uniqueSuffix}${ext}`);\r\n+    // Preserve folder structure by maintaining relative paths\r\n+    const relativePath = file.originalname;\r\n+    cb(null, relativePath);\r\n   }\r\n });\r\n \r\n // File filter for different upload types\r\n@@ -44,50 +43,46 @@\n     } else {\r\n       cb(new Error(\"Only image files are allowed for profile pictures\"), false);\r\n     }\r\n   } else {\r\n-    // Allow other file types for documents\r\n-    const allowedTypes = [\r\n-      \"image/jpeg\",\r\n-      \"image/png\",\r\n-      \"application/pdf\",\r\n-      \"application/msword\",\r\n-      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n-    ];\r\n-    if (allowedTypes.includes(file.mimetype)) {\r\n-      cb(null, true);\r\n-    } else {\r\n-      cb(new Error(\"Invalid file type\"), false);\r\n-    }\r\n+    // Allow all file types for folder uploads\r\n+    cb(null, true);\r\n   }\r\n };\r\n \r\n-const upload = multer({\r\n-  storage,\r\n-  limits: {\r\n-    fileSize: req => req.body.type === \"profileImage\" ? 2 * 1024 * 1024 : 50 * 1024 * 1024 // 2MB for profile, 50MB for docs\r\n-  },\r\n-  fileFilter\r\n-}).fields([\r\n-  { name: \"file\", maxCount: 1 }, // For single file uploads (profile)\r\n-  { name: \"files\", maxCount: 20 } // For multiple file uploads\r\n-]);\r\n+// Custom multer middleware to handle folder uploads\r\n+const folderUpload = (req, res, next) => {\r\n+  const upload = multer({\r\n+    storage,\r\n+    limits: {\r\n+      fileSize: req => req.body.type === \"profileImage\" ? 2 * 1024 * 1024 : 1024 * 1024 * 1024 // 2MB for profile, 1GB for folders\r\n+    },\r\n+    fileFilter\r\n+  }).fields([\r\n+    { name: \"file\", maxCount: 1 }, // For single file uploads (profile)\r\n+    { name: \"files\", maxCount: 1000 } // For folder uploads (large number to accommodate many files)\r\n+  ]);\r\n \r\n-exports.uploadFile = async (req, res) => {\r\n-  upload(req, res, async (err) => {\r\n+  upload(req, res, (err) => {\r\n     if (err) {\r\n-      console.error(\"Upload error:\", err);\r\n+      if (err.code === 'LIMIT_FILE_SIZE') {\r\n+        return res.status(400).json({\r\n+          success: false,\r\n+          message: \"Folder is too large (maximum 1GB allowed)\"\r\n+        });\r\n+      }\r\n       return res.status(400).json({\r\n         success: false,\r\n-        message: err instanceof multer.MulterError\r\n-          ? err.code === \"LIMIT_FILE_SIZE\"\r\n-            ? \"File too large\"\r\n-            : \"File upload error\"\r\n-          : err.message || \"Invalid file type\",\r\n+        message: err.message || \"Upload error\",\r\n         error: err.message\r\n       });\r\n     }\r\n+    next();\r\n+  });\r\n+};\r\n \r\n+exports.uploadFile = async (req, res) => {\r\n+  folderUpload(req, res, async () => {\r\n     try {\r\n       const { type, documentType } = req.body;\r\n \r\n       // Handle profile image upload\r\n@@ -113,19 +108,34 @@\n           filePath\r\n         });\r\n       }\r\n \r\n-      // Handle document uploads\r\n+      // Handle folder/document uploads\r\n       if (!req.files || !req.files.files || req.files.files.length === 0) {\r\n+        // Check if this was an empty folder upload\r\n+        if (req.body.emptyFolder === 'true') {\r\n+          // Create an empty folder marker file\r\n+          const emptyFolderPath = path.join(uploadDir, req.user.id, req.body.folderName || 'untitled', '.emptyfolder');\r\n+          fs.mkdirSync(path.dirname(emptyFolderPath), { recursive: true });\r\n+          fs.writeFileSync(emptyFolderPath, 'This is an empty folder marker');\r\n+\r\n+          return res.status(200).json({\r\n+            success: true,\r\n+            message: \"Empty folder created successfully\",\r\n+            filePaths: []\r\n+          });\r\n+        }\r\n+        \r\n         return res.status(400).json({\r\n           success: false,\r\n           message: \"No files uploaded\"\r\n         });\r\n       }\r\n \r\n-      const filePaths = req.files.files.map(\r\n-        file => `/uploads/${req.user.id}/${file.filename}`\r\n-      );\r\n+      // Process folder upload\r\n+      const filePaths = req.files.files.map(file => {\r\n+        return `/uploads/${req.user.id}/${file.filename}`;\r\n+      });\r\n \r\n       // Update user document requirements\r\n       const update = {};\r\n       if (documentType === \"politicalDeclaration\") {\r\n@@ -135,8 +145,15 @@\n           \"documentRequirements.witnessTestimonies\": { $each: filePaths }\r\n         };\r\n       } else if (documentType === \"idDocument\") {\r\n         update[\"documentRequirements.idDocumentFile\"] = filePaths[0];\r\n+      } else if (documentType === \"folderUpload\") {\r\n+        // For folder uploads, store the entire folder structure\r\n+        update[\"documentRequirements.folderUpload\"] = {\r\n+          folderName: req.body.folderName || 'untitled',\r\n+          files: filePaths,\r\n+          uploadedAt: new Date()\r\n+        };\r\n       }\r\n \r\n       await User.findByIdAndUpdate(req.user.id, update);\r\n \r\n@@ -170,8 +187,33 @@\n \r\n     // Remove files from storage\r\n     const removeFiles = async paths => {\r\n       if (!paths) return;\r\n+      \r\n+      // Handle folder deletion\r\n+      if (paths.folderName) {\r\n+        const folderPath = path.join(__dirname, \"..\", \"uploads\", req.user.id, paths.folderName);\r\n+        if (fs.existsSync(folderPath)) {\r\n+          // Recursively delete folder contents\r\n+          const deleteFolderRecursive = (folderPath) => {\r\n+            if (fs.existsSync(folderPath)) {\r\n+              fs.readdirSync(folderPath).forEach((file) => {\r\n+                const curPath = path.join(folderPath, file);\r\n+                if (fs.lstatSync(curPath).isDirectory()) {\r\n+                  deleteFolderRecursive(curPath);\r\n+                } else {\r\n+                  fs.unlinkSync(curPath);\r\n+                }\r\n+              });\r\n+              fs.rmdirSync(folderPath);\r\n+            }\r\n+          };\r\n+          deleteFolderRecursive(folderPath);\r\n+        }\r\n+        return;\r\n+      }\r\n+\r\n+      // Handle single file or array of files\r\n       const pathsArray = Array.isArray(paths) ? paths : [paths];\r\n       for (const filePath of pathsArray) {\r\n         if (filePath) {\r\n           const fullPath = path.join(__dirname, \"..\", filePath);\r\n@@ -192,14 +234,17 @@\n       update[\"documentRequirements.witnessTestimonies\"] = [];\r\n     } else if (documentType === \"idDocument\") {\r\n       await removeFiles(user.documentRequirements?.idDocumentFile);\r\n       update[\"documentRequirements.idDocumentFile\"] = null;\r\n+    } else if (documentType === \"folderUpload\") {\r\n+      await removeFiles(user.documentRequirements?.folderUpload);\r\n+      update[\"documentRequirements.folderUpload\"] = null;\r\n     }\r\n \r\n     await User.findByIdAndUpdate(req.user.id, update);\r\n     res.json({\r\n       success: true,\r\n-      message: \"Document deleted successfully\"\r\n+      message: \"Document/folder deleted successfully\"\r\n     });\r\n   } catch (error) {\r\n     console.error(\"Delete error:\", error);\r\n     res.status(500).json({\r\n"
                }
            ],
            "date": 1753434238442,
            "name": "Commit-0",
            "content": "const User = require(\"../models\"); // Adjust path to your User model\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nexports.uploadFile = async (req, res) => {\r\n  // Use multer upload middleware\r\n  upload(req, res, async function (err) {\r\n    if (err instanceof multer.MulterError) {\r\n      return res.status(400).json({ message: \"Multer error\", error: err.message });\r\n    } else if (err) {\r\n      return res.status(400).json({ message: \"Upload error\", error: err.message });\r\n    }\r\n    if (!req.file) {\r\n      return res.status(400).json({ message: \"No file uploaded\" });\r\n    }\r\n\r\n    try {\r\n      // Authenticate user from token in Authorization header\r\n      const authHeader = req.headers.authorization || \"\";\r\n      const token = authHeader.split(\" \")[1];\r\n      if (!token) return res.status(401).json({ message: \"Unauthorized\" });\r\n\r\n      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n      const userId = decoded.id;\r\n\r\n      // Find user in DB\r\n      const user = await User.findById(userId);\r\n      if (!user) return res.status(404).json({ message: \"User not found\" });\r\n\r\n      const { label, documentType, type } = req.body; // type for profileImage\r\n\r\n      // If uploading profile image\r\n      if (type === \"profileImage\") {\r\n        user.profileImage = `/uploads/${req.file.filename}`;\r\n      } else {\r\n        // For documents: update documentRequirements field accordingly\r\n\r\n        if (!user.documentRequirements) user.documentRequirements = {};\r\n\r\n        // Set based on documentType, example:\r\n        switch (documentType) {\r\n          case \"politicalDeclaration\":\r\n            user.documentRequirements.politicalDeclaration = `/uploads/${req.file.filename}`;\r\n            break;\r\n          case \"witnessTestimonies\":\r\n            // witnessTestimonies is array of 3 paths; add to array or replace as needed\r\n            if (!user.documentRequirements.witnessTestimonies) {\r\n              user.documentRequirements.witnessTestimonies = [];\r\n            }\r\n            // For simplicity, replace array with single uploaded file path for now:\r\n            user.documentRequirements.witnessTestimonies = [`/uploads/${req.file.filename}`];\r\n            break;\r\n          case \"idDocument\":\r\n            user.documentRequirements.idDocumentFile = `/uploads/${req.file.filename}`;\r\n            break;\r\n          default:\r\n            // Unknown document type\r\n            return res.status(400).json({ message: \"Invalid document type\" });\r\n        }\r\n      }\r\n\r\n      await user.save();\r\n\r\n      res.status(200).json({\r\n        message: \"File uploaded and user data updated successfully\",\r\n        filePath: `/uploads/${req.file.filename}`,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.status(500).json({ message: \"Server error\" });\r\n    }\r\n  });\r\n};\r\n"
        }
    ]
}