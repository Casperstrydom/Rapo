{
    "sourceFile": "backend/config/db.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753433360800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753692907780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,58 @@\n const mongoose = require(\"mongoose\");\r\n \r\n const connectDB = async () => {\r\n+  // Validate environment variable\r\n+  if (!process.env.MONGO_URI) {\r\n+    console.error(\"MongoDB connection error: MONGO_URI is not defined in environment variables\");\r\n+    process.exit(1);\r\n+  }\r\n+\r\n+  // Configure mongoose options\r\n+  const options = {\r\n+    useNewUrlParser: true,\r\n+    useUnifiedTopology: true,\r\n+    serverSelectionTimeoutMS: 5000, // Timeout after 5s instead of 30s\r\n+    connectTimeoutMS: 10000, // Give up initial connection after 10s\r\n+    socketTimeoutMS: 45000, // Close sockets after 45s of inactivity\r\n+    maxPoolSize: 10, // Maintain up to 10 socket connections\r\n+  };\r\n+\r\n   try {\r\n-    const conn = await mongoose.connect(process.env.MONGO_URI || \"mongodb://localhost:27017/your-db-name\");\r\n-    console.log(`MongoDB Connected: ${conn.connection.host}`);\r\n+    const conn = await mongoose.connect(process.env.MONGO_URI, options);\r\n+    \r\n+    // Connection events for better debugging\r\n+    mongoose.connection.on('connected', () => {\r\n+      console.log(`MongoDB connected: ${conn.connection.host}`);\r\n+    });\r\n+\r\n+    mongoose.connection.on('error', (err) => {\r\n+      console.error('MongoDB connection error:', err);\r\n+    });\r\n+\r\n+    mongoose.connection.on('disconnected', () => {\r\n+      console.warn('MongoDB disconnected');\r\n+    });\r\n+\r\n+    // Close the Mongoose connection when Node process ends\r\n+    process.on('SIGINT', async () => {\r\n+      await mongoose.connection.close();\r\n+      console.log('MongoDB connection closed due to app termination');\r\n+      process.exit(0);\r\n+    });\r\n+\r\n+    return conn;\r\n   } catch (err) {\r\n-    console.error(\"MongoDB connection failed:\", err);\r\n+    console.error(\"MongoDB connection failed:\", err.message);\r\n+    \r\n+    // More detailed error handling\r\n+    if (err.name === 'MongooseServerSelectionError') {\r\n+      console.error('Could not connect to any servers in your MongoDB Atlas cluster');\r\n+    } else if (err.name === 'MongoParseError') {\r\n+      console.error('Invalid MongoDB connection string');\r\n+    }\r\n+    \r\n     process.exit(1);\r\n   }\r\n };\r\n \r\n-module.exports = connectDB;\r\n+module.exports = connectDB;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753708116347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,86 @@\n const mongoose = require(\"mongoose\");\r\n \r\n+/**\r\n+ * Establishes a connection to MongoDB with optimized settings\r\n+ * @returns {Promise<mongoose.Connection>} Mongoose connection instance\r\n+ */\r\n const connectDB = async () => {\r\n   // Validate environment variable\r\n   if (!process.env.MONGO_URI) {\r\n     console.error(\"MongoDB connection error: MONGO_URI is not defined in environment variables\");\r\n     process.exit(1);\r\n   }\r\n \r\n-  // Configure mongoose options\r\n+  // Configure mongoose with modern settings\r\n   const options = {\r\n-    useNewUrlParser: true,\r\n-    useUnifiedTopology: true,\r\n     serverSelectionTimeoutMS: 5000, // Timeout after 5s instead of 30s\r\n     connectTimeoutMS: 10000, // Give up initial connection after 10s\r\n     socketTimeoutMS: 45000, // Close sockets after 45s of inactivity\r\n     maxPoolSize: 10, // Maintain up to 10 socket connections\r\n+    minPoolSize: 2, // Maintain minimum 2 connections\r\n+    heartbeatFrequencyMS: 30000, // Check connection status every 30s\r\n+    retryWrites: true, // Enable retryable writes\r\n+    retryReads: true // Enable retryable reads\r\n   };\r\n \r\n   try {\r\n+    // Set mongoose debugging based on environment\r\n+    mongoose.set('debug', process.env.NODE_ENV === 'development');\r\n+    \r\n     const conn = await mongoose.connect(process.env.MONGO_URI, options);\r\n     \r\n     // Connection events for better debugging\r\n     mongoose.connection.on('connected', () => {\r\n-      console.log(`MongoDB connected: ${conn.connection.host}`);\r\n+      console.log(`✅ MongoDB connected: ${conn.connection.host}`);\r\n+      console.log(`  - Database: ${conn.connection.name}`);\r\n+      console.log(`  - Port: ${conn.connection.port}`);\r\n     });\r\n \r\n     mongoose.connection.on('error', (err) => {\r\n-      console.error('MongoDB connection error:', err);\r\n+      console.error('❌ MongoDB connection error:', err);\r\n     });\r\n \r\n     mongoose.connection.on('disconnected', () => {\r\n-      console.warn('MongoDB disconnected');\r\n+      console.warn('⚠️ MongoDB disconnected');\r\n     });\r\n \r\n+    mongoose.connection.on('reconnected', () => {\r\n+      console.log('♻️ MongoDB reconnected');\r\n+    });\r\n+\r\n     // Close the Mongoose connection when Node process ends\r\n     process.on('SIGINT', async () => {\r\n-      await mongoose.connection.close();\r\n-      console.log('MongoDB connection closed due to app termination');\r\n-      process.exit(0);\r\n+      try {\r\n+        await mongoose.connection.close();\r\n+        console.log('🛑 MongoDB connection closed due to app termination');\r\n+        process.exit(0);\r\n+      } catch (err) {\r\n+        console.error('Error closing MongoDB connection:', err);\r\n+        process.exit(1);\r\n+      }\r\n     });\r\n \r\n     return conn;\r\n   } catch (err) {\r\n-    console.error(\"MongoDB connection failed:\", err.message);\r\n+    console.error(\"❌ MongoDB connection failed:\", err.message);\r\n     \r\n-    // More detailed error handling\r\n-    if (err.name === 'MongooseServerSelectionError') {\r\n-      console.error('Could not connect to any servers in your MongoDB Atlas cluster');\r\n-    } else if (err.name === 'MongoParseError') {\r\n-      console.error('Invalid MongoDB connection string');\r\n+    // Enhanced error handling\r\n+    switch (err.name) {\r\n+      case 'MongooseServerSelectionError':\r\n+        console.error('  - Could not connect to any servers in your MongoDB cluster');\r\n+        console.error('  - Check your network connection and MongoDB URI');\r\n+        break;\r\n+      case 'MongoParseError':\r\n+        console.error('  - Invalid MongoDB connection string format');\r\n+        console.error('  - Expected format: mongodb+srv://user:password@cluster.example.com/dbname');\r\n+        break;\r\n+      case 'MongoNetworkError':\r\n+        console.error('  - Network connectivity issue');\r\n+        console.error('  - Check your internet connection and firewall settings');\r\n+        break;\r\n+      default:\r\n+        console.error('  - Unexpected connection error');\r\n     }\r\n     \r\n     process.exit(1);\r\n   }\r\n"
                }
            ],
            "date": 1753433360800,
            "name": "Commit-0",
            "content": "const mongoose = require(\"mongoose\");\r\n\r\nconst connectDB = async () => {\r\n  try {\r\n    const conn = await mongoose.connect(process.env.MONGO_URI || \"mongodb://localhost:27017/your-db-name\");\r\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\r\n  } catch (err) {\r\n    console.error(\"MongoDB connection failed:\", err);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\nmodule.exports = connectDB;\r\n"
        }
    ]
}