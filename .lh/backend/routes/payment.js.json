{
    "sourceFile": "backend/routes/payment.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753713374958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754821134446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,137 @@\n const express = require(\"express\");\r\n const router = express.Router();\r\n-const Paystack = require(\"paystack-api\")(process.env.PAYSTACK_SECRET_KEY);\r\n+const crypto = require(\"crypto\");\r\n \r\n-// Initialize Payment\r\n+// PayFast Configuration\r\n+const PAYFAST_CONFIG = {\r\n+  merchant_id: process.env.PAYFAST_MERCHANT_ID,\r\n+  merchant_key: process.env.PAYFAST_MERCHANT_KEY,\r\n+  passphrase: process.env.PAYFAST_PASSPHRASE,\r\n+  sandbox: process.env.PAYFAST_ENV === 'sandbox',\r\n+  return_url: process.env.PAYFAST_RETURN_URL,\r\n+  cancel_url: process.env.PAYFAST_CANCEL_URL,\r\n+  notify_url: process.env.PAYFAST_NOTIFY_URL\r\n+};\r\n+\r\n+// Generate PayFast signature\r\n+const generateSignature = (data) => {\r\n+  let signatureString = '';\r\n+  \r\n+  Object.keys(data).sort().forEach(key => {\r\n+    if (data[key] !== '') {\r\n+      signatureString += `${key}=${encodeURIComponent(data[key]).replace(/%20/g, '+')}&`;\r\n+    }\r\n+  });\r\n+  \r\n+  signatureString = signatureString.slice(0, -1);\r\n+  \r\n+  if (PAYFAST_CONFIG.passphrase) {\r\n+    signatureString += `&passphrase=${PAYFAST_CONFIG.passphrase}`;\r\n+  }\r\n+  \r\n+  return crypto.createHash(\"md5\").update(signatureString).digest(\"hex\");\r\n+};\r\n+\r\n+// Initialize Payment (now for PayFast)\r\n router.post(\"/init-payment\", async (req, res) => {\r\n   try {\r\n-    const { email, amount } = req.body;\r\n+    const { email, amount, name } = req.body;\r\n \r\n-    const response = await Paystack.transaction.initialize({\r\n-      email,\r\n-      amount: amount * 100, // Paystack uses kobo/cent (e.g., 5000 = ₦50)\r\n-      currency: \"NGN\", // 'GHS', 'USD', 'ZAR' for other countries\r\n-      callback_url: \"http://localhost:3000/verify-payment\", // Frontend callback\r\n+    // Validate minimum amount (R200)\r\n+    if (parseFloat(amount) < 200) {\r\n+      return res.status(400).json({ \r\n+        error: 'Minimum payment amount is R200' \r\n+      });\r\n+    }\r\n+\r\n+    // Prepare PayFast payment data\r\n+    const paymentData = {\r\n+      merchant_id: PAYFAST_CONFIG.merchant_id,\r\n+      merchant_key: PAYFAST_CONFIG.merchant_key,\r\n+      return_url: PAYFAST_CONFIG.return_url,\r\n+      cancel_url: PAYFAST_CONFIG.cancel_url,\r\n+      notify_url: PAYFAST_CONFIG.notify_url,\r\n+      name_first: name.split(' ')[0],\r\n+      name_last: name.split(' ')[1] || '',\r\n+      email_address: email,\r\n+      m_payment_id: `order-${Date.now()}`,\r\n+      amount: parseFloat(amount).toFixed(2),\r\n+      item_name: 'Service Payment',\r\n+      item_description: 'Payment for services rendered'\r\n+    };\r\n+\r\n+    // Generate signature\r\n+    paymentData.signature = generateSignature(paymentData);\r\n+\r\n+    // Determine PayFast URL (sandbox or production)\r\n+    const payfastUrl = PAYFAST_CONFIG.sandbox\r\n+      ? 'https://sandbox.payfast.co.za/eng/process'\r\n+      : 'https://www.payfast.co.za/eng/process';\r\n+\r\n+    // Return payment URL to frontend\r\n+    res.json({\r\n+      paymentUrl: `${payfastUrl}?${new URLSearchParams(paymentData).toString()}`,\r\n+      paymentData\r\n     });\r\n \r\n-    res.json({ paymentUrl: response.data.authorization_url });\r\n   } catch (error) {\r\n-    res.status(500).json({ error: error.message });\r\n+    console.error('Payment initiation error:', error);\r\n+    res.status(500).json({ error: 'Failed to initiate payment' });\r\n   }\r\n });\r\n \r\n-// Verify Payment (Callback)\r\n-router.get(\"/verify-payment/:reference\", async (req, res) => {\r\n-  try {\r\n-    const { reference } = req.params;\r\n-    const response = await Paystack.transaction.verify(reference);\r\n+// ITN (Instant Transaction Notification) Handler\r\n+router.post(\"/payfast-notify\", (req, res) => {\r\n+  const data = req.body;\r\n+  const signature = generateSignature(data);\r\n \r\n-    if (response.data.status === \"success\") {\r\n-      res.json({ success: true, data: response.data });\r\n-    } else {\r\n-      res.json({ success: false, error: \"Payment failed\" });\r\n-    }\r\n-  } catch (error) {\r\n-    res.status(500).json({ error: error.message });\r\n+  // Verify signature\r\n+  if (signature !== data.signature) {\r\n+    console.error('Invalid ITN signature');\r\n+    return res.status(400).send('Invalid signature');\r\n   }\r\n+\r\n+  // Process payment status\r\n+  const paymentStatus = data.payment_status;\r\n+  const orderId = data.m_payment_id;\r\n+  const amount = data.amount_gross;\r\n+\r\n+  console.log(`Payment Notification for ${orderId}:`, {\r\n+    status: paymentStatus,\r\n+    amount: amount,\r\n+    pf_payment_id: data.pf_payment_id\r\n+  });\r\n+\r\n+  // Handle different payment statuses\r\n+  switch (paymentStatus) {\r\n+    case 'COMPLETE':\r\n+      // Update your database here\r\n+      console.log(`Payment ${orderId} completed successfully`);\r\n+      break;\r\n+    case 'FAILED':\r\n+      console.log(`Payment ${orderId} failed`);\r\n+      break;\r\n+    case 'PENDING':\r\n+      console.log(`Payment ${orderId} is pending`);\r\n+      break;\r\n+    default:\r\n+      console.log(`Payment ${orderId} has unknown status: ${paymentStatus}`);\r\n+  }\r\n+\r\n+  res.status(200).send('OK');\r\n });\r\n \r\n+// Payment Return Handler\r\n+router.get(\"/payment-return\", (req, res) => {\r\n+  const status = req.query.payment_status;\r\n+  \r\n+  if (status === 'COMPLETE') {\r\n+    // Successful payment - redirect to success page\r\n+    res.redirect('/payment/success');\r\n+  } else {\r\n+    // Cancelled or failed payment\r\n+    res.redirect('/payment/cancel');\r\n+  }\r\n+});\r\n+\r\n module.exports = router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1753713374958,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\r\nconst router = express.Router();\r\nconst Paystack = require(\"paystack-api\")(process.env.PAYSTACK_SECRET_KEY);\r\n\r\n// Initialize Payment\r\nrouter.post(\"/init-payment\", async (req, res) => {\r\n  try {\r\n    const { email, amount } = req.body;\r\n\r\n    const response = await Paystack.transaction.initialize({\r\n      email,\r\n      amount: amount * 100, // Paystack uses kobo/cent (e.g., 5000 = ₦50)\r\n      currency: \"NGN\", // 'GHS', 'USD', 'ZAR' for other countries\r\n      callback_url: \"http://localhost:3000/verify-payment\", // Frontend callback\r\n    });\r\n\r\n    res.json({ paymentUrl: response.data.authorization_url });\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n});\r\n\r\n// Verify Payment (Callback)\r\nrouter.get(\"/verify-payment/:reference\", async (req, res) => {\r\n  try {\r\n    const { reference } = req.params;\r\n    const response = await Paystack.transaction.verify(reference);\r\n\r\n    if (response.data.status === \"success\") {\r\n      res.json({ success: true, data: response.data });\r\n    } else {\r\n      res.json({ success: false, error: \"Payment failed\" });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}