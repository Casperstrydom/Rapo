{
    "sourceFile": "backend/models/models.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1753435473631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753435970334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,12 @@\n   utilityBill: { type: String },      // removed required:true\r\n   isValid: { type: Boolean, default: false },\r\n }, { _id: false });\r\n \r\n+console.log(\"User before save:\", user);\r\n+console.log(\"documentLabel:\", user.documentLabel);\r\n \r\n+\r\n // Main User schema\r\n const userSchema = new mongoose.Schema({\r\n   fullNames: { type: String, required: true },\r\n   familyName: { type: String, required: true },\r\n"
                },
                {
                    "date": 1753436011441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,9 @@\n   utilityBill: { type: String },      // removed required:true\r\n   isValid: { type: Boolean, default: false },\r\n }, { _id: false });\r\n \r\n-console.log(\"User before save:\", user);\r\n-console.log(\"documentLabel:\", user.documentLabel);\r\n \r\n-\r\n // Main User schema\r\n const userSchema = new mongoose.Schema({\r\n   fullNames: { type: String, required: true },\r\n   familyName: { type: String, required: true },\r\n"
                },
                {
                    "date": 1753436150900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n   isValid: { type: Boolean, default: false },\r\n }, { _id: false });\r\n \r\n \r\n+console.log(\"documentLabel:\", user.documentLabel);\r\n // Main User schema\r\n const userSchema = new mongoose.Schema({\r\n   fullNames: { type: String, required: true },\r\n   familyName: { type: String, required: true },\r\n"
                },
                {
                    "date": 1753436161124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n   isValid: { type: Boolean, default: false },\r\n }, { _id: false });\r\n \r\n \r\n-console.log(\"documentLabel:\", user.documentLabel);\r\n // Main User schema\r\n const userSchema = new mongoose.Schema({\r\n   fullNames: { type: String, required: true },\r\n   familyName: { type: String, required: true },\r\n"
                },
                {
                    "date": 1753436338353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,58 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n \r\n // Subschema for required document verification (for 528 users)\r\n-const documentSchema = new mongoose.Schema({\r\n-  politicalDeclaration: { type: String },  // removed required:true\r\n-  witnessTestimonies: [{ type: String }], \r\n-  idDocument: {\r\n-    type: String,\r\n-    enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n-    // required: true,  <-- remove this\r\n+const documentSchema = new mongoose.Schema(\r\n+  {\r\n+    politicalDeclaration: { type: String },\r\n+    witnessTestimonies: [{ type: String }],\r\n+    idDocument: {\r\n+      type: String,\r\n+      enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n+    },\r\n+    idDocumentFile: { type: String },\r\n+    photoWithWhiteBg: { type: String },\r\n+    redThumbprint: { type: String },\r\n+    utilityBill: { type: String },\r\n+    isValid: { type: Boolean, default: false },\r\n   },\r\n-  idDocumentFile: { type: String },  // removed required:true\r\n-  photoWithWhiteBg: { type: String }, // removed required:true\r\n-  redThumbprint: { type: String },    // removed required:true\r\n-  utilityBill: { type: String },      // removed required:true\r\n-  isValid: { type: Boolean, default: false },\r\n-}, { _id: false });\r\n+  { _id: false }\r\n+);\r\n \r\n-\r\n // Main User schema\r\n-const userSchema = new mongoose.Schema({\r\n-  fullNames: { type: String, required: true },\r\n-  familyName: { type: String, required: true },\r\n-  email: { type: String, required: true, unique: true },\r\n-  password: { type: String, required: true },\r\n-  gfgNumber: { type: String, required: true },\r\n-  documentLabel: {\r\n-    type: String,\r\n-    enum: [\"528\", \"928\", \"Praecipe\"],\r\n-    required: true,\r\n-  },\r\n-  documentRequirements: {\r\n-    type: documentSchema,\r\n-    required: function () {\r\n-      return this.documentLabel === \"528\";\r\n+const userSchema = new mongoose.Schema(\r\n+  {\r\n+    fullNames: { type: String, required: true },\r\n+    familyName: { type: String, required: true },\r\n+    email: { type: String, required: true, unique: true },\r\n+    password: { type: String, required: true },\r\n+    gfgNumber: { type: String, required: true },\r\n+    documentLabel: {\r\n+      type: String,\r\n+      enum: [\"528\", \"928\", \"Praecipe\"],\r\n+      required: true,\r\n     },\r\n+    documentRequirements: {\r\n+      type: documentSchema,\r\n+      required: function () {\r\n+        return this.documentLabel === \"528\";\r\n+      },\r\n+    },\r\n+    profileImage: { type: String },         // Optional: path or URL\r\n+    profileImageKey: { type: String },      // Optional: for cloud storage (e.g., S3 key)\r\n   },\r\n-}, { timestamps: true });\r\n+  { timestamps: true }\r\n+);\r\n \r\n // 🔒 Hash password and gfgNumber before saving\r\n userSchema.pre(\"save\", async function (next) {\r\n   try {\r\n-    // Hash password if modified\r\n     if (this.isModified(\"password\")) {\r\n       const salt = await bcrypt.genSalt(10);\r\n       this.password = await bcrypt.hash(this.password, salt);\r\n     }\r\n \r\n-    // Hash gfgNumber if modified\r\n     if (this.isModified(\"gfgNumber\")) {\r\n       const salt = await bcrypt.genSalt(10);\r\n       this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n     }\r\n"
                },
                {
                    "date": 1753436530869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Subschema for required document verification (for 528 users)\r\n+// 📄 Subschema for 528-specific document verification\r\n const documentSchema = new mongoose.Schema(\r\n   {\r\n     politicalDeclaration: { type: String },\r\n     witnessTestimonies: [{ type: String }],\r\n@@ -18,34 +18,53 @@\n   },\r\n   { _id: false }\r\n );\r\n \r\n-// Main User schema\r\n+// 👤 Main user schema\r\n const userSchema = new mongoose.Schema(\r\n   {\r\n-    fullNames: { type: String, required: true },\r\n-    familyName: { type: String, required: true },\r\n-    email: { type: String, required: true, unique: true },\r\n-    password: { type: String, required: true },\r\n-    gfgNumber: { type: String, required: true },\r\n+    fullNames: {\r\n+      type: String,\r\n+      required: [true, \"Full names are required\"],\r\n+      trim: true,\r\n+    },\r\n+    familyName: {\r\n+      type: String,\r\n+      required: [true, \"Family name is required\"],\r\n+      trim: true,\r\n+    },\r\n+    email: {\r\n+      type: String,\r\n+      required: [true, \"Email is required\"],\r\n+      unique: true,\r\n+      lowercase: true,\r\n+      trim: true,\r\n+    },\r\n+    password: {\r\n+      type: String,\r\n+      required: [true, \"Password is required\"],\r\n+      minlength: 6,\r\n+    },\r\n+    gfgNumber: {\r\n+      type: String,\r\n+      required: [true, \"GFG number is required\"],\r\n+    },\r\n     documentLabel: {\r\n       type: String,\r\n       enum: [\"528\", \"928\", \"Praecipe\"],\r\n-      required: true,\r\n+      required: [true, \"Document label is required\"],\r\n     },\r\n     documentRequirements: {\r\n       type: documentSchema,\r\n       required: function () {\r\n         return this.documentLabel === \"528\";\r\n       },\r\n     },\r\n-    profileImage: { type: String },         // Optional: path or URL\r\n-    profileImageKey: { type: String },      // Optional: for cloud storage (e.g., S3 key)\r\n   },\r\n   { timestamps: true }\r\n );\r\n \r\n-// 🔒 Hash password and gfgNumber before saving\r\n+// 🔒 Hash password and GFG number before saving\r\n userSchema.pre(\"save\", async function (next) {\r\n   try {\r\n     if (this.isModified(\"password\")) {\r\n       const salt = await bcrypt.genSalt(10);\r\n@@ -62,14 +81,13 @@\n     next(err);\r\n   }\r\n });\r\n \r\n-// 🔐 Compare password\r\n+// 🧠 Instance methods\r\n userSchema.methods.comparePassword = async function (candidatePassword) {\r\n   return bcrypt.compare(candidatePassword, this.password);\r\n };\r\n \r\n-// 🔐 Compare gfgNumber\r\n userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n   return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n };\r\n \r\n"
                },
                {
                    "date": 1753436760038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,11 @@\n       required: function () {\r\n         return this.documentLabel === \"528\";\r\n       },\r\n     },\r\n+    profileImage: {\r\n+      type: String, // path or URL to the profile image\r\n+    },\r\n   },\r\n   { timestamps: true }\r\n );\r\n \r\n@@ -81,9 +84,9 @@\n     next(err);\r\n   }\r\n });\r\n \r\n-// 🧠 Instance methods\r\n+// 🧠 Instance methods for authentication\r\n userSchema.methods.comparePassword = async function (candidatePassword) {\r\n   return bcrypt.compare(candidatePassword, this.password);\r\n };\r\n \r\n"
                },
                {
                    "date": 1753442161495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+const mongoose = require(\"mongoose\");\r\n+const bcrypt = require(\"bcryptjs\");\r\n+\r\n+const documentSchema = new mongoose.Schema(\r\n+  {\r\n+    politicalDeclaration: { type: String },\r\n+    witnessTestimonies: [{ type: String }],\r\n+    idDocument: {\r\n+      type: String,\r\n+      enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n+    },\r\n+    idDocumentFile: { type: String },\r\n+    photoWithWhiteBg: { type: String },\r\n+    redThumbprint: { type: String },\r\n+    utilityBill: { type: String },\r\n+    isValid: { type: Boolean, default: false },\r\n+  },\r\n+  { _id: false }\r\n+);\r\n+\r\n+const userSchema = new mongoose.Schema(\r\n+  {\r\n+    fullNames: { type: String, required: true, trim: true },\r\n+    familyName: { type: String, required: true, trim: true },\r\n+    email: { type: String, required: true, unique: true, lowercase: true, trim: true },\r\n+    password: { type: String, required: true, minlength: 6 },\r\n+    gfgNumber: { type: String, required: true },\r\n+    documentLabel: { type: String, enum: [\"528\", \"928\", \"Praecipe\"], required: true },\r\n+    documentRequirements: {\r\n+      type: documentSchema,\r\n+      required: function () {\r\n+        return this.documentLabel === \"528\";\r\n+      },\r\n+    },\r\n+    profileImage: { type: String },\r\n+  },\r\n+  { timestamps: true }\r\n+);\r\n+\r\n+userSchema.pre(\"save\", async function (next) {\r\n+  if (this.isModified(\"password\")) {\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    this.password = await bcrypt.hash(this.password, salt);\r\n+  }\r\n+  if (this.isModified(\"gfgNumber\")) {\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n+  }\r\n+  next();\r\n+});\r\n+\r\n+userSchema.methods.comparePassword = async function (candidatePassword) {\r\n+  return bcrypt.compare(candidatePassword, this.password);\r\n+};\r\n+\r\n+userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n+  return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n+};\r\n+\r\n+module.exports = mongoose.model(\"User\", userSchema);\r\n"
                },
                {
                    "date": 1753442482874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,13 @@\n const bcrypt = require(\"bcryptjs\");\r\n \r\n const documentSchema = new mongoose.Schema(\r\n   {\r\n-    politicalDeclaration: { type: String },\r\n-    witnessTestimonies: [{ type: String }],\r\n-    idDocument: {\r\n-      type: String,\r\n-      enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n-    },\r\n-    idDocumentFile: { type: String },\r\n+    politicalDeclaration: { type: String }, // file path string\r\n+    witnessTestimonies: [{ type: String }], // array of file path strings\r\n+    // Removed enum restriction here to allow any idDocument type string\r\n+    idDocument: { type: String }, // e.g. \"DriverLicense\", \"Passport\", etc., no enum restriction\r\n+    idDocumentFile: { type: String }, // file path string\r\n     photoWithWhiteBg: { type: String },\r\n     redThumbprint: { type: String },\r\n     utilityBill: { type: String },\r\n     isValid: { type: Boolean, default: false },\r\n@@ -31,9 +29,9 @@\n       required: function () {\r\n         return this.documentLabel === \"528\";\r\n       },\r\n     },\r\n-    profileImage: { type: String },\r\n+    profileImage: { type: String }, // file path string\r\n   },\r\n   { timestamps: true }\r\n );\r\n \r\n@@ -57,101 +55,4 @@\n   return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n };\r\n \r\n module.exports = mongoose.model(\"User\", userSchema);\r\n-const mongoose = require(\"mongoose\");\r\n-const bcrypt = require(\"bcryptjs\");\r\n-\r\n-// 📄 Subschema for 528-specific document verification\r\n-const documentSchema = new mongoose.Schema(\r\n-  {\r\n-    politicalDeclaration: { type: String },\r\n-    witnessTestimonies: [{ type: String }],\r\n-    idDocument: {\r\n-      type: String,\r\n-      enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n-    },\r\n-    idDocumentFile: { type: String },\r\n-    photoWithWhiteBg: { type: String },\r\n-    redThumbprint: { type: String },\r\n-    utilityBill: { type: String },\r\n-    isValid: { type: Boolean, default: false },\r\n-  },\r\n-  { _id: false }\r\n-);\r\n-\r\n-// 👤 Main user schema\r\n-const userSchema = new mongoose.Schema(\r\n-  {\r\n-    fullNames: {\r\n-      type: String,\r\n-      required: [true, \"Full names are required\"],\r\n-      trim: true,\r\n-    },\r\n-    familyName: {\r\n-      type: String,\r\n-      required: [true, \"Family name is required\"],\r\n-      trim: true,\r\n-    },\r\n-    email: {\r\n-      type: String,\r\n-      required: [true, \"Email is required\"],\r\n-      unique: true,\r\n-      lowercase: true,\r\n-      trim: true,\r\n-    },\r\n-    password: {\r\n-      type: String,\r\n-      required: [true, \"Password is required\"],\r\n-      minlength: 6,\r\n-    },\r\n-    gfgNumber: {\r\n-      type: String,\r\n-      required: [true, \"GFG number is required\"],\r\n-    },\r\n-    documentLabel: {\r\n-      type: String,\r\n-      enum: [\"528\", \"928\", \"Praecipe\"],\r\n-      required: [true, \"Document label is required\"],\r\n-    },\r\n-    documentRequirements: {\r\n-      type: documentSchema,\r\n-      required: function () {\r\n-        return this.documentLabel === \"528\";\r\n-      },\r\n-    },\r\n-    profileImage: {\r\n-      type: String, // path or URL to the profile image\r\n-    },\r\n-  },\r\n-  { timestamps: true }\r\n-);\r\n-\r\n-// 🔒 Hash password and GFG number before saving\r\n-userSchema.pre(\"save\", async function (next) {\r\n-  try {\r\n-    if (this.isModified(\"password\")) {\r\n-      const salt = await bcrypt.genSalt(10);\r\n-      this.password = await bcrypt.hash(this.password, salt);\r\n-    }\r\n-\r\n-    if (this.isModified(\"gfgNumber\")) {\r\n-      const salt = await bcrypt.genSalt(10);\r\n-      this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n-    }\r\n-\r\n-    next();\r\n-  } catch (err) {\r\n-    next(err);\r\n-  }\r\n-});\r\n-\r\n-// 🧠 Instance methods for authentication\r\n-userSchema.methods.comparePassword = async function (candidatePassword) {\r\n-  return bcrypt.compare(candidatePassword, this.password);\r\n-};\r\n-\r\n-userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n-  return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n-};\r\n-\r\n-module.exports = mongoose.model(\"User\", userSchema);\r\n"
                },
                {
                    "date": 1753442722578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,23 @@\n const userSchema = new mongoose.Schema(\r\n   {\r\n     fullNames: { type: String, required: true, trim: true },\r\n     familyName: { type: String, required: true, trim: true },\r\n-    email: { type: String, required: true, unique: true, lowercase: true, trim: true },\r\n+    email: {\r\n+      type: String,\r\n+      required: true,\r\n+      unique: true,\r\n+      lowercase: true,\r\n+      trim: true,\r\n+    },\r\n     password: { type: String, required: true, minlength: 6 },\r\n     gfgNumber: { type: String, required: true },\r\n-    documentLabel: { type: String, enum: [\"528\", \"928\", \"Praecipe\"], required: true },\r\n+    documentLabel: {\r\n+      type: String,\r\n+      enum: [\"528\", \"928\", \"Praecipe\"],\r\n+      required: false,\r\n+      default: \"528\",\r\n+    },\r\n     documentRequirements: {\r\n       type: documentSchema,\r\n       required: function () {\r\n         return this.documentLabel === \"528\";\r\n"
                },
                {
                    "date": 1753448548669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,68 +2,242 @@\n const bcrypt = require(\"bcryptjs\");\r\n \r\n const documentSchema = new mongoose.Schema(\r\n   {\r\n-    politicalDeclaration: { type: String }, // file path string\r\n-    witnessTestimonies: [{ type: String }], // array of file path strings\r\n-    // Removed enum restriction here to allow any idDocument type string\r\n-    idDocument: { type: String }, // e.g. \"DriverLicense\", \"Passport\", etc., no enum restriction\r\n-    idDocumentFile: { type: String }, // file path string\r\n-    photoWithWhiteBg: { type: String },\r\n-    redThumbprint: { type: String },\r\n-    utilityBill: { type: String },\r\n-    isValid: { type: Boolean, default: false },\r\n+    politicalDeclaration: { \r\n+      type: String,\r\n+      validate: {\r\n+        validator: function(v) {\r\n+          return v.startsWith('/uploads/');\r\n+        },\r\n+        message: props => `File path must start with '/uploads/'`\r\n+      }\r\n+    },\r\n+    witnessTestimonies: [{ \r\n+      type: String,\r\n+      validate: {\r\n+        validator: function(v) {\r\n+          return v.startsWith('/uploads/');\r\n+        },\r\n+        message: props => `File path must start with '/uploads/'`\r\n+      }\r\n+    }],\r\n+    idDocument: { \r\n+      type: String,\r\n+      enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n+      required: function() {\r\n+        return this.documentLabel === \"528\";\r\n+      }\r\n+    },\r\n+    idDocumentFile: { \r\n+      type: String,\r\n+      validate: {\r\n+        validator: function(v) {\r\n+          return v.startsWith('/uploads/');\r\n+        },\r\n+        message: props => `File path must start with '/uploads/'`\r\n+      },\r\n+      required: function() {\r\n+        return this.documentLabel === \"528\";\r\n+      }\r\n+    },\r\n+    photoWithWhiteBg: { \r\n+      type: String,\r\n+      validate: {\r\n+        validator: function(v) {\r\n+          return v.startsWith('/uploads/');\r\n+        },\r\n+        message: props => `File path must start with '/uploads/'`\r\n+      },\r\n+      required: function() {\r\n+        return this.documentLabel === \"528\";\r\n+      }\r\n+    },\r\n+    redThumbprint: { \r\n+      type: String,\r\n+      validate: {\r\n+        validator: function(v) {\r\n+          return v.startsWith('/uploads/');\r\n+        },\r\n+        message: props => `File path must start with '/uploads/'`\r\n+      },\r\n+      required: function() {\r\n+        return this.documentLabel === \"528\";\r\n+      }\r\n+    },\r\n+    utilityBill: { \r\n+      type: String,\r\n+      validate: {\r\n+        validator: function(v) {\r\n+          return v.startsWith('/uploads/');\r\n+        },\r\n+        message: props => `File path must start with '/uploads/'`\r\n+      },\r\n+      required: function() {\r\n+        return this.documentLabel === \"528\";\r\n+      }\r\n+    },\r\n+    isValid: { \r\n+      type: Boolean, \r\n+      default: false \r\n+    },\r\n   },\r\n-  { _id: false }\r\n+  { \r\n+    _id: false,\r\n+    timestamps: true \r\n+  }\r\n );\r\n \r\n const userSchema = new mongoose.Schema(\r\n   {\r\n-    fullNames: { type: String, required: true, trim: true },\r\n-    familyName: { type: String, required: true, trim: true },\r\n+    fullNames: { \r\n+      type: String, \r\n+      required: [true, \"Full names are required\"],\r\n+      trim: true,\r\n+      minlength: [2, \"Full names must be at least 2 characters\"],\r\n+      maxlength: [100, \"Full names cannot exceed 100 characters\"]\r\n+    },\r\n+    familyName: { \r\n+      type: String, \r\n+      required: [true, \"Family name is required\"],\r\n+      trim: true,\r\n+      minlength: [2, \"Family name must be at least 2 characters\"],\r\n+      maxlength: [50, \"Family name cannot exceed 50 characters\"]\r\n+    },\r\n     email: {\r\n       type: String,\r\n-      required: true,\r\n+      required: [true, \"Email is required\"],\r\n       unique: true,\r\n       lowercase: true,\r\n       trim: true,\r\n+      validate: {\r\n+        validator: function(v) {\r\n+          return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v);\r\n+        },\r\n+        message: props => `${props.value} is not a valid email address`\r\n+      }\r\n     },\r\n-    password: { type: String, required: true, minlength: 6 },\r\n-    gfgNumber: { type: String, required: true },\r\n+    password: { \r\n+      type: String, \r\n+      required: [true, \"Password is required\"],\r\n+      minlength: [8, \"Password must be at least 8 characters\"],\r\n+      select: false\r\n+    },\r\n+    gfgNumber: { \r\n+      type: String, \r\n+      required: [true, \"GFG number is required\"],\r\n+      validate: {\r\n+        validator: function(v) {\r\n+          return /^\\d{14}$/.test(v);\r\n+        },\r\n+        message: props => `GFG number must be exactly 14 digits`\r\n+      },\r\n+      select: false\r\n+    },\r\n     documentLabel: {\r\n       type: String,\r\n-      enum: [\"528\", \"928\", \"Praecipe\"],\r\n-      required: false,\r\n-      default: \"528\",\r\n+      enum: {\r\n+        values: [\"528\", \"928\", \"Praecipe\"],\r\n+        message: \"Document label must be either 528, 928, or Praecipe\"\r\n+      },\r\n+      default: \"528\"\r\n     },\r\n     documentRequirements: {\r\n       type: documentSchema,\r\n-      required: function () {\r\n+      required: function() {\r\n         return this.documentLabel === \"528\";\r\n-      },\r\n+      }\r\n     },\r\n-    profileImage: { type: String }, // file path string\r\n+    profileImage: { \r\n+      type: String,\r\n+      validate: {\r\n+        validator: function(v) {\r\n+          return v.startsWith('/uploads/');\r\n+        },\r\n+        message: props => `Profile image path must start with '/uploads/'`\r\n+      }\r\n+    },\r\n+    lastLogin: {\r\n+      type: Date\r\n+    },\r\n+    status: {\r\n+      type: String,\r\n+      enum: [\"active\", \"suspended\", \"pending\"],\r\n+      default: \"active\"\r\n+    }\r\n   },\r\n-  { timestamps: true }\r\n+  { \r\n+    timestamps: true,\r\n+    toJSON: {\r\n+      virtuals: true,\r\n+      transform: function(doc, ret) {\r\n+        delete ret.password;\r\n+        delete ret.gfgNumber;\r\n+        delete ret.__v;\r\n+        return ret;\r\n+      }\r\n+    },\r\n+    toObject: {\r\n+      virtuals: true,\r\n+      transform: function(doc, ret) {\r\n+        delete ret.password;\r\n+        delete ret.gfgNumber;\r\n+        delete ret.__v;\r\n+        return ret;\r\n+      }\r\n+    }\r\n+  }\r\n );\r\n \r\n-userSchema.pre(\"save\", async function (next) {\r\n+// Improved pre-save hooks with error handling\r\n+userSchema.pre(\"save\", async function(next) {\r\n   if (this.isModified(\"password\")) {\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    this.password = await bcrypt.hash(this.password, salt);\r\n+    try {\r\n+      const salt = await bcrypt.genSalt(12);\r\n+      this.password = await bcrypt.hash(this.password, salt);\r\n+    } catch (error) {\r\n+      console.error(\"Password hashing error:\", error);\r\n+      return next(error);\r\n+    }\r\n   }\r\n+\r\n   if (this.isModified(\"gfgNumber\")) {\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n+    try {\r\n+      const salt = await bcrypt.genSalt(12);\r\n+      this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n+    } catch (error) {\r\n+      console.error(\"GFG number hashing error:\", error);\r\n+      return next(error);\r\n+    }\r\n   }\r\n   next();\r\n });\r\n \r\n-userSchema.methods.comparePassword = async function (candidatePassword) {\r\n-  return bcrypt.compare(candidatePassword, this.password);\r\n+// Add instance methods\r\n+userSchema.methods.comparePassword = async function(candidatePassword) {\r\n+  try {\r\n+    return await bcrypt.compare(candidatePassword, this.password);\r\n+  } catch (error) {\r\n+    console.error(\"Password comparison error:\", error);\r\n+    throw error;\r\n+  }\r\n };\r\n \r\n-userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n-  return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n+userSchema.methods.compareGfgNumber = async function(candidateGfgNumber) {\r\n+  try {\r\n+    return await bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n+  } catch (error) {\r\n+    console.error(\"GFG number comparison error:\", error);\r\n+    throw error;\r\n+  }\r\n };\r\n \r\n-module.exports = mongoose.model(\"User\", userSchema);\r\n+// Add static methods\r\n+userSchema.statics.findByEmail = function(email) {\r\n+  return this.findOne({ email: { $regex: new RegExp(`^${email}$`, 'i') } });\r\n+};\r\n+\r\n+// Add indexes\r\n+userSchema.index({ email: 1 }, { unique: true });\r\n+userSchema.index({ fullNames: 'text', familyName: 'text' });\r\n+\r\n+module.exports = mongoose.model(\"User\", userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753450089699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,242 +2,57 @@\n const bcrypt = require(\"bcryptjs\");\r\n \r\n const documentSchema = new mongoose.Schema(\r\n   {\r\n-    politicalDeclaration: { \r\n-      type: String,\r\n-      validate: {\r\n-        validator: function(v) {\r\n-          return v.startsWith('/uploads/');\r\n-        },\r\n-        message: props => `File path must start with '/uploads/'`\r\n-      }\r\n-    },\r\n-    witnessTestimonies: [{ \r\n-      type: String,\r\n-      validate: {\r\n-        validator: function(v) {\r\n-          return v.startsWith('/uploads/');\r\n-        },\r\n-        message: props => `File path must start with '/uploads/'`\r\n-      }\r\n-    }],\r\n-    idDocument: { \r\n-      type: String,\r\n-      enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n-      required: function() {\r\n-        return this.documentLabel === \"528\";\r\n-      }\r\n-    },\r\n-    idDocumentFile: { \r\n-      type: String,\r\n-      validate: {\r\n-        validator: function(v) {\r\n-          return v.startsWith('/uploads/');\r\n-        },\r\n-        message: props => `File path must start with '/uploads/'`\r\n-      },\r\n-      required: function() {\r\n-        return this.documentLabel === \"528\";\r\n-      }\r\n-    },\r\n-    photoWithWhiteBg: { \r\n-      type: String,\r\n-      validate: {\r\n-        validator: function(v) {\r\n-          return v.startsWith('/uploads/');\r\n-        },\r\n-        message: props => `File path must start with '/uploads/'`\r\n-      },\r\n-      required: function() {\r\n-        return this.documentLabel === \"528\";\r\n-      }\r\n-    },\r\n-    redThumbprint: { \r\n-      type: String,\r\n-      validate: {\r\n-        validator: function(v) {\r\n-          return v.startsWith('/uploads/');\r\n-        },\r\n-        message: props => `File path must start with '/uploads/'`\r\n-      },\r\n-      required: function() {\r\n-        return this.documentLabel === \"528\";\r\n-      }\r\n-    },\r\n-    utilityBill: { \r\n-      type: String,\r\n-      validate: {\r\n-        validator: function(v) {\r\n-          return v.startsWith('/uploads/');\r\n-        },\r\n-        message: props => `File path must start with '/uploads/'`\r\n-      },\r\n-      required: function() {\r\n-        return this.documentLabel === \"528\";\r\n-      }\r\n-    },\r\n-    isValid: { \r\n-      type: Boolean, \r\n-      default: false \r\n-    },\r\n+    politicalDeclaration: { type: String }, // file path string\r\n+    witnessTestimonies: [{ type: String }], // array of file path strings\r\n+    // Removed enum restriction here to allow any idDocument type string\r\n+    idDocument: { type: String }, // e.g. \"DriverLicense\", \"Passport\", etc., no enum restriction\r\n+    idDocumentFile: { type: String }, // file path string\r\n+    photoWithWhiteBg: { type: String },\r\n+    redThumbprint: { type: String },\r\n+    utilityBill: { type: String },\r\n+    isValid: { type: Boolean, default: false },\r\n   },\r\n-  { \r\n-    _id: false,\r\n-    timestamps: true \r\n-  }\r\n+  { _id: false }\r\n );\r\n \r\n const userSchema = new mongoose.Schema(\r\n   {\r\n-    fullNames: { \r\n-      type: String, \r\n-      required: [true, \"Full names are required\"],\r\n-      trim: true,\r\n-      minlength: [2, \"Full names must be at least 2 characters\"],\r\n-      maxlength: [100, \"Full names cannot exceed 100 characters\"]\r\n-    },\r\n-    familyName: { \r\n-      type: String, \r\n-      required: [true, \"Family name is required\"],\r\n-      trim: true,\r\n-      minlength: [2, \"Family name must be at least 2 characters\"],\r\n-      maxlength: [50, \"Family name cannot exceed 50 characters\"]\r\n-    },\r\n-    email: {\r\n-      type: String,\r\n-      required: [true, \"Email is required\"],\r\n-      unique: true,\r\n-      lowercase: true,\r\n-      trim: true,\r\n-      validate: {\r\n-        validator: function(v) {\r\n-          return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v);\r\n-        },\r\n-        message: props => `${props.value} is not a valid email address`\r\n-      }\r\n-    },\r\n-    password: { \r\n-      type: String, \r\n-      required: [true, \"Password is required\"],\r\n-      minlength: [8, \"Password must be at least 8 characters\"],\r\n-      select: false\r\n-    },\r\n-    gfgNumber: { \r\n-      type: String, \r\n-      required: [true, \"GFG number is required\"],\r\n-      validate: {\r\n-        validator: function(v) {\r\n-          return /^\\d{14}$/.test(v);\r\n-        },\r\n-        message: props => `GFG number must be exactly 14 digits`\r\n-      },\r\n-      select: false\r\n-    },\r\n-    documentLabel: {\r\n-      type: String,\r\n-      enum: {\r\n-        values: [\"528\", \"928\", \"Praecipe\"],\r\n-        message: \"Document label must be either 528, 928, or Praecipe\"\r\n-      },\r\n-      default: \"528\"\r\n-    },\r\n+    fullNames: { type: String, required: true, trim: true },\r\n+    familyName: { type: String, required: true, trim: true },\r\n+    email: { type: String, required: true, unique: true, lowercase: true, trim: true },\r\n+    password: { type: String, required: true, minlength: 6 },\r\n+    gfgNumber: { type: String, required: true },\r\n+    documentLabel: { type: String, enum: [\"528\", \"928\", \"Praecipe\"], required: false, default: \"528\" },\r\n     documentRequirements: {\r\n       type: documentSchema,\r\n-      required: function() {\r\n+      required: function () {\r\n         return this.documentLabel === \"528\";\r\n-      }\r\n+      },\r\n     },\r\n-    profileImage: { \r\n-      type: String,\r\n-      validate: {\r\n-        validator: function(v) {\r\n-          return v.startsWith('/uploads/');\r\n-        },\r\n-        message: props => `Profile image path must start with '/uploads/'`\r\n-      }\r\n-    },\r\n-    lastLogin: {\r\n-      type: Date\r\n-    },\r\n-    status: {\r\n-      type: String,\r\n-      enum: [\"active\", \"suspended\", \"pending\"],\r\n-      default: \"active\"\r\n-    }\r\n+    profileImage: { type: String }, // file path string\r\n   },\r\n-  { \r\n-    timestamps: true,\r\n-    toJSON: {\r\n-      virtuals: true,\r\n-      transform: function(doc, ret) {\r\n-        delete ret.password;\r\n-        delete ret.gfgNumber;\r\n-        delete ret.__v;\r\n-        return ret;\r\n-      }\r\n-    },\r\n-    toObject: {\r\n-      virtuals: true,\r\n-      transform: function(doc, ret) {\r\n-        delete ret.password;\r\n-        delete ret.gfgNumber;\r\n-        delete ret.__v;\r\n-        return ret;\r\n-      }\r\n-    }\r\n-  }\r\n+  { timestamps: true }\r\n );\r\n \r\n-// Improved pre-save hooks with error handling\r\n-userSchema.pre(\"save\", async function(next) {\r\n+userSchema.pre(\"save\", async function (next) {\r\n   if (this.isModified(\"password\")) {\r\n-    try {\r\n-      const salt = await bcrypt.genSalt(12);\r\n-      this.password = await bcrypt.hash(this.password, salt);\r\n-    } catch (error) {\r\n-      console.error(\"Password hashing error:\", error);\r\n-      return next(error);\r\n-    }\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    this.password = await bcrypt.hash(this.password, salt);\r\n   }\r\n-\r\n   if (this.isModified(\"gfgNumber\")) {\r\n-    try {\r\n-      const salt = await bcrypt.genSalt(12);\r\n-      this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n-    } catch (error) {\r\n-      console.error(\"GFG number hashing error:\", error);\r\n-      return next(error);\r\n-    }\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n   }\r\n   next();\r\n });\r\n \r\n-// Add instance methods\r\n-userSchema.methods.comparePassword = async function(candidatePassword) {\r\n-  try {\r\n-    return await bcrypt.compare(candidatePassword, this.password);\r\n\\ No newline at end of file\n-  } catch (error) {\r\n-    console.error(\"Password comparison error:\", error);\r\n-    throw error;\r\n-  }\r\n+userSchema.methods.comparePassword = async function (candidatePassword) {\r\n+  return bcrypt.compare(candidatePassword, this.password);\r\n };\r\n \r\n-userSchema.methods.compareGfgNumber = async function(candidateGfgNumber) {\r\n-  try {\r\n-    return await bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n-  } catch (error) {\r\n-    console.error(\"GFG number comparison error:\", error);\r\n-    throw error;\r\n-  }\r\n+userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n+  return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n };\r\n \r\n-// Add static methods\r\n-userSchema.statics.findByEmail = function(email) {\r\n-  return this.findOne({ email: { $regex: new RegExp(`^${email}$`, 'i') } });\r\n-};\r\n-\r\n-// Add indexes\r\n-userSchema.index({ email: 1 }, { unique: true });\r\n-userSchema.index({ fullNames: 'text', familyName: 'text' });\r\n-\r\n-module.exports = mongoose.model(\"User\", userSchema);\n+module.exports = mongoose.model(\"User\", userSchema);\r\n"
                },
                {
                    "date": 1753450610493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,16 +19,27 @@\n const userSchema = new mongoose.Schema(\r\n   {\r\n     fullNames: { type: String, required: true, trim: true },\r\n     familyName: { type: String, required: true, trim: true },\r\n-    email: { type: String, required: true, unique: true, lowercase: true, trim: true },\r\n+    email: {\r\n+      type: String,\r\n+      required: true,\r\n+      unique: true,\r\n+      lowercase: true,\r\n+      trim: true,\r\n+    },\r\n     password: { type: String, required: true, minlength: 6 },\r\n     gfgNumber: { type: String, required: true },\r\n-    documentLabel: { type: String, enum: [\"528\", \"928\", \"Praecipe\"], required: false, default: \"528\" },\r\n+    documentLabel: {\r\n+      type: String,\r\n+      enum: [\"528\", \"928\", \"Praecipe\"],\r\n+      required: false,\r\n+      default: \"528\",\r\n+    },\r\n     documentRequirements: {\r\n-      type: documentSchema,\r\n-      required: function () {\r\n-        return this.documentLabel === \"528\";\r\n+      documentRequirements: {\r\n+        type: documentSchema,\r\n+        required: false, // ← make it optional unconditionally\r\n       },\r\n     },\r\n     profileImage: { type: String }, // file path string\r\n   },\r\n"
                },
                {
                    "date": 1753451194913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,64 +1,89 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n \r\n+// 📄 Subschema for 528-specific document verification\r\n const documentSchema = new mongoose.Schema(\r\n   {\r\n-    politicalDeclaration: { type: String }, // file path string\r\n-    witnessTestimonies: [{ type: String }], // array of file path strings\r\n-    // Removed enum restriction here to allow any idDocument type string\r\n-    idDocument: { type: String }, // e.g. \"DriverLicense\", \"Passport\", etc., no enum restriction\r\n-    idDocumentFile: { type: String }, // file path string\r\n+    politicalDeclaration: { type: String },\r\n+    witnessTestimonies: [{ type: String }],\r\n+    idDocument: {\r\n+      type: String,\r\n+      enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n+    },\r\n+    idDocumentFile: { type: String },\r\n     photoWithWhiteBg: { type: String },\r\n     redThumbprint: { type: String },\r\n     utilityBill: { type: String },\r\n     isValid: { type: Boolean, default: false },\r\n   },\r\n   { _id: false }\r\n );\r\n \r\n+// 👤 Main user schema\r\n const userSchema = new mongoose.Schema(\r\n   {\r\n-    fullNames: { type: String, required: true, trim: true },\r\n-    familyName: { type: String, required: true, trim: true },\r\n+    fullNames: {\r\n+      type: String,\r\n+      required: [true, \"Full names are required\"],\r\n+      trim: true,\r\n+    },\r\n+    familyName: {\r\n+      type: String,\r\n+      required: [true, \"Family name is required\"],\r\n+      trim: true,\r\n+    },\r\n     email: {\r\n       type: String,\r\n-      required: true,\r\n+      required: [true, \"Email is required\"],\r\n       unique: true,\r\n       lowercase: true,\r\n       trim: true,\r\n     },\r\n-    password: { type: String, required: true, minlength: 6 },\r\n-    gfgNumber: { type: String, required: true },\r\n+    password: {\r\n+      type: String,\r\n+      required: [true, \"Password is required\"],\r\n+      minlength: 6,\r\n+    },\r\n+    gfgNumber: {\r\n+      type: String,\r\n+      required: [true, \"GFG number is required\"],\r\n+    },\r\n     documentLabel: {\r\n       type: String,\r\n       enum: [\"528\", \"928\", \"Praecipe\"],\r\n-      required: false,\r\n-      default: \"528\",\r\n+      required: [true, \"Document label is required\"],\r\n     },\r\n     documentRequirements: {\r\n-      documentRequirements: {\r\n-        type: documentSchema,\r\n-        required: false, // ← make it optional unconditionally\r\n+      type: documentSchema,\r\n+      required: function () {\r\n+        return this.documentLabel === \"528\";\r\n       },\r\n     },\r\n-    profileImage: { type: String }, // file path string\r\n   },\r\n   { timestamps: true }\r\n );\r\n \r\n+// 🔒 Hash password and GFG number before saving\r\n userSchema.pre(\"save\", async function (next) {\r\n-  if (this.isModified(\"password\")) {\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    this.password = await bcrypt.hash(this.password, salt);\r\n+  try {\r\n+    if (this.isModified(\"password\")) {\r\n+      const salt = await bcrypt.genSalt(10);\r\n+      this.password = await bcrypt.hash(this.password, salt);\r\n+    }\r\n+\r\n+    if (this.isModified(\"gfgNumber\")) {\r\n+      const salt = await bcrypt.genSalt(10);\r\n+      this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n+    }\r\n+\r\n+    next();\r\n+  } catch (err) {\r\n+    next(err);\r\n   }\r\n-  if (this.isModified(\"gfgNumber\")) {\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n-  }\r\n-  next();\r\n });\r\n \r\n+// 🧠 Instance methods\r\n userSchema.methods.comparePassword = async function (candidatePassword) {\r\n   return bcrypt.compare(candidatePassword, this.password);\r\n };\r\n \r\n"
                },
                {
                    "date": 1753451826381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,25 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n \r\n // 📄 Subschema for 528-specific document verification\r\n+\r\n const documentSchema = new mongoose.Schema(\r\n   {\r\n-    politicalDeclaration: { type: String },\r\n+    politicalDeclaration: [{ type: String }], // Changed to array\r\n     witnessTestimonies: [{ type: String }],\r\n     idDocument: {\r\n       type: String,\r\n       enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n     },\r\n-    idDocumentFile: { type: String },\r\n-    photoWithWhiteBg: { type: String },\r\n-    redThumbprint: { type: String },\r\n-    utilityBill: { type: String },\r\n+    idDocumentFile: [{ type: String }], // Changed to array\r\n+    photoWithWhiteBg: [{ type: String }], // Changed to array\r\n+    redThumbprint: [{ type: String }], // Changed to array\r\n+    utilityBill: [{ type: String }], // Changed to array\r\n     isValid: { type: Boolean, default: false },\r\n   },\r\n   { _id: false }\r\n );\r\n-\r\n // 👤 Main user schema\r\n const userSchema = new mongoose.Schema(\r\n   {\r\n     fullNames: {\r\n"
                },
                {
                    "date": 1753453919584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,13 +54,11 @@\n       required: [true, \"Document label is required\"],\r\n     },\r\n     documentRequirements: {\r\n       type: documentSchema,\r\n-      required: function () {\r\n-        return this.documentLabel === \"528\";\r\n+      required: false, // Changed to false to allow for different document types;\r\n       },\r\n     },\r\n-  },\r\n   { timestamps: true }\r\n );\r\n \r\n // 🔒 Hash password and GFG number before saving\r\n"
                },
                {
                    "date": 1753453970755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+const mongoose = require(\"mongoose\");\r\n+const bcrypt = require(\"bcryptjs\");\r\n+\r\n+// Subschema for required document verification (for 528 users)\r\n+const documentSchema = new mongoose.Schema({\r\n+  politicalDeclaration: { type: String, required: true }, // File path or URL\r\n+  witnessTestimonies: [{ type: String, required: true }], // Array of 3 file paths\r\n+  idDocument: {\r\n+    type: String,\r\n+    enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n+    required: true,\r\n+  },\r\n+  idDocumentFile: { type: String, required: true }, // File path or URL\r\n+  photoWithWhiteBg: { type: String, required: true }, // File path\r\n+  redThumbprint: { type: String, required: true }, // File path\r\n+  utilityBill: { type: String, required: true }, // File path\r\n+  isValid: { type: Boolean, default: false }, // ✅ Tick green if complete\r\n+}, { _id: false });\r\n+\r\n+// Main User schema\r\n+const userSchema = new mongoose.Schema({\r\n+  fullNames: { type: String, required: true },\r\n+  familyName: { type: String, required: true },\r\n+  email: { type: String, required: true, unique: true },\r\n+  password: { type: String, required: true },\r\n+  gfgNumber: { type: String, required: true },\r\n+  documentLabel: {\r\n+    type: String,\r\n+    enum: [\"528\", \"928\", \"Praecipe\"],\r\n+    required: true,\r\n+  },\r\n+  documentRequirements: {\r\n+    type: documentSchema,\r\n+    required: function () {\r\n+      return this.documentLabel === \"528\";\r\n+    },\r\n+  },\r\n+}, { timestamps: true });\r\n+\r\n+// 🔒 Hash password and gfgNumber before saving\r\n+userSchema.pre(\"save\", async function (next) {\r\n+  try {\r\n+    // Hash password if modified\r\n+    if (this.isModified(\"password\")) {\r\n+      const salt = await bcrypt.genSalt(10);\r\n+      this.password = await bcrypt.hash(this.password, salt);\r\n+    }\r\n+\r\n+    // Hash gfgNumber if modified\r\n+    if (this.isModified(\"gfgNumber\")) {\r\n+      const salt = await bcrypt.genSalt(10);\r\n+      this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n+    }\r\n+\r\n+    next();\r\n+  } catch (err) {\r\n+    next(err);\r\n+  }\r\n+});\r\n+\r\n+// 🔐 Compare password\r\n+userSchema.methods.comparePassword = async function (candidatePassword) {\r\n+  return bcrypt.compare(candidatePassword, this.password);\r\n+};\r\n+\r\n+// 🔐 Compare gfgNumber\r\n+userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n+  return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n+};\r\n+\r\n+module.exports = mongoose.model(\"User\", userSchema);\r\n"
                },
                {
                    "date": 1753470751246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,21 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Subschema for required document verification (for 528 users)\r\n+// Subschema for required document verification\r\n const documentSchema = new mongoose.Schema({\r\n-  politicalDeclaration: { type: String, required: true }, // File path or URL\r\n-  witnessTestimonies: [{ type: String, required: true }], // Array of 3 file paths\r\n+  politicalDeclaration: { type: String }, // File path or URL\r\n+  witnessTestimonies: [{ type: String }], // Array of file paths\r\n   idDocument: {\r\n     type: String,\r\n     enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n-    required: true,\r\n   },\r\n-  idDocumentFile: { type: String, required: true }, // File path or URL\r\n-  photoWithWhiteBg: { type: String, required: true }, // File path\r\n-  redThumbprint: { type: String, required: true }, // File path\r\n-  utilityBill: { type: String, required: true }, // File path\r\n-  isValid: { type: Boolean, default: false }, // ✅ Tick green if complete\r\n+  idDocumentFile: { type: String }, // File path or URL\r\n+  photoWithWhiteBg: { type: String }, // File path\r\n+  redThumbprint: { type: String }, // File path\r\n+  utilityBill: { type: String }, // File path\r\n+  isEmptyFolder: { type: Boolean, default: false }, // Track if empty folder was uploaded\r\n+  uploadedAt: { type: Date, default: Date.now } // Track when upload occurred\r\n }, { _id: false });\r\n \r\n // Main User schema\r\n const userSchema = new mongoose.Schema({\r\n@@ -34,20 +34,19 @@\n     required: function () {\r\n       return this.documentLabel === \"528\";\r\n     },\r\n   },\r\n+  profileImage: { type: String }\r\n }, { timestamps: true });\r\n \r\n-// 🔒 Hash password and gfgNumber before saving\r\n+// Hash password and gfgNumber before saving\r\n userSchema.pre(\"save\", async function (next) {\r\n   try {\r\n-    // Hash password if modified\r\n     if (this.isModified(\"password\")) {\r\n       const salt = await bcrypt.genSalt(10);\r\n       this.password = await bcrypt.hash(this.password, salt);\r\n     }\r\n \r\n-    // Hash gfgNumber if modified\r\n     if (this.isModified(\"gfgNumber\")) {\r\n       const salt = await bcrypt.genSalt(10);\r\n       this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n     }\r\n@@ -57,107 +56,14 @@\n     next(err);\r\n   }\r\n });\r\n \r\n-// 🔐 Compare password\r\n+// Compare methods\r\n userSchema.methods.comparePassword = async function (candidatePassword) {\r\n   return bcrypt.compare(candidatePassword, this.password);\r\n };\r\n \r\n-// 🔐 Compare gfgNumber\r\n userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n   return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n };\r\n \r\n-module.exports = mongoose.model(\"User\", userSchema);\r\n-const mongoose = require(\"mongoose\");\r\n-const bcrypt = require(\"bcryptjs\");\r\n-\r\n-// 📄 Subschema for 528-specific document verification\r\n-\r\n-const documentSchema = new mongoose.Schema(\r\n-  {\r\n-    politicalDeclaration: [{ type: String }], // Changed to array\r\n-    witnessTestimonies: [{ type: String }],\r\n-    idDocument: {\r\n-      type: String,\r\n-      enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n-    },\r\n-    idDocumentFile: [{ type: String }], // Changed to array\r\n-    photoWithWhiteBg: [{ type: String }], // Changed to array\r\n-    redThumbprint: [{ type: String }], // Changed to array\r\n-    utilityBill: [{ type: String }], // Changed to array\r\n-    isValid: { type: Boolean, default: false },\r\n-  },\r\n-  { _id: false }\r\n-);\r\n-// 👤 Main user schema\r\n-const userSchema = new mongoose.Schema(\r\n-  {\r\n-    fullNames: {\r\n-      type: String,\r\n-      required: [true, \"Full names are required\"],\r\n-      trim: true,\r\n-    },\r\n-    familyName: {\r\n-      type: String,\r\n-      required: [true, \"Family name is required\"],\r\n-      trim: true,\r\n-    },\r\n-    email: {\r\n-      type: String,\r\n-      required: [true, \"Email is required\"],\r\n-      unique: true,\r\n-      lowercase: true,\r\n-      trim: true,\r\n-    },\r\n-    password: {\r\n-      type: String,\r\n-      required: [true, \"Password is required\"],\r\n-      minlength: 6,\r\n-    },\r\n-    gfgNumber: {\r\n-      type: String,\r\n-      required: [true, \"GFG number is required\"],\r\n-    },\r\n-    documentLabel: {\r\n-      type: String,\r\n-      enum: [\"528\", \"928\", \"Praecipe\"],\r\n-      required: [true, \"Document label is required\"],\r\n-    },\r\n-    documentRequirements: {\r\n-      type: documentSchema,\r\n-      required: false, // Changed to false to allow for different document types;\r\n-      },\r\n-    },\r\n-  { timestamps: true }\r\n-);\r\n-\r\n-// 🔒 Hash password and GFG number before saving\r\n-userSchema.pre(\"save\", async function (next) {\r\n-  try {\r\n-    if (this.isModified(\"password\")) {\r\n-      const salt = await bcrypt.genSalt(10);\r\n-      this.password = await bcrypt.hash(this.password, salt);\r\n-    }\r\n-\r\n-    if (this.isModified(\"gfgNumber\")) {\r\n-      const salt = await bcrypt.genSalt(10);\r\n-      this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n-    }\r\n-\r\n-    next();\r\n-  } catch (err) {\r\n-    next(err);\r\n-  }\r\n-});\r\n-\r\n-// 🧠 Instance methods\r\n-userSchema.methods.comparePassword = async function (candidatePassword) {\r\n-  return bcrypt.compare(candidatePassword, this.password);\r\n-};\r\n-\r\n-userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n-  return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n-};\r\n-\r\n-module.exports = mongoose.model(\"User\", userSchema);\r\n+module.exports = mongoose.model(\"User\", userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753471976776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,7 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Subschema for required document verification\r\n-const documentSchema = new mongoose.Schema({\r\n-  politicalDeclaration: { type: String }, // File path or URL\r\n-  witnessTestimonies: [{ type: String }], // Array of file paths\r\n-  idDocument: {\r\n-    type: String,\r\n-    enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n-  },\r\n-  idDocumentFile: { type: String }, // File path or URL\r\n-  photoWithWhiteBg: { type: String }, // File path\r\n-  redThumbprint: { type: String }, // File path\r\n-  utilityBill: { type: String }, // File path\r\n-  isEmptyFolder: { type: Boolean, default: false }, // Track if empty folder was uploaded\r\n-  uploadedAt: { type: Date, default: Date.now } // Track when upload occurred\r\n-}, { _id: false });\r\n-\r\n-// Main User schema\r\n-const userSchema = new mongoose.Schema({\r\n-  fullNames: { type: String, required: true },\r\n-  familyName: { type: String, required: true },\r\n-  email: { type: String, required: true, unique: true },\r\n-  password: { type: String, required: true },\r\n-  gfgNumber: { type: String, required: true },\r\n-  documentLabel: {\r\n-    type: String,\r\n-    enum: [\"528\", \"928\", \"Praecipe\"],\r\n-    required: true,\r\n-  },\r\n-  documentRequirements: {\r\n-    type: documentSchema,\r\n-    required: function () {\r\n-      return this.documentLabel === \"528\";\r\n-    },\r\n-  },\r\n-  profileImage: { type: String }\r\n-}, { timestamps: true });\r\n-\r\n // Hash password and gfgNumber before saving\r\n userSchema.pre(\"save\", async function (next) {\r\n   try {\r\n     if (this.isModified(\"password\")) {\r\n@@ -65,5 +28,5 @@\n userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n   return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n };\r\n \r\n-module.exports = mongoose.model(\"User\", userSchema);\n\\ No newline at end of file\n+module.exports = mongoose.model(\"User\", userSchema);\r\n"
                },
                {
                    "date": 1753472811429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,63 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n \r\n+const userSchema = new mongoose.Schema({\r\n+  name: {\r\n+    type: String,\r\n+    required: [true, \"Please provide a name\"],\r\n+    trim: true\r\n+  },\r\n+  email: {\r\n+    type: String,\r\n+    required: [true, \"Please provide an email\"],\r\n+    unique: true,\r\n+    trim: true,\r\n+    lowercase: true,\r\n+    match: [\r\n+      /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n+      \"Please provide a valid email\"\r\n+    ]\r\n+  },\r\n+  password: {\r\n+    type: String,\r\n+    required: [true, \"Please provide a password\"],\r\n+    minlength: [6, \"Password must be at least 6 characters\"],\r\n+    select: false\r\n+  },\r\n+  gfgNumber: {\r\n+    type: String,\r\n+    required: [true, \"Please provide a GFG number\"],\r\n+    select: false\r\n+  },\r\n+  profilePic: {\r\n+    type: String,\r\n+    default: \"\"\r\n+  },\r\n+  documents: [{\r\n+    type: mongoose.Schema.Types.ObjectId,\r\n+    ref: \"Document\"\r\n+  }],\r\n+  documentRequirements: {\r\n+    politicalDeclaration: Boolean,\r\n+    idDocumentFile: Boolean,\r\n+    idDocument: String,\r\n+    photoWithWhiteBg: Boolean,\r\n+    redThumbprint: Boolean,\r\n+    utilityBill: Boolean,\r\n+    witnessTestimonies: [{\r\n+      name: String,\r\n+      email: String\r\n+    }]\r\n+  },\r\n+  hasCompletedDocuments: Boolean,\r\n+  passwordChangedAt: Date,\r\n+  createdAt: {\r\n+    type: Date,\r\n+    default: Date.now\r\n+  }\r\n+});\r\n+\r\n // Hash password and gfgNumber before saving\r\n userSchema.pre(\"save\", async function (next) {\r\n   try {\r\n     if (this.isModified(\"password\")) {\r\n@@ -13,8 +69,13 @@\n       const salt = await bcrypt.genSalt(10);\r\n       this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n     }\r\n \r\n+    // Set passwordChangedAt when password is modified (except for new users)\r\n+    if (this.isModified(\"password\") && !this.isNew) {\r\n+      this.passwordChangedAt = Date.now() - 1000; // Subtract 1s to ensure token was created before\r\n+    }\r\n+\r\n     next();\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n@@ -28,5 +89,14 @@\n userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n   return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n };\r\n \r\n-module.exports = mongoose.model(\"User\", userSchema);\r\n+// Check if password was changed after token was issued\r\n+userSchema.methods.passwordChangedAfter = function(JWTTimestamp) {\r\n+  if (this.passwordChangedAt) {\r\n+    const changedTimestamp = parseInt(this.passwordChangedAt.getTime() / 1000, 10);\r\n+    return JWTTimestamp < changedTimestamp;\r\n+  }\r\n+  return false;\r\n+};\r\n+\r\n+module.exports = mongoose.model(\"User\", userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753473354476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,102 +1,158 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n+const validator = require('validator'); // Added for better email validation\r\n \r\n const userSchema = new mongoose.Schema({\r\n   name: {\r\n     type: String,\r\n-    required: [true, \"Please provide a name\"],\r\n-    trim: true\r\n+    required: [true, \"Please provide your name\"],\r\n+    trim: true,\r\n+    maxlength: [50, \"Name cannot exceed 50 characters\"],\r\n+    minlength: [2, \"Name must be at least 2 characters\"]\r\n   },\r\n   email: {\r\n     type: String,\r\n-    required: [true, \"Please provide an email\"],\r\n+    required: [true, \"Please provide your email\"],\r\n     unique: true,\r\n     trim: true,\r\n     lowercase: true,\r\n-    match: [\r\n-      /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n-      \"Please provide a valid email\"\r\n-    ]\r\n+    validate: [validator.isEmail, \"Please provide a valid email\"],\r\n+    index: true\r\n   },\r\n   password: {\r\n     type: String,\r\n     required: [true, \"Please provide a password\"],\r\n-    minlength: [6, \"Password must be at least 6 characters\"],\r\n-    select: false\r\n+    minlength: [8, \"Password must be at least 8 characters\"],\r\n+    select: false,\r\n+    validate: {\r\n+      validator: function(pass) {\r\n+        return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(pass);\r\n+      },\r\n+      message: \"Password must contain at least one uppercase, one lowercase, one number and one special character\"\r\n+    }\r\n   },\r\n   gfgNumber: {\r\n     type: String,\r\n-    required: [true, \"Please provide a GFG number\"],\r\n-    select: false\r\n+    required: [true, \"Please provide your GFG number\"],\r\n+    select: false,\r\n+    unique: true,\r\n+    validate: {\r\n+      validator: function(num) {\r\n+        return /^[A-Za-z0-9]{8,20}$/.test(num);\r\n+      },\r\n+      message: \"GFG number must be 8-20 alphanumeric characters\"\r\n+    }\r\n   },\r\n   profilePic: {\r\n     type: String,\r\n-    default: \"\"\r\n+    default: \"default.jpg\"\r\n   },\r\n   documents: [{\r\n     type: mongoose.Schema.Types.ObjectId,\r\n     ref: \"Document\"\r\n   }],\r\n   documentRequirements: {\r\n-    politicalDeclaration: Boolean,\r\n-    idDocumentFile: Boolean,\r\n-    idDocument: String,\r\n-    photoWithWhiteBg: Boolean,\r\n-    redThumbprint: Boolean,\r\n-    utilityBill: Boolean,\r\n+    politicalDeclaration: { type: Boolean, default: false },\r\n+    idDocumentFile: { type: Boolean, default: false },\r\n+    idDocument: { type: String, select: false },\r\n+    photoWithWhiteBg: { type: Boolean, default: false },\r\n+    redThumbprint: { type: Boolean, default: false },\r\n+    utilityBill: { type: Boolean, default: false },\r\n     witnessTestimonies: [{\r\n       name: String,\r\n-      email: String\r\n+      email: {\r\n+        type: String,\r\n+        validate: [validator.isEmail, \"Please provide a valid email\"]\r\n+      }\r\n     }]\r\n   },\r\n-  hasCompletedDocuments: Boolean,\r\n-  passwordChangedAt: Date,\r\n+  hasCompletedDocuments: { type: Boolean, default: false },\r\n+  passwordChangedAt: { type: Date, select: false },\r\n+  passwordResetToken: { type: String, select: false },\r\n+  passwordResetExpires: { type: Date, select: false },\r\n+  active: { type: Boolean, default: true, select: false },\r\n+  role: {\r\n+    type: String,\r\n+    enum: [\"user\", \"admin\"],\r\n+    default: \"user\"\r\n+  },\r\n   createdAt: {\r\n     type: Date,\r\n-    default: Date.now\r\n\\ No newline at end of file\n+    default: Date.now,\r\n+    select: false\r\n   }\r\n+}, {\r\n+  toJSON: { virtuals: true },\r\n+  toObject: { virtuals: true }\r\n });\r\n \r\n-// Hash password and gfgNumber before saving\r\n-userSchema.pre(\"save\", async function (next) {\r\n+// Indexes for better query performance\r\n+userSchema.index({ email: 1 });\r\n+userSchema.index({ gfgNumber: 1 });\r\n+\r\n+// Document middleware for hashing\r\n+userSchema.pre(\"save\", async function(next) {\r\n+  if (!this.isModified(\"password\") && !this.isModified(\"gfgNumber\")) return next();\r\n+\r\n   try {\r\n     if (this.isModified(\"password\")) {\r\n-      const salt = await bcrypt.genSalt(10);\r\n+      const salt = await bcrypt.genSalt(12);\r\n       this.password = await bcrypt.hash(this.password, salt);\r\n+      \r\n+      if (!this.isNew) {\r\n+        this.passwordChangedAt = Date.now() - 1000;\r\n+      }\r\n     }\r\n \r\n     if (this.isModified(\"gfgNumber\")) {\r\n-      const salt = await bcrypt.genSalt(10);\r\n+      const salt = await bcrypt.genSalt(12);\r\n       this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n     }\r\n \r\n-    // Set passwordChangedAt when password is modified (except for new users)\r\n-    if (this.isModified(\"password\") && !this.isNew) {\r\n-      this.passwordChangedAt = Date.now() - 1000; // Subtract 1s to ensure token was created before\r\n-    }\r\n-\r\n     next();\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n });\r\n \r\n-// Compare methods\r\n-userSchema.methods.comparePassword = async function (candidatePassword) {\r\n-  return bcrypt.compare(candidatePassword, this.password);\r\n+// Query middleware to filter out inactive users by default\r\n+userSchema.pre(/^find/, function(next) {\r\n+  this.find({ active: { $ne: false } });\r\n+  next();\r\n+});\r\n+\r\n+// Instance methods\r\n+userSchema.methods.correctPassword = async function(candidatePassword, userPassword) {\r\n+  return await bcrypt.compare(candidatePassword, userPassword);\r\n };\r\n \r\n-userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n-  return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n+userSchema.methods.correctGfgNumber = async function(candidateGfgNumber) {\r\n+  return await bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n };\r\n \r\n-// Check if password was changed after token was issued\r\n-userSchema.methods.passwordChangedAfter = function(JWTTimestamp) {\r\n+userSchema.methods.changedPasswordAfter = function(JWTTimestamp) {\r\n   if (this.passwordChangedAt) {\r\n     const changedTimestamp = parseInt(this.passwordChangedAt.getTime() / 1000, 10);\r\n     return JWTTimestamp < changedTimestamp;\r\n   }\r\n   return false;\r\n };\r\n \r\n-module.exports = mongoose.model(\"User\", userSchema);\n+userSchema.methods.createPasswordResetToken = function() {\r\n+  const resetToken = crypto.randomBytes(32).toString('hex');\r\n+  this.passwordResetToken = crypto\r\n+    .createHash('sha256')\r\n+    .update(resetToken)\r\n+    .digest('hex');\r\n+  this.passwordResetExpires = Date.now() + 10 * 60 * 1000; // 10 minutes\r\n+  return resetToken;\r\n+};\r\n+\r\n+// Virtual properties\r\n+userSchema.virtual('fullName').get(function() {\r\n+  return `${this.name}`;\r\n+});\r\n+\r\n+const User = mongoose.model(\"User\", userSchema);\r\n+\r\n+module.exports = User;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753473635987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,112 +1,55 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-const validator = require('validator'); // Added for better email validation\r\n \r\n-const userSchema = new mongoose.Schema({\r\n-  name: {\r\n+// Subschema for required document verification (for 528 users)\r\n+const documentSchema = new mongoose.Schema({\r\n+  politicalDeclaration: { type: String, required: true }, // File path or URL\r\n+  witnessTestimonies: [{ type: String, required: true }], // Array of 3 file paths\r\n+  idDocument: {\r\n     type: String,\r\n-    required: [true, \"Please provide your name\"],\r\n-    trim: true,\r\n-    maxlength: [50, \"Name cannot exceed 50 characters\"],\r\n-    minlength: [2, \"Name must be at least 2 characters\"]\r\n+    enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n+    required: true,\r\n   },\r\n-  email: {\r\n+  idDocumentFile: { type: String, required: true }, // File path or URL\r\n+  photoWithWhiteBg: { type: String, required: true }, // File path\r\n+  redThumbprint: { type: String, required: true }, // File path\r\n+  utilityBill: { type: String, required: true }, // File path\r\n+  isValid: { type: Boolean, default: false }, // ✅ Tick green if complete\r\n+}, { _id: false });\r\n+\r\n+// Main User schema\r\n+const userSchema = new mongoose.Schema({\r\n+  fullNames: { type: String, required: true },\r\n+  familyName: { type: String, required: true },\r\n+  email: { type: String, required: true, unique: true },\r\n+  password: { type: String, required: true },\r\n+  gfgNumber: { type: String, required: true },\r\n+  documentLabel: {\r\n     type: String,\r\n-    required: [true, \"Please provide your email\"],\r\n-    unique: true,\r\n-    trim: true,\r\n-    lowercase: true,\r\n-    validate: [validator.isEmail, \"Please provide a valid email\"],\r\n-    index: true\r\n+    enum: [\"528\", \"928\", \"Praecipe\"],\r\n+    required: true,\r\n   },\r\n-  password: {\r\n-    type: String,\r\n-    required: [true, \"Please provide a password\"],\r\n-    minlength: [8, \"Password must be at least 8 characters\"],\r\n-    select: false,\r\n-    validate: {\r\n-      validator: function(pass) {\r\n-        return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(pass);\r\n-      },\r\n-      message: \"Password must contain at least one uppercase, one lowercase, one number and one special character\"\r\n-    }\r\n-  },\r\n-  gfgNumber: {\r\n-    type: String,\r\n-    required: [true, \"Please provide your GFG number\"],\r\n-    select: false,\r\n-    unique: true,\r\n-    validate: {\r\n-      validator: function(num) {\r\n-        return /^[A-Za-z0-9]{8,20}$/.test(num);\r\n-      },\r\n-      message: \"GFG number must be 8-20 alphanumeric characters\"\r\n-    }\r\n-  },\r\n-  profilePic: {\r\n-    type: String,\r\n-    default: \"default.jpg\"\r\n-  },\r\n-  documents: [{\r\n-    type: mongoose.Schema.Types.ObjectId,\r\n-    ref: \"Document\"\r\n-  }],\r\n   documentRequirements: {\r\n-    politicalDeclaration: { type: Boolean, default: false },\r\n-    idDocumentFile: { type: Boolean, default: false },\r\n-    idDocument: { type: String, select: false },\r\n-    photoWithWhiteBg: { type: Boolean, default: false },\r\n-    redThumbprint: { type: Boolean, default: false },\r\n-    utilityBill: { type: Boolean, default: false },\r\n-    witnessTestimonies: [{\r\n-      name: String,\r\n-      email: {\r\n-        type: String,\r\n-        validate: [validator.isEmail, \"Please provide a valid email\"]\r\n-      }\r\n-    }]\r\n+    type: documentSchema,\r\n+    required: function () {\r\n+      return this.documentLabel === \"528\";\r\n+    },\r\n   },\r\n-  hasCompletedDocuments: { type: Boolean, default: false },\r\n-  passwordChangedAt: { type: Date, select: false },\r\n-  passwordResetToken: { type: String, select: false },\r\n-  passwordResetExpires: { type: Date, select: false },\r\n-  active: { type: Boolean, default: true, select: false },\r\n-  role: {\r\n-    type: String,\r\n-    enum: [\"user\", \"admin\"],\r\n-    default: \"user\"\r\n-  },\r\n-  createdAt: {\r\n-    type: Date,\r\n-    default: Date.now,\r\n-    select: false\r\n-  }\r\n-}, {\r\n-  toJSON: { virtuals: true },\r\n-  toObject: { virtuals: true }\r\n-});\r\n+}, { timestamps: true });\r\n \r\n-// Indexes for better query performance\r\n-userSchema.index({ email: 1 });\r\n-userSchema.index({ gfgNumber: 1 });\r\n-\r\n-// Document middleware for hashing\r\n-userSchema.pre(\"save\", async function(next) {\r\n-  if (!this.isModified(\"password\") && !this.isModified(\"gfgNumber\")) return next();\r\n-\r\n+// 🔒 Hash password and gfgNumber before saving\r\n+userSchema.pre(\"save\", async function (next) {\r\n   try {\r\n+    // Hash password if modified\r\n     if (this.isModified(\"password\")) {\r\n-      const salt = await bcrypt.genSalt(12);\r\n+      const salt = await bcrypt.genSalt(10);\r\n       this.password = await bcrypt.hash(this.password, salt);\r\n-      \r\n-      if (!this.isNew) {\r\n-        this.passwordChangedAt = Date.now() - 1000;\r\n-      }\r\n     }\r\n \r\n+    // Hash gfgNumber if modified\r\n     if (this.isModified(\"gfgNumber\")) {\r\n-      const salt = await bcrypt.genSalt(12);\r\n+      const salt = await bcrypt.genSalt(10);\r\n       this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n     }\r\n \r\n     next();\r\n@@ -114,45 +57,15 @@\n     next(err);\r\n   }\r\n });\r\n \r\n-// Query middleware to filter out inactive users by default\r\n-userSchema.pre(/^find/, function(next) {\r\n-  this.find({ active: { $ne: false } });\r\n-  next();\r\n-});\r\n-\r\n-// Instance methods\r\n-userSchema.methods.correctPassword = async function(candidatePassword, userPassword) {\r\n-  return await bcrypt.compare(candidatePassword, userPassword);\r\n+// 🔐 Compare password\r\n+userSchema.methods.comparePassword = async function (candidatePassword) {\r\n+  return bcrypt.compare(candidatePassword, this.password);\r\n };\r\n \r\n-userSchema.methods.correctGfgNumber = async function(candidateGfgNumber) {\r\n-  return await bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n+// 🔐 Compare gfgNumber\r\n+userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n+  return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n };\r\n \r\n-userSchema.methods.changedPasswordAfter = function(JWTTimestamp) {\r\n-  if (this.passwordChangedAt) {\r\n-    const changedTimestamp = parseInt(this.passwordChangedAt.getTime() / 1000, 10);\r\n-    return JWTTimestamp < changedTimestamp;\r\n-  }\r\n-  return false;\r\n-};\r\n-\r\n-userSchema.methods.createPasswordResetToken = function() {\r\n-  const resetToken = crypto.randomBytes(32).toString('hex');\r\n-  this.passwordResetToken = crypto\r\n-    .createHash('sha256')\r\n-    .update(resetToken)\r\n-    .digest('hex');\r\n-  this.passwordResetExpires = Date.now() + 10 * 60 * 1000; // 10 minutes\r\n-  return resetToken;\r\n-};\r\n-\r\n-// Virtual properties\r\n-userSchema.virtual('fullName').get(function() {\r\n\\ No newline at end of file\n-  return `${this.name}`;\r\n-});\r\n-\r\n-const User = mongoose.model(\"User\", userSchema);\r\n-\r\n-module.exports = User;\n+module.exports = mongoose.model(\"User\", userSchema);\r\n"
                },
                {
                    "date": 1753473655510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,21 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Subschema for required document verification (for 528 users)\r\n+// Subschema for required document verification\r\n const documentSchema = new mongoose.Schema({\r\n-  politicalDeclaration: { type: String, required: true }, // File path or URL\r\n-  witnessTestimonies: [{ type: String, required: true }], // Array of 3 file paths\r\n+  politicalDeclaration: { type: String }, // File path or URL\r\n+  witnessTestimonies: [{ type: String }], // Array of file paths\r\n   idDocument: {\r\n     type: String,\r\n     enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n-    required: true,\r\n   },\r\n-  idDocumentFile: { type: String, required: true }, // File path or URL\r\n-  photoWithWhiteBg: { type: String, required: true }, // File path\r\n-  redThumbprint: { type: String, required: true }, // File path\r\n-  utilityBill: { type: String, required: true }, // File path\r\n-  isValid: { type: Boolean, default: false }, // ✅ Tick green if complete\r\n+  idDocumentFile: { type: String }, // File path or URL\r\n+  photoWithWhiteBg: { type: String }, // File path\r\n+  redThumbprint: { type: String }, // File path\r\n+  utilityBill: { type: String }, // File path\r\n+  isEmptyFolder: { type: Boolean, default: false }, // Track if empty folder was uploaded\r\n+  uploadedAt: { type: Date, default: Date.now } // Track when upload occurred\r\n }, { _id: false });\r\n \r\n // Main User schema\r\n const userSchema = new mongoose.Schema({\r\n@@ -34,20 +34,19 @@\n     required: function () {\r\n       return this.documentLabel === \"528\";\r\n     },\r\n   },\r\n+  profileImage: { type: String }\r\n }, { timestamps: true });\r\n \r\n-// 🔒 Hash password and gfgNumber before saving\r\n+// Hash password and gfgNumber before saving\r\n userSchema.pre(\"save\", async function (next) {\r\n   try {\r\n-    // Hash password if modified\r\n     if (this.isModified(\"password\")) {\r\n       const salt = await bcrypt.genSalt(10);\r\n       this.password = await bcrypt.hash(this.password, salt);\r\n     }\r\n \r\n-    // Hash gfgNumber if modified\r\n     if (this.isModified(\"gfgNumber\")) {\r\n       const salt = await bcrypt.genSalt(10);\r\n       this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n     }\r\n@@ -57,15 +56,14 @@\n     next(err);\r\n   }\r\n });\r\n \r\n-// 🔐 Compare password\r\n+// Compare methods\r\n userSchema.methods.comparePassword = async function (candidatePassword) {\r\n   return bcrypt.compare(candidatePassword, this.password);\r\n };\r\n \r\n-// 🔐 Compare gfgNumber\r\n userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n   return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n };\r\n \r\n-module.exports = mongoose.model(\"User\", userSchema);\r\n+module.exports = mongoose.model(\"User\", userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753707861046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const mongoose = require(\"mongoose\");\r\n const bcrypt = require(\"bcryptjs\");\r\n \r\n-// Subschema for required document verification\r\n+// Subschema for document verification (now optional)\r\n const documentSchema = new mongoose.Schema({\r\n   politicalDeclaration: { type: String }, // File path or URL\r\n   witnessTestimonies: [{ type: String }], // Array of file paths\r\n   idDocument: {\r\n@@ -16,39 +16,76 @@\n   isEmptyFolder: { type: Boolean, default: false }, // Track if empty folder was uploaded\r\n   uploadedAt: { type: Date, default: Date.now } // Track when upload occurred\r\n }, { _id: false });\r\n \r\n-// Main User schema\r\n+// Main User schema - simplified for registration\r\n const userSchema = new mongoose.Schema({\r\n-  fullNames: { type: String, required: true },\r\n-  familyName: { type: String, required: true },\r\n-  email: { type: String, required: true, unique: true },\r\n-  password: { type: String, required: true },\r\n-  gfgNumber: { type: String, required: true },\r\n+  fullNames: { \r\n+    type: String, \r\n+    required: [true, \"Full names are required\"],\r\n+    trim: true\r\n+  },\r\n+  familyName: { \r\n+    type: String, \r\n+    required: [true, \"Family name is required\"],\r\n+    trim: true\r\n+  },\r\n+  email: { \r\n+    type: String, \r\n+    required: [true, \"Email is required\"],\r\n+    unique: true,\r\n+    trim: true,\r\n+    lowercase: true,\r\n+    match: [/.+\\@.+\\..+/, \"Please enter a valid email\"]\r\n+  },\r\n+  password: { \r\n+    type: String, \r\n+    required: [true, \"Password is required\"],\r\n+    minlength: [8, \"Password must be at least 8 characters long\"],\r\n+    select: false // Never return password in queries\r\n+  },\r\n+  gfgNumber: { \r\n+    type: String, \r\n+    required: [true, \"GFG number is required\"],\r\n+    validate: {\r\n+      validator: function(v) {\r\n+        return /^\\d{14}$/.test(v); // Exactly 14 digits\r\n+      },\r\n+      message: props => `GFG number must be exactly 14 digits`\r\n+    },\r\n+    select: false // Never return GFG number in queries\r\n+  },\r\n+  // Made document fields optional\r\n   documentLabel: {\r\n     type: String,\r\n     enum: [\"528\", \"928\", \"Praecipe\"],\r\n-    required: true,\r\n+    required: false\r\n   },\r\n   documentRequirements: {\r\n     type: documentSchema,\r\n-    required: function () {\r\n-      return this.documentLabel === \"528\";\r\n-    },\r\n+    required: false\r\n   },\r\n-  profileImage: { type: String }\r\n-}, { timestamps: true });\r\n+  profileImage: { type: String },\r\n+  // Additional fields that might be useful\r\n+  isVerified: { type: Boolean, default: false },\r\n+  lastLogin: { type: Date }\r\n+}, { \r\n+  timestamps: true,\r\n+  toJSON: { virtuals: true },\r\n+  toObject: { virtuals: true }\r\n+});\r\n \r\n // Hash password and gfgNumber before saving\r\n userSchema.pre(\"save\", async function (next) {\r\n   try {\r\n+    // Only hash if modified (or new)\r\n     if (this.isModified(\"password\")) {\r\n-      const salt = await bcrypt.genSalt(10);\r\n+      const salt = await bcrypt.genSalt(12);\r\n       this.password = await bcrypt.hash(this.password, salt);\r\n     }\r\n \r\n     if (this.isModified(\"gfgNumber\")) {\r\n-      const salt = await bcrypt.genSalt(10);\r\n+      const salt = await bcrypt.genSalt(12);\r\n       this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n     }\r\n \r\n     next();\r\n@@ -65,5 +102,9 @@\n userSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n   return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n };\r\n \r\n+// Indexes for better query performance\r\n+userSchema.index({ email: 1 }); // Unique index already created by unique: true\r\n+userSchema.index({ fullNames: 1, familyName: 1 });\r\n+\r\n module.exports = mongoose.model(\"User\", userSchema);\n\\ No newline at end of file\n"
                }
            ],
            "date": 1753435473631,
            "name": "Commit-0",
            "content": "const mongoose = require(\"mongoose\");\r\nconst bcrypt = require(\"bcryptjs\");\r\n\r\n// Subschema for required document verification (for 528 users)\r\nconst documentSchema = new mongoose.Schema({\r\n  politicalDeclaration: { type: String },  // removed required:true\r\n  witnessTestimonies: [{ type: String }], \r\n  idDocument: {\r\n    type: String,\r\n    enum: [\"DriverLicense\", \"Passport\", \"NationalID\"],\r\n    // required: true,  <-- remove this\r\n  },\r\n  idDocumentFile: { type: String },  // removed required:true\r\n  photoWithWhiteBg: { type: String }, // removed required:true\r\n  redThumbprint: { type: String },    // removed required:true\r\n  utilityBill: { type: String },      // removed required:true\r\n  isValid: { type: Boolean, default: false },\r\n}, { _id: false });\r\n\r\n\r\n// Main User schema\r\nconst userSchema = new mongoose.Schema({\r\n  fullNames: { type: String, required: true },\r\n  familyName: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n  gfgNumber: { type: String, required: true },\r\n  documentLabel: {\r\n    type: String,\r\n    enum: [\"528\", \"928\", \"Praecipe\"],\r\n    required: true,\r\n  },\r\n  documentRequirements: {\r\n    type: documentSchema,\r\n    required: function () {\r\n      return this.documentLabel === \"528\";\r\n    },\r\n  },\r\n}, { timestamps: true });\r\n\r\n// 🔒 Hash password and gfgNumber before saving\r\nuserSchema.pre(\"save\", async function (next) {\r\n  try {\r\n    // Hash password if modified\r\n    if (this.isModified(\"password\")) {\r\n      const salt = await bcrypt.genSalt(10);\r\n      this.password = await bcrypt.hash(this.password, salt);\r\n    }\r\n\r\n    // Hash gfgNumber if modified\r\n    if (this.isModified(\"gfgNumber\")) {\r\n      const salt = await bcrypt.genSalt(10);\r\n      this.gfgNumber = await bcrypt.hash(this.gfgNumber, salt);\r\n    }\r\n\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n});\r\n\r\n// 🔐 Compare password\r\nuserSchema.methods.comparePassword = async function (candidatePassword) {\r\n  return bcrypt.compare(candidatePassword, this.password);\r\n};\r\n\r\n// 🔐 Compare gfgNumber\r\nuserSchema.methods.compareGfgNumber = async function (candidateGfgNumber) {\r\n  return bcrypt.compare(candidateGfgNumber, this.gfgNumber);\r\n};\r\n\r\nmodule.exports = mongoose.model(\"User\", userSchema);\r\n"
        }
    ]
}