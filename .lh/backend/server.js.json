{
    "sourceFile": "backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1753434415479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753442138545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,54 +2,46 @@\n const cors = require(\"cors\");\r\n const dotenv = require(\"dotenv\");\r\n const connectDB = require(\"./config/db\");\r\n const authRoutes = require(\"./routes/auth\");\r\n-const homeRoutes = require(\"./routes/home\"); // Home routes (upload, delete)\r\n+const homeRoutes = require(\"./routes/home\");\r\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n \r\n-dotenv.config(); // Load environment variables\r\n+dotenv.config();\r\n \r\n-// Connect to MongoDB\r\n connectDB();\r\n \r\n const app = express();\r\n const PORT = process.env.PORT || 5000;\r\n \r\n-// Ensure uploads directory exists\r\n+// Ensure uploads folder exists\r\n const uploadsDir = path.join(__dirname, \"uploads\");\r\n if (!fs.existsSync(uploadsDir)) {\r\n   fs.mkdirSync(uploadsDir);\r\n }\r\n \r\n-// Middleware\r\n-app.use(cors()); // Enable CORS\r\n-app.use(express.json()); // Parse incoming JSON\r\n-app.use(express.urlencoded({ extended: true })); // Parse urlencoded form data\r\n+app.use(cors());\r\n+app.use(express.json());\r\n+app.use(express.urlencoded({ extended: true }));\r\n \r\n-// Static folder for uploads so files can be accessed publicly\r\n app.use(\"/uploads\", express.static(uploadsDir));\r\n \r\n-// Routes\r\n app.use(\"/api/auth\", authRoutes);\r\n-app.use(\"/api/home\", homeRoutes); // Home routes with upload and delete\r\n+app.use(\"/api/home\", homeRoutes);\r\n \r\n-// Root route for testing\r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"Backend is running...\");\r\n });\r\n \r\n-// Handle invalid routes\r\n app.use((req, res) => {\r\n   res.status(404).json({ message: \"Route not found\" });\r\n });\r\n \r\n-// Global error handler\r\n app.use((err, req, res, next) => {\r\n   console.error(err.stack);\r\n   res.status(500).json({ message: \"Internal Server Error\" });\r\n });\r\n \r\n-// Start server\r\n app.listen(PORT, () => {\r\n   console.log(`✅ Server running on http://localhost:${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1753449455596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,42 +6,71 @@\n const homeRoutes = require(\"./routes/home\");\r\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n \r\n+// Load environment variables with validation\r\n dotenv.config();\r\n \r\n+// Verify required environment variables are set\r\n+const requiredEnvVars = ['JWT_SECRET', 'MONGO_URI'];\r\n+const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\r\n+\r\n+if (missingVars.length > 0) {\r\n+  console.error('FATAL ERROR: Missing required environment variables:');\r\n+  missingVars.forEach(varName => console.error(`- ${varName}`));\r\n+  \r\n+  // Provide helpful instructions\r\n+  console.error('\\nPlease create a .env file in your backend directory with these variables:');\r\n+  console.error('JWT_SECRET=your_very_strong_secret_here');\r\n+  console.error('MONGO_URI=mongodb://localhost:27017/yourdbname');\r\n+  console.error('\\nOr set them in your deployment environment.');\r\n+  \r\n+  process.exit(1);\r\n+}\r\n+\r\n+// Database connection\r\n connectDB();\r\n \r\n const app = express();\r\n const PORT = process.env.PORT || 5000;\r\n \r\n // Ensure uploads folder exists\r\n const uploadsDir = path.join(__dirname, \"uploads\");\r\n if (!fs.existsSync(uploadsDir)) {\r\n-  fs.mkdirSync(uploadsDir);\r\n+  fs.mkdirSync(uploadsDir, { recursive: true });\r\n }\r\n \r\n+// Middleware\r\n app.use(cors());\r\n app.use(express.json());\r\n app.use(express.urlencoded({ extended: true }));\r\n \r\n+// Static files\r\n app.use(\"/uploads\", express.static(uploadsDir));\r\n \r\n+// Routes\r\n app.use(\"/api/auth\", authRoutes);\r\n app.use(\"/api/home\", homeRoutes);\r\n \r\n+// Basic route\r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"Backend is running...\");\r\n });\r\n \r\n+// Error handling\r\n app.use((req, res) => {\r\n   res.status(404).json({ message: \"Route not found\" });\r\n });\r\n \r\n app.use((err, req, res, next) => {\r\n   console.error(err.stack);\r\n-  res.status(500).json({ message: \"Internal Server Error\" });\r\n+  res.status(500).json({ \r\n+    message: \"Internal Server Error\",\r\n+    error: process.env.NODE_ENV === 'development' ? err.message : undefined\r\n+  });\r\n });\r\n \r\n+// Server start\r\n app.listen(PORT, () => {\r\n   console.log(`✅ Server running on http://localhost:${PORT}`);\r\n-});\r\n+  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753449750767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const express = require(\"express\");\r\n const cors = require(\"cors\");\r\n-const dotenv = require(\"dotenv\");\r\n+const dotenv = require(\"./.env\")\r\n const connectDB = require(\"./config/db\");\r\n const authRoutes = require(\"./routes/auth\");\r\n const homeRoutes = require(\"./routes/home\");\r\n const path = require(\"path\");\r\n"
                },
                {
                    "date": 1753449763222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const express = require(\"express\");\r\n const cors = require(\"cors\");\r\n-const dotenv = require(\"./.env\")\r\n+const dotenv = require(\"dotenv\");\r\n const connectDB = require(\"./config/db\");\r\n const authRoutes = require(\"./routes/auth\");\r\n const homeRoutes = require(\"./routes/home\");\r\n const path = require(\"path\");\r\n"
                },
                {
                    "date": 1753449966706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,72 +5,197 @@\n const authRoutes = require(\"./routes/auth\");\r\n const homeRoutes = require(\"./routes/home\");\r\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n+const helmet = require(\"helmet\");\r\n+const rateLimit = require(\"express-rate-limit\");\r\n+const morgan = require(\"morgan\");\r\n \r\n-// Load environment variables with validation\r\n-dotenv.config();\r\n+// Load and validate environment variables\r\n+dotenv.config({ path: path.resolve(__dirname, '../.env') });\r\n \r\n-// Verify required environment variables are set\r\n-const requiredEnvVars = ['JWT_SECRET', 'MONGO_URI'];\r\n-const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\r\n+// Configuration validation\r\n+const validateConfig = () => {\r\n+  const requiredConfig = {\r\n+    JWT_SECRET: {\r\n+      message: \"JWT secret key for authentication tokens\",\r\n+      validate: val => val.length >= 32\r\n+    },\r\n+    MONGO_URI: {\r\n+      message: \"MongoDB connection string\",\r\n+      validate: val => val.startsWith('mongodb')\r\n+    },\r\n+    PORT: {\r\n+      required: false,\r\n+      default: 5000,\r\n+      message: \"Port to run the server on\"\r\n+    }\r\n+  };\r\n \r\n-if (missingVars.length > 0) {\r\n-  console.error('FATAL ERROR: Missing required environment variables:');\r\n-  missingVars.forEach(varName => console.error(`- ${varName}`));\r\n-  \r\n-  // Provide helpful instructions\r\n-  console.error('\\nPlease create a .env file in your backend directory with these variables:');\r\n-  console.error('JWT_SECRET=your_very_strong_secret_here');\r\n-  console.error('MONGO_URI=mongodb://localhost:27017/yourdbname');\r\n-  console.error('\\nOr set them in your deployment environment.');\r\n-  \r\n-  process.exit(1);\r\n-}\r\n+  let isValid = true;\r\n \r\n-// Database connection\r\n-connectDB();\r\n+  for (const [key, config] of Object.entries(requiredConfig)) {\r\n+    if (!process.env[key] && config.required !== false) {\r\n+      console.error(`❌ Missing required config: ${key} (${config.message})`);\r\n+      isValid = false;\r\n+    } else if (process.env[key] && config.validate && !config.validate(process.env[key])) {\r\n+      console.error(`❌ Invalid value for ${key}: ${process.env[key]}`);\r\n+      isValid = false;\r\n+    } else if (!process.env[key] && config.default) {\r\n+      process.env[key] = config.default.toString();\r\n+    }\r\n+  }\r\n \r\n+  if (!isValid) {\r\n+    console.error(\"\\n💡 Configuration tips:\");\r\n+    console.log(\"Example .env file:\");\r\n+    console.log(`\r\n+JWT_SECRET=your_32_character_long_random_string_here\r\n+MONGO_URI=mongodb+srv://user:password@cluster.mongodb.net/dbname\r\n+PORT=5000\r\n+NODE_ENV=development\r\n+    `);\r\n+    process.exit(1);\r\n+  }\r\n+};\r\n+\r\n+validateConfig();\r\n+\r\n+// Database connection with retry logic\r\n+const maxDbRetries = 3;\r\n+let dbRetries = 0;\r\n+\r\n+const initializeDB = async () => {\r\n+  try {\r\n+    await connectDB();\r\n+    console.log(\"✅ Database connection established\");\r\n+  } catch (err) {\r\n+    dbRetries++;\r\n+    console.error(`Database connection failed (attempt ${dbRetries}/${maxDbRetries}):`, err.message);\r\n+    \r\n+    if (dbRetries < maxDbRetries) {\r\n+      console.log(`Retrying in 5 seconds...`);\r\n+      setTimeout(initializeDB, 5000);\r\n+    } else {\r\n+      console.error(\"❌ Could not establish database connection after multiple attempts\");\r\n+      process.exit(1);\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+initializeDB();\r\n+\r\n const app = express();\r\n const PORT = process.env.PORT || 5000;\r\n \r\n-// Ensure uploads folder exists\r\n+// Security middleware\r\n+app.use(helmet());\r\n+app.use(cors({\r\n+  origin: process.env.NODE_ENV === 'production' \r\n+    ? process.env.CLIENT_URL \r\n+    : 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+// Rate limiting\r\n+const limiter = rateLimit({\r\n+  windowMs: 15 * 60 * 1000, // 15 minutes\r\n+  max: 200, // limit each IP to 200 requests per windowMs\r\n+  message: \"Too many requests from this IP, please try again later\"\r\n+});\r\n+app.use(limiter);\r\n+\r\n+// Logging\r\n+app.use(morgan(process.env.NODE_ENV === 'development' ? 'dev' : 'combined'));\r\n+\r\n+// Request parsing\r\n+app.use(express.json({ limit: '10kb' }));\r\n+app.use(express.urlencoded({ extended: true, limit: '10kb' }));\r\n+\r\n+// Ensure uploads directory exists\r\n const uploadsDir = path.join(__dirname, \"uploads\");\r\n if (!fs.existsSync(uploadsDir)) {\r\n   fs.mkdirSync(uploadsDir, { recursive: true });\r\n+  console.log(`📁 Created uploads directory at ${uploadsDir}`);\r\n }\r\n \r\n-// Middleware\r\n-app.use(cors());\r\n-app.use(express.json());\r\n-app.use(express.urlencoded({ extended: true }));\r\n-\r\n // Static files\r\n app.use(\"/uploads\", express.static(uploadsDir));\r\n \r\n-// Routes\r\n+// API Routes\r\n app.use(\"/api/auth\", authRoutes);\r\n app.use(\"/api/home\", homeRoutes);\r\n \r\n+// Health check endpoint\r\n+app.get(\"/api/health\", (req, res) => {\r\n+  res.status(200).json({\r\n+    status: \"healthy\",\r\n+    timestamp: new Date().toISOString(),\r\n+    uptime: process.uptime(),\r\n+    database: mongoose.connection.readyState === 1 ? \"connected\" : \"disconnected\"\r\n+  });\r\n+});\r\n+\r\n // Basic route\r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"Backend is running...\");\r\n+  res.json({\r\n+    message: \"Backend API is running\",\r\n+    version: require('./package.json').version,\r\n+    environment: process.env.NODE_ENV || 'development',\r\n+    documentation: process.env.API_DOCS_URL || 'Not configured'\r\n+  });\r\n });\r\n \r\n-// Error handling\r\n+// 404 Handler\r\n app.use((req, res) => {\r\n-  res.status(404).json({ message: \"Route not found\" });\r\n+  res.status(404).json({ \r\n+    success: false,\r\n+    message: \"Route not found\",\r\n+    path: req.originalUrl\r\n+  });\r\n });\r\n \r\n+// Error handler\r\n app.use((err, req, res, next) => {\r\n-  console.error(err.stack);\r\n-  res.status(500).json({ \r\n-    message: \"Internal Server Error\",\r\n-    error: process.env.NODE_ENV === 'development' ? err.message : undefined\r\n+  console.error(`[${new Date().toISOString()}] Error:`, {\r\n+    message: err.message,\r\n+    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,\r\n+    path: req.path,\r\n+    method: req.method\r\n   });\r\n+\r\n+  const statusCode = err.statusCode || 500;\r\n+  const response = {\r\n+    success: false,\r\n+    message: err.message || \"Internal Server Error\",\r\n+    ...(process.env.NODE_ENV === 'development' && {\r\n+      stack: err.stack,\r\n+      fullError: err\r\n+    })\r\n+  };\r\n+\r\n+  res.status(statusCode).json(response);\r\n });\r\n \r\n-// Server start\r\n-app.listen(PORT, () => {\r\n-  console.log(`✅ Server running on http://localhost:${PORT}`);\r\n-  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\r\n+// Handle unhandled promise rejections\r\n+process.on('unhandledRejection', (err) => {\r\n+  console.error('Unhandled Rejection:', err);\r\n+  // Close server and exit process\r\n+  server.close(() => process.exit(1));\r\n+});\r\n+\r\n+// Start server\r\n+const server = app.listen(PORT, () => {\r\n+  console.log(`\r\n+  🚀 Server running in ${process.env.NODE_ENV || 'development'} mode\r\n+  🔗 http://localhost:${PORT}\r\n+  📅 ${new Date().toString()}\r\n+  `);\r\n+});\r\n+\r\n+// Handle SIGTERM for graceful shutdown\r\n+process.on('SIGTERM', () => {\r\n+  console.log('SIGTERM received. Shutting down gracefully...');\r\n+  server.close(() => {\r\n+    console.log('Process terminated');\r\n+  });\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753450004272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,201 +1,57 @@\n+// server.js\r\n+\r\n const express = require(\"express\");\r\n const cors = require(\"cors\");\r\n const dotenv = require(\"dotenv\");\r\n const connectDB = require(\"./config/db\");\r\n const authRoutes = require(\"./routes/auth\");\r\n-const homeRoutes = require(\"./routes/home\");\r\n+const homeRoutes = require(\"./routes/home\"); // ✅ Import home routes\r\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n-const helmet = require(\"helmet\");\r\n-const rateLimit = require(\"express-rate-limit\");\r\n-const morgan = require(\"morgan\");\r\n \r\n-// Load and validate environment variables\r\n-dotenv.config({ path: path.resolve(__dirname, '../.env') });\r\n+dotenv.config(); // Load environment variables\r\n \r\n-// Configuration validation\r\n-const validateConfig = () => {\r\n-  const requiredConfig = {\r\n-    JWT_SECRET: {\r\n-      message: \"JWT secret key for authentication tokens\",\r\n-      validate: val => val.length >= 32\r\n-    },\r\n-    MONGO_URI: {\r\n-      message: \"MongoDB connection string\",\r\n-      validate: val => val.startsWith('mongodb')\r\n-    },\r\n-    PORT: {\r\n-      required: false,\r\n-      default: 5000,\r\n-      message: \"Port to run the server on\"\r\n-    }\r\n-  };\r\n+// Connect to MongoDB\r\n+connectDB();\r\n \r\n-  let isValid = true;\r\n-\r\n-  for (const [key, config] of Object.entries(requiredConfig)) {\r\n-    if (!process.env[key] && config.required !== false) {\r\n-      console.error(`❌ Missing required config: ${key} (${config.message})`);\r\n-      isValid = false;\r\n-    } else if (process.env[key] && config.validate && !config.validate(process.env[key])) {\r\n-      console.error(`❌ Invalid value for ${key}: ${process.env[key]}`);\r\n-      isValid = false;\r\n-    } else if (!process.env[key] && config.default) {\r\n-      process.env[key] = config.default.toString();\r\n-    }\r\n-  }\r\n-\r\n-  if (!isValid) {\r\n-    console.error(\"\\n💡 Configuration tips:\");\r\n-    console.log(\"Example .env file:\");\r\n-    console.log(`\r\n-JWT_SECRET=your_32_character_long_random_string_here\r\n-MONGO_URI=mongodb+srv://user:password@cluster.mongodb.net/dbname\r\n-PORT=5000\r\n-NODE_ENV=development\r\n-    `);\r\n-    process.exit(1);\r\n-  }\r\n-};\r\n-\r\n-validateConfig();\r\n-\r\n-// Database connection with retry logic\r\n-const maxDbRetries = 3;\r\n-let dbRetries = 0;\r\n-\r\n-const initializeDB = async () => {\r\n-  try {\r\n-    await connectDB();\r\n-    console.log(\"✅ Database connection established\");\r\n-  } catch (err) {\r\n-    dbRetries++;\r\n-    console.error(`Database connection failed (attempt ${dbRetries}/${maxDbRetries}):`, err.message);\r\n-    \r\n-    if (dbRetries < maxDbRetries) {\r\n-      console.log(`Retrying in 5 seconds...`);\r\n-      setTimeout(initializeDB, 5000);\r\n-    } else {\r\n-      console.error(\"❌ Could not establish database connection after multiple attempts\");\r\n-      process.exit(1);\r\n-    }\r\n-  }\r\n-};\r\n-\r\n-initializeDB();\r\n-\r\n const app = express();\r\n const PORT = process.env.PORT || 5000;\r\n \r\n-// Security middleware\r\n-app.use(helmet());\r\n-app.use(cors({\r\n-  origin: process.env.NODE_ENV === 'production' \r\n-    ? process.env.CLIENT_URL \r\n-    : 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-// Rate limiting\r\n-const limiter = rateLimit({\r\n-  windowMs: 15 * 60 * 1000, // 15 minutes\r\n-  max: 200, // limit each IP to 200 requests per windowMs\r\n-  message: \"Too many requests from this IP, please try again later\"\r\n-});\r\n-app.use(limiter);\r\n-\r\n-// Logging\r\n-app.use(morgan(process.env.NODE_ENV === 'development' ? 'dev' : 'combined'));\r\n-\r\n-// Request parsing\r\n-app.use(express.json({ limit: '10kb' }));\r\n-app.use(express.urlencoded({ extended: true, limit: '10kb' }));\r\n-\r\n // Ensure uploads directory exists\r\n const uploadsDir = path.join(__dirname, \"uploads\");\r\n if (!fs.existsSync(uploadsDir)) {\r\n-  fs.mkdirSync(uploadsDir, { recursive: true });\r\n-  console.log(`📁 Created uploads directory at ${uploadsDir}`);\r\n+  fs.mkdirSync(uploadsDir);\r\n }\r\n \r\n-// Static files\r\n-app.use(\"/uploads\", express.static(uploadsDir));\r\n+// Middleware\r\n+app.use(cors()); // Enable CORS\r\n+app.use(express.json()); // Parse incoming JSON\r\n+app.use(express.urlencoded({ extended: true })); // For form-data\r\n \r\n-// API Routes\r\n+// Routes\r\n app.use(\"/api/auth\", authRoutes);\r\n-app.use(\"/api/home\", homeRoutes);\r\n+app.use(\"/api/home\", homeRoutes); // ✅ Mount upload route\r\n \r\n-// Health check endpoint\r\n-app.get(\"/api/health\", (req, res) => {\r\n-  res.status(200).json({\r\n-    status: \"healthy\",\r\n-    timestamp: new Date().toISOString(),\r\n-    uptime: process.uptime(),\r\n-    database: mongoose.connection.readyState === 1 ? \"connected\" : \"disconnected\"\r\n-  });\r\n-});\r\n+// Static folder for uploads (optional: to serve files)\r\n+app.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\r\n \r\n-// Basic route\r\n+// Root route for testing\r\n app.get(\"/\", (req, res) => {\r\n-  res.json({\r\n-    message: \"Backend API is running\",\r\n-    version: require('./package.json').version,\r\n-    environment: process.env.NODE_ENV || 'development',\r\n-    documentation: process.env.API_DOCS_URL || 'Not configured'\r\n-  });\r\n+  res.send(\"Backend is running...\");\r\n });\r\n \r\n-// 404 Handler\r\n+// Handle invalid routes\r\n app.use((req, res) => {\r\n-  res.status(404).json({ \r\n-    success: false,\r\n-    message: \"Route not found\",\r\n-    path: req.originalUrl\r\n-  });\r\n+  res.status(404).json({ message: \"Route not found\" });\r\n });\r\n \r\n // Error handler\r\n app.use((err, req, res, next) => {\r\n-  console.error(`[${new Date().toISOString()}] Error:`, {\r\n-    message: err.message,\r\n-    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,\r\n-    path: req.path,\r\n-    method: req.method\r\n-  });\r\n-\r\n-  const statusCode = err.statusCode || 500;\r\n-  const response = {\r\n-    success: false,\r\n-    message: err.message || \"Internal Server Error\",\r\n-    ...(process.env.NODE_ENV === 'development' && {\r\n-      stack: err.stack,\r\n-      fullError: err\r\n-    })\r\n-  };\r\n-\r\n-  res.status(statusCode).json(response);\r\n+  console.error(err.stack);\r\n+  res.status(500).json({ message: \"Internal Server Error\" });\r\n });\r\n \r\n-// Handle unhandled promise rejections\r\n-process.on('unhandledRejection', (err) => {\r\n\\ No newline at end of file\n-  console.error('Unhandled Rejection:', err);\r\n-  // Close server and exit process\r\n-  server.close(() => process.exit(1));\r\n-});\r\n-\r\n // Start server\r\n-const server = app.listen(PORT, () => {\r\n-  console.log(`\r\n-  🚀 Server running in ${process.env.NODE_ENV || 'development'} mode\r\n-  🔗 http://localhost:${PORT}\r\n-  📅 ${new Date().toString()}\r\n-  `);\r\n+app.listen(PORT, () => {\r\n+  console.log(`✅ Server running on http://localhost:${PORT}`);\r\n });\r\n-\r\n-// Handle SIGTERM for graceful shutdown\r\n-process.on('SIGTERM', () => {\r\n-  console.log('SIGTERM received. Shutting down gracefully...');\r\n-  server.close(() => {\r\n-    console.log('Process terminated');\r\n-  });\r\n-});\n"
                },
                {
                    "date": 1753472263501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n // server.js\r\n-\r\n const express = require(\"express\");\r\n const cors = require(\"cors\");\r\n const dotenv = require(\"dotenv\");\r\n const connectDB = require(\"./config/db\");\r\n const authRoutes = require(\"./routes/auth\");\r\n-const homeRoutes = require(\"./routes/home\"); // ✅ Import home routes\r\n+const homeRoutes = require(\"./routes/home\");\r\n+const documentRoutes = require(\"./routes/documents\");\r\n+const userRoutes = require(\"./routes/users\");\r\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n \r\n dotenv.config(); // Load environment variables\r\n@@ -16,24 +17,31 @@\n \r\n const app = express();\r\n const PORT = process.env.PORT || 5000;\r\n \r\n-// Ensure uploads directory exists\r\n+// Ensure uploads directories exist\r\n const uploadsDir = path.join(__dirname, \"uploads\");\r\n-if (!fs.existsSync(uploadsDir)) {\r\n-  fs.mkdirSync(uploadsDir);\r\n-}\r\n+const documentsDir = path.join(uploadsDir, \"documents\");\r\n+const profilePicsDir = path.join(uploadsDir, \"profilePics\");\r\n \r\n+[uploadsDir, documentsDir, profilePicsDir].forEach(dir => {\r\n+  if (!fs.existsSync(dir)) {\r\n+    fs.mkdirSync(dir, { recursive: true });\r\n+  }\r\n+});\r\n+\r\n // Middleware\r\n app.use(cors()); // Enable CORS\r\n app.use(express.json()); // Parse incoming JSON\r\n app.use(express.urlencoded({ extended: true })); // For form-data\r\n \r\n // Routes\r\n app.use(\"/api/auth\", authRoutes);\r\n-app.use(\"/api/home\", homeRoutes); // ✅ Mount upload route\r\n+app.use(\"/api/home\", homeRoutes);\r\n+app.use(\"/api/documents\", documentRoutes);\r\n+app.use(\"/api/users\", userRoutes);\r\n \r\n-// Static folder for uploads (optional: to serve files)\r\n+// Static folder for uploads\r\n app.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\r\n \r\n // Root route for testing\r\n app.get(\"/\", (req, res) => {\r\n@@ -53,5 +61,5 @@\n \r\n // Start server\r\n app.listen(PORT, () => {\r\n   console.log(`✅ Server running on http://localhost:${PORT}`);\r\n-});\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753473797788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n // server.js\r\n+\r\n const express = require(\"express\");\r\n const cors = require(\"cors\");\r\n const dotenv = require(\"dotenv\");\r\n const connectDB = require(\"./config/db\");\r\n const authRoutes = require(\"./routes/auth\");\r\n-const homeRoutes = require(\"./routes/home\");\r\n-const documentRoutes = require(\"./routes/documents\");\r\n-const userRoutes = require(\"./routes/users\");\r\n+const homeRoutes = require(\"./routes/home\"); // ✅ Import home routes\r\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n \r\n dotenv.config(); // Load environment variables\r\n@@ -17,31 +16,24 @@\n \r\n const app = express();\r\n const PORT = process.env.PORT || 5000;\r\n \r\n-// Ensure uploads directories exist\r\n+// Ensure uploads directory exists\r\n const uploadsDir = path.join(__dirname, \"uploads\");\r\n-const documentsDir = path.join(uploadsDir, \"documents\");\r\n-const profilePicsDir = path.join(uploadsDir, \"profilePics\");\r\n+if (!fs.existsSync(uploadsDir)) {\r\n+  fs.mkdirSync(uploadsDir);\r\n+}\r\n \r\n-[uploadsDir, documentsDir, profilePicsDir].forEach(dir => {\r\n-  if (!fs.existsSync(dir)) {\r\n-    fs.mkdirSync(dir, { recursive: true });\r\n-  }\r\n-});\r\n-\r\n // Middleware\r\n app.use(cors()); // Enable CORS\r\n app.use(express.json()); // Parse incoming JSON\r\n app.use(express.urlencoded({ extended: true })); // For form-data\r\n \r\n // Routes\r\n app.use(\"/api/auth\", authRoutes);\r\n-app.use(\"/api/home\", homeRoutes);\r\n-app.use(\"/api/documents\", documentRoutes);\r\n-app.use(\"/api/users\", userRoutes);\r\n+app.use(\"/api/home\", homeRoutes); // ✅ Mount upload route\r\n \r\n-// Static folder for uploads\r\n+// Static folder for uploads (optional: to serve files)\r\n app.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\r\n \r\n // Root route for testing\r\n app.get(\"/\", (req, res) => {\r\n@@ -61,5 +53,5 @@\n \r\n // Start server\r\n app.listen(PORT, () => {\r\n   console.log(`✅ Server running on http://localhost:${PORT}`);\r\n-});\n\\ No newline at end of file\n+});\r\n"
                },
                {
                    "date": 1753713414864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n const cors = require(\"cors\");\r\n const dotenv = require(\"dotenv\");\r\n const connectDB = require(\"./config/db\");\r\n const authRoutes = require(\"./routes/auth\");\r\n-const homeRoutes = require(\"./routes/home\"); // ✅ Import home routes\r\n+const homeRoutes = require(\"./routes/home\");\r\n+const paymentRoutes = require(\"./routes/payment\"); // ✅ Import home routes\r\n const path = require(\"path\");\r\n const fs = require(\"fs\");\r\n \r\n dotenv.config(); // Load environment variables\r\n@@ -29,9 +30,10 @@\n app.use(express.urlencoded({ extended: true })); // For form-data\r\n \r\n // Routes\r\n app.use(\"/api/auth\", authRoutes);\r\n-app.use(\"/api/home\", homeRoutes); // ✅ Mount upload route\r\n+app.use(\"/api/home\", homeRoutes);\r\n+app.use(\"/api/payment\", paymentRoutes); // ✅ Mount upload route\r\n \r\n // Static folder for uploads (optional: to serve files)\r\n app.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\r\n \r\n"
                }
            ],
            "date": 1753434415478,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst dotenv = require(\"dotenv\");\r\nconst connectDB = require(\"./config/db\");\r\nconst authRoutes = require(\"./routes/auth\");\r\nconst homeRoutes = require(\"./routes/home\"); // Home routes (upload, delete)\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\n\r\ndotenv.config(); // Load environment variables\r\n\r\n// Connect to MongoDB\r\nconnectDB();\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Ensure uploads directory exists\r\nconst uploadsDir = path.join(__dirname, \"uploads\");\r\nif (!fs.existsSync(uploadsDir)) {\r\n  fs.mkdirSync(uploadsDir);\r\n}\r\n\r\n// Middleware\r\napp.use(cors()); // Enable CORS\r\napp.use(express.json()); // Parse incoming JSON\r\napp.use(express.urlencoded({ extended: true })); // Parse urlencoded form data\r\n\r\n// Static folder for uploads so files can be accessed publicly\r\napp.use(\"/uploads\", express.static(uploadsDir));\r\n\r\n// Routes\r\napp.use(\"/api/auth\", authRoutes);\r\napp.use(\"/api/home\", homeRoutes); // Home routes with upload and delete\r\n\r\n// Root route for testing\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Backend is running...\");\r\n});\r\n\r\n// Handle invalid routes\r\napp.use((req, res) => {\r\n  res.status(404).json({ message: \"Route not found\" });\r\n});\r\n\r\n// Global error handler\r\napp.use((err, req, res, next) => {\r\n  console.error(err.stack);\r\n  res.status(500).json({ message: \"Internal Server Error\" });\r\n});\r\n\r\n// Start server\r\napp.listen(PORT, () => {\r\n  console.log(`✅ Server running on http://localhost:${PORT}`);\r\n});\r\n"
        }
    ]
}