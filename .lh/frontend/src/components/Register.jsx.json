{
    "sourceFile": "frontend/src/components/Register.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1753447588279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753448785951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,129 +1,239 @@\n-import React, { useState, useEffect } from \"react\";\r\n+import React, { useState } from \"react\";\r\n import \"./Login.css\";\r\n+import axios from \"axios\";\r\n \r\n export default function Register({ onToggle, onSuccess }) {\r\n-  const initialForm = React.useMemo(\r\n-    () => ({\r\n-      fullNames: \"\",\r\n-      familyName: \"\",\r\n-      email: \"\",\r\n-      password: \"\",\r\n-      gfgNumber: \"\",\r\n-    }),\r\n-    []\r\n-  );\r\n+  const initialForm = {\r\n+    fullNames: \"\",\r\n+    familyName: \"\",\r\n+    email: \"\",\r\n+    password: \"\",\r\n+    gfgNumber: \"\",\r\n+  };\r\n \r\n   const [formData, setFormData] = useState(initialForm);\r\n+  const [errors, setErrors] = useState({});\r\n+  const [isSubmitting, setIsSubmitting] = useState(false);\r\n+  const [serverError, setServerError] = useState(\"\");\r\n \r\n-  useEffect(() => {\r\n-    setFormData(initialForm);\r\n-  }, [initialForm]);\r\n+  const validateField = (name, value) => {\r\n+    let error = \"\";\r\n+    \r\n+    switch (name) {\r\n+      case \"fullNames\":\r\n+        if (!value.trim()) error = \"Full names are required\";\r\n+        else if (value.length < 2) error = \"Too short (min 2 chars)\";\r\n+        break;\r\n+      case \"familyName\":\r\n+        if (!value.trim()) error = \"Family name is required\";\r\n+        else if (value.length < 2) error = \"Too short (min 2 chars)\";\r\n+        break;\r\n+      case \"email\":\r\n+        if (!value.trim()) error = \"Email is required\";\r\n+        else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) \r\n+          error = \"Invalid email format\";\r\n+        break;\r\n+      case \"password\":\r\n+        if (!value) error = \"Password is required\";\r\n+        else if (value.length < 8) error = \"Too short (min 8 chars)\";\r\n+        break;\r\n+      case \"gfgNumber\":\r\n+        if (!value) error = \"GFG number is required\";\r\n+        else if (!/^\\d{14}$/.test(value)) \r\n+          error = \"Must be exactly 14 digits\";\r\n+        break;\r\n+      default:\r\n+        break;\r\n+    }\r\n+    \r\n+    return error;\r\n+  };\r\n \r\n   const handleChange = (e) => {\r\n-    setFormData((prev) => ({\r\n+    const { name, value } = e.target;\r\n+    \r\n+    // Validate on change\r\n+    const error = validateField(name, value);\r\n+    setErrors(prev => ({ ...prev, [name]: error }));\r\n+    \r\n+    setFormData(prev => ({\r\n       ...prev,\r\n-      [e.target.name]: e.target.value,\r\n+      [name]: value,\r\n     }));\r\n   };\r\n \r\n+  const validateForm = () => {\r\n+    const newErrors = {};\r\n+    let isValid = true;\r\n+\r\n+    Object.keys(formData).forEach(key => {\r\n+      const error = validateField(key, formData[key]);\r\n+      if (error) {\r\n+        newErrors[key] = error;\r\n+        isValid = false;\r\n+      }\r\n+    });\r\n+\r\n+    setErrors(newErrors);\r\n+    return isValid;\r\n+  };\r\n+\r\n   const handleSubmit = async (e) => {\r\n     e.preventDefault();\r\n+    setServerError(\"\");\r\n \r\n-    if (formData.gfgNumber.length !== 14 || !/^\\d+$/.test(formData.gfgNumber)) {\r\n-      alert(\"GFG number must be exactly 14 digits.\");\r\n+    if (!validateForm()) {\r\n       return;\r\n     }\r\n \r\n+    setIsSubmitting(true);\r\n+\r\n     try {\r\n-      const res = await fetch(\"http://localhost:5000/api/auth/register\", {\r\n-        method: \"POST\",\r\n-        headers: { \"Content-Type\": \"application/json\" },\r\n-        body: JSON.stringify(formData),\r\n-      });\r\n-      const data = await res.json();\r\n-      if (res.ok) {\r\n-        // Store token in localStorage\r\n-        localStorage.setItem(\"token\", data.token);\r\n+      const res = await axios.post(\r\n+        \"http://localhost:5000/api/auth/register\", \r\n+        formData,\r\n+        {\r\n+          headers: { \"Content-Type\": \"application/json\" },\r\n+          validateStatus: (status) => status < 500\r\n+        }\r\n+      );\r\n+\r\n+      if (res.data.success) {\r\n+        localStorage.setItem(\"token\", res.data.token);\r\n         setFormData(initialForm);\r\n-        if (onSuccess) onSuccess(data.user); // Pass user data to parent\r\n+        if (onSuccess) onSuccess(res.data.user);\r\n       } else {\r\n-        alert(data.message || \"Registration failed.\");\r\n+        setServerError(res.data.message || \"Registration failed\");\r\n       }\r\n     } catch (err) {\r\n-      console.error(\"Error during registration:\", err);\r\n-      alert(\"Network error.\");\r\n+      console.error(\"Registration error:\", err);\r\n+      setServerError(\r\n+        err.response?.data?.message || \r\n+        err.message || \r\n+        \"Network error. Please try again.\"\r\n+      );\r\n+    } finally {\r\n+      setIsSubmitting(false);\r\n     }\r\n   };\r\n \r\n   return (\r\n     <div id=\"Container\">\r\n-      <form className=\"form\" onSubmit={handleSubmit}>\r\n+      <form className=\"form\" onSubmit={handleSubmit} noValidate>\r\n         <div id=\"login-lable\">Register</div>\r\n \r\n-        <input\r\n-          className=\"form-content\"\r\n-          type=\"text\"\r\n-          name=\"fullNames\"\r\n-          placeholder=\"Full Names\"\r\n-          autoComplete=\"new-full-names\"\r\n-          autoCorrect=\"off\"\r\n-          autoCapitalize=\"off\"\r\n-          value={formData.fullNames}\r\n-          onChange={handleChange}\r\n-          required\r\n-        />\r\n-        <input\r\n-          className=\"form-content\"\r\n-          type=\"text\"\r\n-          name=\"familyName\"\r\n-          placeholder=\"Family Name\"\r\n-          autoComplete=\"new-family-name\"\r\n-          autoCorrect=\"off\"\r\n-          autoCapitalize=\"off\"\r\n-          value={formData.familyName}\r\n-          onChange={handleChange}\r\n-          required\r\n-        />\r\n-        <input\r\n-          className=\"form-content\"\r\n-          type=\"email\"\r\n-          name=\"email\"\r\n-          placeholder=\"Email\"\r\n-          autoComplete=\"new-email\"\r\n-          autoCorrect=\"off\"\r\n-          autoCapitalize=\"off\"\r\n-          value={formData.email}\r\n-          onChange={handleChange}\r\n-          required\r\n-        />\r\n-        <input\r\n-          className=\"form-content\"\r\n-          type=\"password\"\r\n-          name=\"password\"\r\n-          placeholder=\"Password\"\r\n-          autoComplete=\"new-password\"\r\n-          autoCorrect=\"off\"\r\n-          autoCapitalize=\"off\"\r\n-          value={formData.password}\r\n-          onChange={handleChange}\r\n-          required\r\n-        />\r\n-        <input\r\n-          className=\"form-content\"\r\n-          type=\"text\"\r\n-          name=\"gfgNumber\"\r\n-          placeholder=\"GFG 14-Digit Number\"\r\n-          autoComplete=\"new-gfg-number\"\r\n-          autoCorrect=\"off\"\r\n-          autoCapitalize=\"off\"\r\n-          maxLength=\"14\"\r\n-          value={formData.gfgNumber}\r\n-          onChange={handleChange}\r\n-          required\r\n-        />\r\n-        <button type=\"submit\">Continue</button>\r\n-        <button type=\"button\" style={{ marginTop: \"1em\" }} onClick={onToggle}>\r\n+        {serverError && (\r\n+          <div className=\"error-message server-error\">\r\n+            {serverError}\r\n+          </div>\r\n+        )}\r\n+\r\n+        <div className=\"input-group\">\r\n+          <input\r\n+            className={`form-content ${errors.fullNames ? \"error\" : \"\"}`}\r\n+            type=\"text\"\r\n+            name=\"fullNames\"\r\n+            placeholder=\"Full Names\"\r\n+            autoComplete=\"new-full-names\"\r\n+            autoCorrect=\"off\"\r\n+            autoCapitalize=\"words\"\r\n+            value={formData.fullNames}\r\n+            onChange={handleChange}\r\n+            required\r\n+          />\r\n+          {errors.fullNames && (\r\n+            <span className=\"error-message\">{errors.fullNames}</span>\r\n+          )}\r\n+        </div>\r\n+\r\n+        <div className=\"input-group\">\r\n+          <input\r\n+            className={`form-content ${errors.familyName ? \"error\" : \"\"}`}\r\n+            type=\"text\"\r\n+            name=\"familyName\"\r\n+            placeholder=\"Family Name\"\r\n+            autoComplete=\"new-family-name\"\r\n+            autoCorrect=\"off\"\r\n+            autoCapitalize=\"words\"\r\n+            value={formData.familyName}\r\n+            onChange={handleChange}\r\n+            required\r\n+          />\r\n+          {errors.familyName && (\r\n+            <span className=\"error-message\">{errors.familyName}</span>\r\n+          )}\r\n+        </div>\r\n+\r\n+        <div className=\"input-group\">\r\n+          <input\r\n+            className={`form-content ${errors.email ? \"error\" : \"\"}`}\r\n+            type=\"email\"\r\n+            name=\"email\"\r\n+            placeholder=\"Email\"\r\n+            autoComplete=\"new-email\"\r\n+            autoCorrect=\"off\"\r\n+            autoCapitalize=\"off\"\r\n+            value={formData.email}\r\n+            onChange={handleChange}\r\n+            required\r\n+          />\r\n+          {errors.email && (\r\n+            <span className=\"error-message\">{errors.email}</span>\r\n+          )}\r\n+        </div>\r\n+\r\n+        <div className=\"input-group\">\r\n+          <input\r\n+            className={`form-content ${errors.password ? \"error\" : \"\"}`}\r\n+            type=\"password\"\r\n+            name=\"password\"\r\n+            placeholder=\"Password\"\r\n+            autoComplete=\"new-password\"\r\n+            autoCorrect=\"off\"\r\n+            autoCapitalize=\"off\"\r\n+            value={formData.password}\r\n+            onChange={handleChange}\r\n+            required\r\n+          />\r\n+          {errors.password && (\r\n+            <span className=\"error-message\">{errors.password}</span>\r\n+          )}\r\n+        </div>\r\n+\r\n+        <div className=\"input-group\">\r\n+          <input\r\n+            className={`form-content ${errors.gfgNumber ? \"error\" : \"\"}`}\r\n+            type=\"text\"\r\n+            name=\"gfgNumber\"\r\n+            placeholder=\"GFG 14-Digit Number\"\r\n+            autoComplete=\"new-gfg-number\"\r\n+            autoCorrect=\"off\"\r\n+            autoCapitalize=\"off\"\r\n+            maxLength=\"14\"\r\n+            value={formData.gfgNumber}\r\n+            onChange={handleChange}\r\n+            required\r\n+          />\r\n+          {errors.gfgNumber && (\r\n+            <span className=\"error-message\">{errors.gfgNumber}</span>\r\n+          )}\r\n+        </div>\r\n+\r\n+        <button \r\n+          type=\"submit\" \r\n+          disabled={isSubmitting}\r\n+          className={isSubmitting ? \"submitting\" : \"\"}\r\n+        >\r\n+          {isSubmitting ? \"Processing...\" : \"Continue\"}\r\n+        </button>\r\n+        \r\n+        <button \r\n+          type=\"button\" \r\n+          style={{ marginTop: \"1em\" }} \r\n+          onClick={onToggle}\r\n+          disabled={isSubmitting}\r\n+        >\r\n           I have an account\r\n         </button>\r\n       </form>\r\n \r\n@@ -157,5 +267,5 @@\n \r\n       <div id=\"emiter\">{/* Emitter SVG here if needed */}</div>\r\n     </div>\r\n   );\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753449190640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   const [serverError, setServerError] = useState(\"\");\r\n \r\n   const validateField = (name, value) => {\r\n     let error = \"\";\r\n-    \r\n+\r\n     switch (name) {\r\n       case \"fullNames\":\r\n         if (!value.trim()) error = \"Full names are required\";\r\n         else if (value.length < 2) error = \"Too short (min 2 chars)\";\r\n@@ -29,35 +29,34 @@\n         else if (value.length < 2) error = \"Too short (min 2 chars)\";\r\n         break;\r\n       case \"email\":\r\n         if (!value.trim()) error = \"Email is required\";\r\n-        else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) \r\n+        else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value))\r\n           error = \"Invalid email format\";\r\n         break;\r\n       case \"password\":\r\n         if (!value) error = \"Password is required\";\r\n         else if (value.length < 8) error = \"Too short (min 8 chars)\";\r\n         break;\r\n       case \"gfgNumber\":\r\n         if (!value) error = \"GFG number is required\";\r\n-        else if (!/^\\d{14}$/.test(value)) \r\n-          error = \"Must be exactly 14 digits\";\r\n+        else if (!/^\\d{14}$/.test(value)) error = \"Must be exactly 14 digits\";\r\n         break;\r\n       default:\r\n         break;\r\n     }\r\n-    \r\n+\r\n     return error;\r\n   };\r\n \r\n   const handleChange = (e) => {\r\n     const { name, value } = e.target;\r\n-    \r\n+\r\n     // Validate on change\r\n     const error = validateField(name, value);\r\n-    setErrors(prev => ({ ...prev, [name]: error }));\r\n-    \r\n-    setFormData(prev => ({\r\n+    setErrors((prev) => ({ ...prev, [name]: error }));\r\n+\r\n+    setFormData((prev) => ({\r\n       ...prev,\r\n       [name]: value,\r\n     }));\r\n   };\r\n@@ -65,9 +64,9 @@\n   const validateForm = () => {\r\n     const newErrors = {};\r\n     let isValid = true;\r\n \r\n-    Object.keys(formData).forEach(key => {\r\n+    Object.keys(formData).forEach((key) => {\r\n       const error = validateField(key, formData[key]);\r\n       if (error) {\r\n         newErrors[key] = error;\r\n         isValid = false;\r\n@@ -89,13 +88,13 @@\n     setIsSubmitting(true);\r\n \r\n     try {\r\n       const res = await axios.post(\r\n-        \"http://localhost:5000/api/auth/register\", \r\n+        \"http://localhost:5000/api/auth/register\",\r\n         formData,\r\n         {\r\n           headers: { \"Content-Type\": \"application/json\" },\r\n-          validateStatus: (status) => status < 500\r\n+          // Remove the validateStatus - let axios handle all errors\r\n         }\r\n       );\r\n \r\n       if (res.data.success) {\r\n@@ -106,13 +105,23 @@\n         setServerError(res.data.message || \"Registration failed\");\r\n       }\r\n     } catch (err) {\r\n       console.error(\"Registration error:\", err);\r\n-      setServerError(\r\n-        err.response?.data?.message || \r\n-        err.message || \r\n-        \"Network error. Please try again.\"\r\n-      );\r\n+      // More detailed error handling\r\n+      if (err.response) {\r\n+        // The request was made and the server responded with a status code\r\n+        setServerError(\r\n+          err.response.data?.message ||\r\n+            err.response.data?.error?.message ||\r\n+            `Server error (${err.response.status})`\r\n+        );\r\n+      } else if (err.request) {\r\n+        // The request was made but no response was received\r\n+        setServerError(\"Network error. Please check your connection.\");\r\n+      } else {\r\n+        // Something happened in setting up the request\r\n+        setServerError(\"Request setup error. Please try again.\");\r\n+      }\r\n     } finally {\r\n       setIsSubmitting(false);\r\n     }\r\n   };\r\n@@ -122,11 +131,9 @@\n       <form className=\"form\" onSubmit={handleSubmit} noValidate>\r\n         <div id=\"login-lable\">Register</div>\r\n \r\n         {serverError && (\r\n-          <div className=\"error-message server-error\">\r\n-            {serverError}\r\n-          </div>\r\n+          <div className=\"error-message server-error\">{serverError}</div>\r\n         )}\r\n \r\n         <div className=\"input-group\">\r\n           <input\r\n@@ -218,19 +225,19 @@\n             <span className=\"error-message\">{errors.gfgNumber}</span>\r\n           )}\r\n         </div>\r\n \r\n-        <button \r\n-          type=\"submit\" \r\n+        <button\r\n+          type=\"submit\"\r\n           disabled={isSubmitting}\r\n           className={isSubmitting ? \"submitting\" : \"\"}\r\n         >\r\n           {isSubmitting ? \"Processing...\" : \"Continue\"}\r\n         </button>\r\n-        \r\n-        <button \r\n-          type=\"button\" \r\n-          style={{ marginTop: \"1em\" }} \r\n+\r\n+        <button\r\n+          type=\"button\"\r\n+          style={{ marginTop: \"1em\" }}\r\n           onClick={onToggle}\r\n           disabled={isSubmitting}\r\n         >\r\n           I have an account\r\n@@ -267,5 +274,5 @@\n \r\n       <div id=\"emiter\">{/* Emitter SVG here if needed */}</div>\r\n     </div>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1753450363859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,246 +1,129 @@\n-import React, { useState } from \"react\";\r\n+import React, { useState, useEffect } from \"react\";\r\n import \"./Login.css\";\r\n-import axios from \"axios\";\r\n \r\n export default function Register({ onToggle, onSuccess }) {\r\n-  const initialForm = {\r\n-    fullNames: \"\",\r\n-    familyName: \"\",\r\n-    email: \"\",\r\n-    password: \"\",\r\n-    gfgNumber: \"\",\r\n-  };\r\n+  const initialForm = React.useMemo(\r\n+    () => ({\r\n+      fullNames: \"\",\r\n+      familyName: \"\",\r\n+      email: \"\",\r\n+      password: \"\",\r\n+      gfgNumber: \"\",\r\n+    }),\r\n+    []\r\n+  );\r\n \r\n   const [formData, setFormData] = useState(initialForm);\r\n-  const [errors, setErrors] = useState({});\r\n-  const [isSubmitting, setIsSubmitting] = useState(false);\r\n-  const [serverError, setServerError] = useState(\"\");\r\n \r\n-  const validateField = (name, value) => {\r\n-    let error = \"\";\r\n+  useEffect(() => {\r\n+    setFormData(initialForm);\r\n+  }, [initialForm]);\r\n \r\n-    switch (name) {\r\n-      case \"fullNames\":\r\n-        if (!value.trim()) error = \"Full names are required\";\r\n-        else if (value.length < 2) error = \"Too short (min 2 chars)\";\r\n-        break;\r\n-      case \"familyName\":\r\n-        if (!value.trim()) error = \"Family name is required\";\r\n-        else if (value.length < 2) error = \"Too short (min 2 chars)\";\r\n-        break;\r\n-      case \"email\":\r\n-        if (!value.trim()) error = \"Email is required\";\r\n-        else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value))\r\n-          error = \"Invalid email format\";\r\n-        break;\r\n-      case \"password\":\r\n-        if (!value) error = \"Password is required\";\r\n-        else if (value.length < 8) error = \"Too short (min 8 chars)\";\r\n-        break;\r\n-      case \"gfgNumber\":\r\n-        if (!value) error = \"GFG number is required\";\r\n-        else if (!/^\\d{14}$/.test(value)) error = \"Must be exactly 14 digits\";\r\n-        break;\r\n-      default:\r\n-        break;\r\n-    }\r\n-\r\n-    return error;\r\n-  };\r\n-\r\n   const handleChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-\r\n-    // Validate on change\r\n-    const error = validateField(name, value);\r\n-    setErrors((prev) => ({ ...prev, [name]: error }));\r\n-\r\n     setFormData((prev) => ({\r\n       ...prev,\r\n-      [name]: value,\r\n+      [e.target.name]: e.target.value,\r\n     }));\r\n   };\r\n \r\n-  const validateForm = () => {\r\n-    const newErrors = {};\r\n-    let isValid = true;\r\n-\r\n-    Object.keys(formData).forEach((key) => {\r\n-      const error = validateField(key, formData[key]);\r\n-      if (error) {\r\n-        newErrors[key] = error;\r\n-        isValid = false;\r\n-      }\r\n-    });\r\n-\r\n-    setErrors(newErrors);\r\n-    return isValid;\r\n-  };\r\n-\r\n   const handleSubmit = async (e) => {\r\n     e.preventDefault();\r\n-    setServerError(\"\");\r\n \r\n-    if (!validateForm()) {\r\n+    if (formData.gfgNumber.length !== 14 || !/^\\d+$/.test(formData.gfgNumber)) {\r\n+      alert(\"GFG number must be exactly 14 digits.\");\r\n       return;\r\n     }\r\n \r\n-    setIsSubmitting(true);\r\n-\r\n     try {\r\n-      const res = await axios.post(\r\n-        \"http://localhost:5000/api/auth/register\",\r\n-        formData,\r\n-        {\r\n-          headers: { \"Content-Type\": \"application/json\" },\r\n-          // Remove the validateStatus - let axios handle all errors\r\n-        }\r\n-      );\r\n-\r\n-      if (res.data.success) {\r\n-        localStorage.setItem(\"token\", res.data.token);\r\n+      const res = await fetch(\"http://localhost:5000/api/auth/register\", {\r\n+        method: \"POST\",\r\n+        headers: { \"Content-Type\": \"application/json\" },\r\n+        body: JSON.stringify(formData),\r\n+      });\r\n+      const data = await res.json();\r\n+      if (res.ok) {\r\n+        // Store token in localStorage\r\n+        localStorage.setItem(\"token\", data.token);\r\n         setFormData(initialForm);\r\n-        if (onSuccess) onSuccess(res.data.user);\r\n+        if (onSuccess) onSuccess(data.user); // Pass user data to parent\r\n       } else {\r\n-        setServerError(res.data.message || \"Registration failed\");\r\n+        alert(data.message || \"Registration failed.\");\r\n       }\r\n     } catch (err) {\r\n-      console.error(\"Registration error:\", err);\r\n-      // More detailed error handling\r\n-      if (err.response) {\r\n-        // The request was made and the server responded with a status code\r\n-        setServerError(\r\n-          err.response.data?.message ||\r\n-            err.response.data?.error?.message ||\r\n-            `Server error (${err.response.status})`\r\n-        );\r\n-      } else if (err.request) {\r\n-        // The request was made but no response was received\r\n-        setServerError(\"Network error. Please check your connection.\");\r\n-      } else {\r\n-        // Something happened in setting up the request\r\n-        setServerError(\"Request setup error. Please try again.\");\r\n-      }\r\n-    } finally {\r\n-      setIsSubmitting(false);\r\n+      console.error(\"Error during registration:\", err);\r\n+      alert(\"Network error.\");\r\n     }\r\n   };\r\n \r\n   return (\r\n     <div id=\"Container\">\r\n-      <form className=\"form\" onSubmit={handleSubmit} noValidate>\r\n+      <form className=\"form\" onSubmit={handleSubmit}>\r\n         <div id=\"login-lable\">Register</div>\r\n \r\n-        {serverError && (\r\n-          <div className=\"error-message server-error\">{serverError}</div>\r\n-        )}\r\n-\r\n-        <div className=\"input-group\">\r\n-          <input\r\n-            className={`form-content ${errors.fullNames ? \"error\" : \"\"}`}\r\n-            type=\"text\"\r\n-            name=\"fullNames\"\r\n-            placeholder=\"Full Names\"\r\n-            autoComplete=\"new-full-names\"\r\n-            autoCorrect=\"off\"\r\n-            autoCapitalize=\"words\"\r\n-            value={formData.fullNames}\r\n-            onChange={handleChange}\r\n-            required\r\n-          />\r\n-          {errors.fullNames && (\r\n-            <span className=\"error-message\">{errors.fullNames}</span>\r\n-          )}\r\n-        </div>\r\n-\r\n-        <div className=\"input-group\">\r\n-          <input\r\n-            className={`form-content ${errors.familyName ? \"error\" : \"\"}`}\r\n-            type=\"text\"\r\n-            name=\"familyName\"\r\n-            placeholder=\"Family Name\"\r\n-            autoComplete=\"new-family-name\"\r\n-            autoCorrect=\"off\"\r\n-            autoCapitalize=\"words\"\r\n-            value={formData.familyName}\r\n-            onChange={handleChange}\r\n-            required\r\n-          />\r\n-          {errors.familyName && (\r\n-            <span className=\"error-message\">{errors.familyName}</span>\r\n-          )}\r\n-        </div>\r\n-\r\n-        <div className=\"input-group\">\r\n-          <input\r\n-            className={`form-content ${errors.email ? \"error\" : \"\"}`}\r\n-            type=\"email\"\r\n-            name=\"email\"\r\n-            placeholder=\"Email\"\r\n-            autoComplete=\"new-email\"\r\n-            autoCorrect=\"off\"\r\n-            autoCapitalize=\"off\"\r\n-            value={formData.email}\r\n-            onChange={handleChange}\r\n-            required\r\n-          />\r\n-          {errors.email && (\r\n-            <span className=\"error-message\">{errors.email}</span>\r\n-          )}\r\n-        </div>\r\n-\r\n-        <div className=\"input-group\">\r\n-          <input\r\n-            className={`form-content ${errors.password ? \"error\" : \"\"}`}\r\n-            type=\"password\"\r\n-            name=\"password\"\r\n-            placeholder=\"Password\"\r\n-            autoComplete=\"new-password\"\r\n-            autoCorrect=\"off\"\r\n-            autoCapitalize=\"off\"\r\n-            value={formData.password}\r\n-            onChange={handleChange}\r\n-            required\r\n-          />\r\n-          {errors.password && (\r\n-            <span className=\"error-message\">{errors.password}</span>\r\n-          )}\r\n-        </div>\r\n-\r\n-        <div className=\"input-group\">\r\n-          <input\r\n-            className={`form-content ${errors.gfgNumber ? \"error\" : \"\"}`}\r\n-            type=\"text\"\r\n-            name=\"gfgNumber\"\r\n-            placeholder=\"GFG 14-Digit Number\"\r\n-            autoComplete=\"new-gfg-number\"\r\n-            autoCorrect=\"off\"\r\n-            autoCapitalize=\"off\"\r\n-            maxLength=\"14\"\r\n-            value={formData.gfgNumber}\r\n-            onChange={handleChange}\r\n-            required\r\n-          />\r\n-          {errors.gfgNumber && (\r\n-            <span className=\"error-message\">{errors.gfgNumber}</span>\r\n-          )}\r\n-        </div>\r\n-\r\n-        <button\r\n-          type=\"submit\"\r\n-          disabled={isSubmitting}\r\n-          className={isSubmitting ? \"submitting\" : \"\"}\r\n-        >\r\n-          {isSubmitting ? \"Processing...\" : \"Continue\"}\r\n-        </button>\r\n-\r\n-        <button\r\n-          type=\"button\"\r\n-          style={{ marginTop: \"1em\" }}\r\n-          onClick={onToggle}\r\n-          disabled={isSubmitting}\r\n-        >\r\n+        <input\r\n+          className=\"form-content\"\r\n+          type=\"text\"\r\n+          name=\"fullNames\"\r\n+          placeholder=\"Full Names\"\r\n+          autocomplete=\"new-full-names\"\r\n+          autocorrect=\"off\"\r\n+          autocapitalize=\"off\"\r\n+          value={formData.fullNames}\r\n+          onChange={handleChange}\r\n+          required\r\n+        />\r\n+        <input\r\n+          className=\"form-content\"\r\n+          type=\"text\"\r\n+          name=\"familyName\"\r\n+          placeholder=\"Family Name\"\r\n+          autocomplete=\"new-family-name\"\r\n+          autocorrect=\"off\"\r\n+          autocapitalize=\"off\"\r\n+          value={formData.familyName}\r\n+          onChange={handleChange}\r\n+          required\r\n+        />\r\n+        <input\r\n+          className=\"form-content\"\r\n+          type=\"email\"\r\n+          name=\"email\"\r\n+          placeholder=\"Email\"\r\n+          autocomplete=\"new-email\"\r\n+          autocorrect=\"off\"\r\n+          autocapitalize=\"off\"\r\n+          value={formData.email}\r\n+          onChange={handleChange}\r\n+          required\r\n+        />\r\n+        <input\r\n+          className=\"form-content\"\r\n+          type=\"password\"\r\n+          name=\"password\"\r\n+          placeholder=\"Password\"\r\n+          autocomplete=\"new-password\"\r\n+          autocorrect=\"off\"\r\n+          autocapitalize=\"off\"\r\n+          value={formData.password}\r\n+          onChange={handleChange}\r\n+          required\r\n+        />\r\n+        <input\r\n+          className=\"form-content\"\r\n+          type=\"text\"\r\n+          name=\"gfgNumber\"\r\n+          placeholder=\"GFG 14-Digit Number\"\r\n+          autocomplete=\"new-gfg-number\"\r\n+          autocorrect=\"off\"\r\n+          autocapitalize=\"off\"\r\n+          maxLength=\"14\"\r\n+          value={formData.gfgNumber}\r\n+          onChange={handleChange}\r\n+          required\r\n+        />\r\n+        <button type=\"submit\">Continue</button>\r\n+        <button type=\"button\" style={{ marginTop: \"1em\" }} onClick={onToggle}>\r\n           I have an account\r\n         </button>\r\n       </form>\r\n \r\n"
                },
                {
                    "date": 1753450457162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,11 @@\n           className=\"form-content\"\r\n           type=\"text\"\r\n           name=\"fullNames\"\r\n           placeholder=\"Full Names\"\r\n-          autocomplete=\"new-full-names\"\r\n-          autocorrect=\"off\"\r\n-          autocapitalize=\"off\"\r\n+          autoComplete=\"new-full-names\"\r\n+          autoCorrect=\"off\"\r\n+          autoCapitalize=\"off\"\r\n           value={formData.fullNames}\r\n           onChange={handleChange}\r\n           required\r\n         />\r\n@@ -76,11 +76,11 @@\n           className=\"form-content\"\r\n           type=\"text\"\r\n           name=\"familyName\"\r\n           placeholder=\"Family Name\"\r\n-          autocomplete=\"new-family-name\"\r\n-          autocorrect=\"off\"\r\n-          autocapitalize=\"off\"\r\n+          autoComplete=\"new-family-name\"\r\n+          autoCorrect=\"off\"\r\n+          autoCapitalize=\"off\"\r\n           value={formData.familyName}\r\n           onChange={handleChange}\r\n           required\r\n         />\r\n@@ -88,11 +88,11 @@\n           className=\"form-content\"\r\n           type=\"email\"\r\n           name=\"email\"\r\n           placeholder=\"Email\"\r\n-          autocomplete=\"new-email\"\r\n-          autocorrect=\"off\"\r\n-          autocapitalize=\"off\"\r\n+          autoComplete=\"new-email\"\r\n+          autoCorrect=\"off\"\r\n+          autoCapitalize=\"off\"\r\n           value={formData.email}\r\n           onChange={handleChange}\r\n           required\r\n         />\r\n@@ -100,11 +100,11 @@\n           className=\"form-content\"\r\n           type=\"password\"\r\n           name=\"password\"\r\n           placeholder=\"Password\"\r\n-          autocomplete=\"new-password\"\r\n-          autocorrect=\"off\"\r\n-          autocapitalize=\"off\"\r\n+          autoComplete=\"new-password\"\r\n+          autoCorrect=\"off\"\r\n+          autoCapitalize=\"off\"\r\n           value={formData.password}\r\n           onChange={handleChange}\r\n           required\r\n         />\r\n@@ -112,11 +112,11 @@\n           className=\"form-content\"\r\n           type=\"text\"\r\n           name=\"gfgNumber\"\r\n           placeholder=\"GFG 14-Digit Number\"\r\n-          autocomplete=\"new-gfg-number\"\r\n-          autocorrect=\"off\"\r\n-          autocapitalize=\"off\"\r\n+          autoComplete=\"new-gfg-number\"\r\n+          autoCorrect=\"off\"\r\n+          autoCapitalize=\"off\"\r\n           maxLength=\"14\"\r\n           value={formData.gfgNumber}\r\n           onChange={handleChange}\r\n           required\r\n"
                }
            ],
            "date": 1753447588278,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport \"./Login.css\";\r\n\r\nexport default function Register({ onToggle, onSuccess }) {\r\n  const initialForm = React.useMemo(\r\n    () => ({\r\n      fullNames: \"\",\r\n      familyName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      gfgNumber: \"\",\r\n    }),\r\n    []\r\n  );\r\n\r\n  const [formData, setFormData] = useState(initialForm);\r\n\r\n  useEffect(() => {\r\n    setFormData(initialForm);\r\n  }, [initialForm]);\r\n\r\n  const handleChange = (e) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (formData.gfgNumber.length !== 14 || !/^\\d+$/.test(formData.gfgNumber)) {\r\n      alert(\"GFG number must be exactly 14 digits.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/auth/register\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await res.json();\r\n      if (res.ok) {\r\n        // Store token in localStorage\r\n        localStorage.setItem(\"token\", data.token);\r\n        setFormData(initialForm);\r\n        if (onSuccess) onSuccess(data.user); // Pass user data to parent\r\n      } else {\r\n        alert(data.message || \"Registration failed.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error during registration:\", err);\r\n      alert(\"Network error.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"Container\">\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <div id=\"login-lable\">Register</div>\r\n\r\n        <input\r\n          className=\"form-content\"\r\n          type=\"text\"\r\n          name=\"fullNames\"\r\n          placeholder=\"Full Names\"\r\n          autoComplete=\"new-full-names\"\r\n          autoCorrect=\"off\"\r\n          autoCapitalize=\"off\"\r\n          value={formData.fullNames}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <input\r\n          className=\"form-content\"\r\n          type=\"text\"\r\n          name=\"familyName\"\r\n          placeholder=\"Family Name\"\r\n          autoComplete=\"new-family-name\"\r\n          autoCorrect=\"off\"\r\n          autoCapitalize=\"off\"\r\n          value={formData.familyName}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <input\r\n          className=\"form-content\"\r\n          type=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          autoComplete=\"new-email\"\r\n          autoCorrect=\"off\"\r\n          autoCapitalize=\"off\"\r\n          value={formData.email}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <input\r\n          className=\"form-content\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          autoComplete=\"new-password\"\r\n          autoCorrect=\"off\"\r\n          autoCapitalize=\"off\"\r\n          value={formData.password}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <input\r\n          className=\"form-content\"\r\n          type=\"text\"\r\n          name=\"gfgNumber\"\r\n          placeholder=\"GFG 14-Digit Number\"\r\n          autoComplete=\"new-gfg-number\"\r\n          autoCorrect=\"off\"\r\n          autoCapitalize=\"off\"\r\n          maxLength=\"14\"\r\n          value={formData.gfgNumber}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <button type=\"submit\">Continue</button>\r\n        <button type=\"button\" style={{ marginTop: \"1em\" }} onClick={onToggle}>\r\n          I have an account\r\n        </button>\r\n      </form>\r\n\r\n      <div id=\"rays\">\r\n        <svg\r\n          fill=\"none\"\r\n          viewBox=\"0 0 299 152\"\r\n          height=\"9em\"\r\n          width=\"18em\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            fill=\"url(#paint0_linear_8_3)\"\r\n            d=\"M149.5 152H133.42L0 0H149.5L299 0L165.58 152H149.5Z\"\r\n          ></path>\r\n          <defs>\r\n            <linearGradient\r\n              gradientUnits=\"userSpaceOnUse\"\r\n              y2=\"12.1981\"\r\n              x2=\"150.12\"\r\n              y1=\"152\"\r\n              x1=\"149.5\"\r\n              id=\"paint0_linear_8_3\"\r\n            >\r\n              <stop stopColor=\"#00E0FF\"></stop>\r\n              <stop stopOpacity=\"0\" stopColor=\"#65EDFF\" offset=\"1\"></stop>\r\n            </linearGradient>\r\n          </defs>\r\n        </svg>\r\n      </div>\r\n\r\n      <div id=\"emiter\">{/* Emitter SVG here if needed */}</div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}